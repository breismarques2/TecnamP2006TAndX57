#ifndef  ENTITY_SDAIEVALUATED_DEGENERATE_PCURVE_CC
#define  ENTITY_SDAIEVALUATED_DEGENERATE_PCURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiEvaluated_degenerate_pcurve.h"

EntityDescriptor * config_control_design::e_evaluated_degenerate_pcurve = 0;
AttrDescriptor * config_control_design::a_271equivalent_point = 0;

SdaiEvaluated_degenerate_pcurve::SdaiEvaluated_degenerate_pcurve(): SdaiDegenerate_pcurve(), _equivalent_point( 0 ) {
        /*  parent: SdaiDegenerate_pcurve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_evaluated_degenerate_pcurve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_271equivalent_point, ( SDAI_Application_instance_ptr * ) & _equivalent_point );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiEvaluated_degenerate_pcurve::SdaiEvaluated_degenerate_pcurve ( SdaiEvaluated_degenerate_pcurve & e ) : SdaiDegenerate_pcurve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiEvaluated_degenerate_pcurve::~SdaiEvaluated_degenerate_pcurve() {
}

SdaiEvaluated_degenerate_pcurve::SdaiEvaluated_degenerate_pcurve( SDAI_Application_instance * se, bool addAttrs ) : SdaiDegenerate_pcurve( se, addAttrs ), _equivalent_point( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiDegenerate_pcurve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_evaluated_degenerate_pcurve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_271equivalent_point, ( SDAI_Application_instance_ptr * ) &_equivalent_point );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiCartesian_point_ptr SdaiEvaluated_degenerate_pcurve::equivalent_point_() {
    if( !_equivalent_point ) {
        _equivalent_point = new SdaiCartesian_point;
    }
    return (SdaiCartesian_point_ptr) _equivalent_point;
}

SdaiCartesian_point_ptr_c SdaiEvaluated_degenerate_pcurve::equivalent_point_() const {
    return (SdaiCartesian_point_ptr) _equivalent_point;
}

void SdaiEvaluated_degenerate_pcurve::equivalent_point_( const SdaiCartesian_point_ptr x ) {
    _equivalent_point = x;
}

void init_SdaiEvaluated_degenerate_pcurve( Registry& reg ) {
    std::string str;

    config_control_design::e_evaluated_degenerate_pcurve->AddSupertype(config_control_design::e_degenerate_pcurve);
    config_control_design::e_degenerate_pcurve->AddSubtype(config_control_design::e_evaluated_degenerate_pcurve);
    config_control_design::a_271equivalent_point =
      new AttrDescriptor( "equivalent_point", config_control_design::e_cartesian_point, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_evaluated_degenerate_pcurve);
        config_control_design::e_evaluated_degenerate_pcurve->AddExplicitAttr (config_control_design::a_271equivalent_point);
        reg.AddEntity( *config_control_design::e_evaluated_degenerate_pcurve );
}

#endif
