#ifndef  ENTITY_SDAIEDGE_CURVE_CC
#define  ENTITY_SDAIEDGE_CURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiEdge_curve.h"

EntityDescriptor * config_control_design::e_edge_curve = 0;
AttrDescriptor * config_control_design::a_433edge_geometry = 0;
AttrDescriptor * config_control_design::a_434same_sense = 0;

SdaiEdge_curve::SdaiEdge_curve(): SdaiEdge(), _edge_geometry( 0 ) {
        /*  parent: SdaiEdge  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */
        /*  parent: SdaiGeometric_representation_item  */
    HeadEntity(this);
    AppendMultInstance(new SdaiGeometric_representation_item(this));

    eDesc = config_control_design::e_edge_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_433edge_geometry, ( SDAI_Application_instance_ptr * ) & _edge_geometry );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_434same_sense, & _same_sense );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiEdge_curve::SdaiEdge_curve ( SdaiEdge_curve & e ) : SdaiEdge() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiEdge_curve::~SdaiEdge_curve() {
}

SdaiEdge_curve::SdaiEdge_curve( SDAI_Application_instance * se, bool addAttrs ) : SdaiEdge( se, addAttrs ), _edge_geometry( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiEdge */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */
        /* parent: SdaiGeometric_representation_item */
    se->AppendMultInstance( new SdaiGeometric_representation_item( se, addAttrs ) );

    eDesc = config_control_design::e_edge_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_433edge_geometry, ( SDAI_Application_instance_ptr * ) &_edge_geometry );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_434same_sense,  &_same_sense );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiCurve_ptr SdaiEdge_curve::edge_geometry_() {
    if( !_edge_geometry ) {
        _edge_geometry = new SdaiCurve;
    }
    return (SdaiCurve_ptr) _edge_geometry;
}

SdaiCurve_ptr_c SdaiEdge_curve::edge_geometry_() const {
    return (SdaiCurve_ptr) _edge_geometry;
}

void SdaiEdge_curve::edge_geometry_( const SdaiCurve_ptr x ) {
    _edge_geometry = x;
}

Boolean SdaiEdge_curve::same_sense_() const {
    return (const Boolean) _same_sense;
}

void SdaiEdge_curve::same_sense_( const Boolean x ) {
    _same_sense.put (x);
}

void init_SdaiEdge_curve( Registry& reg ) {
    std::string str;

    config_control_design::e_edge_curve->AddSupertype(config_control_design::e_edge);
    config_control_design::e_edge->AddSubtype(config_control_design::e_edge_curve);
    config_control_design::e_edge_curve->AddSupertype(config_control_design::e_geometric_representation_item);
    config_control_design::e_geometric_representation_item->AddSubtype(config_control_design::e_edge_curve);
    config_control_design::a_433edge_geometry =
      new AttrDescriptor( "edge_geometry", config_control_design::e_curve, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_edge_curve);
        config_control_design::e_edge_curve->AddExplicitAttr (config_control_design::a_433edge_geometry);
        config_control_design::a_434same_sense =
          new AttrDescriptor("same_sense",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_edge_curve);
        config_control_design::e_edge_curve->AddExplicitAttr (config_control_design::a_434same_sense);
        reg.AddEntity( *config_control_design::e_edge_curve );
}

#endif
