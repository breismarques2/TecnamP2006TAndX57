#ifndef  ENTITY_SDAIEFFECTIVITY_CC
#define  ENTITY_SDAIEFFECTIVITY_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiEffectivity.h"

EntityDescriptor * config_control_design::e_effectivity = 0;
AttrDescriptor * config_control_design::a_211id = 0;

SdaiEffectivity::SdaiEffectivity() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_effectivity;
    STEPattribute * a = new STEPattribute( * config_control_design::a_211id, & _id );
    a->set_null();
    attributes.push( a );
}

SdaiEffectivity::SdaiEffectivity ( SdaiEffectivity & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiEffectivity::~SdaiEffectivity() {
}

SdaiEffectivity::SdaiEffectivity( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_effectivity;
    STEPattribute * a = new STEPattribute( * config_control_design::a_211id,  &_id );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiEffectivity::id_() {
    return _id;
}

const SdaiIdentifier SdaiEffectivity::id_() const {
    return (const SdaiIdentifier) _id;
}

void SdaiEffectivity::id_( const SdaiIdentifier x ) {
    _id = x;
}

void init_SdaiEffectivity( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( serial_numbered_effectivity, dated_effectivity, lot_effectivity )\n" );
    str.append( ")" );
    config_control_design::e_effectivity->AddSupertype_Stmt( str );
        config_control_design::a_211id =
          new AttrDescriptor("id",config_control_design::t_identifier,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_effectivity);
        config_control_design::e_effectivity->AddExplicitAttr (config_control_design::a_211id);
        reg.AddEntity( *config_control_design::e_effectivity );
}

#endif
