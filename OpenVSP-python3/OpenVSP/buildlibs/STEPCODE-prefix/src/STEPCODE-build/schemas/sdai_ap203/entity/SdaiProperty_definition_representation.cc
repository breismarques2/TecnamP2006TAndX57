#ifndef  ENTITY_SDAIPROPERTY_DEFINITION_REPRESENTATION_CC
#define  ENTITY_SDAIPROPERTY_DEFINITION_REPRESENTATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiProperty_definition_representation.h"

EntityDescriptor * config_control_design::e_property_definition_representation = 0;
AttrDescriptor * config_control_design::a_99definition = 0;
AttrDescriptor * config_control_design::a_100used_representation = 0;

SdaiProperty_definition_representation::SdaiProperty_definition_representation() : _definition( 0 ), _used_representation( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_property_definition_representation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_99definition, ( SDAI_Application_instance_ptr * ) & _definition );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_100used_representation, ( SDAI_Application_instance_ptr * ) & _used_representation );
    a->set_null();
    attributes.push( a );
}

SdaiProperty_definition_representation::SdaiProperty_definition_representation ( SdaiProperty_definition_representation & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiProperty_definition_representation::~SdaiProperty_definition_representation() {
}

SdaiProperty_definition_representation::SdaiProperty_definition_representation( SDAI_Application_instance * se, bool addAttrs ) : _definition( 0 ), _used_representation( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_property_definition_representation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_99definition, ( SDAI_Application_instance_ptr * ) &_definition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_100used_representation, ( SDAI_Application_instance_ptr * ) &_used_representation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiProperty_definition_ptr SdaiProperty_definition_representation::definition_() {
    if( !_definition ) {
        _definition = new SdaiProperty_definition;
    }
    return (SdaiProperty_definition_ptr) _definition;
}

SdaiProperty_definition_ptr_c SdaiProperty_definition_representation::definition_() const {
    return (SdaiProperty_definition_ptr) _definition;
}

void SdaiProperty_definition_representation::definition_( const SdaiProperty_definition_ptr x ) {
    _definition = x;
}

SdaiRepresentation_ptr SdaiProperty_definition_representation::used_representation_() {
    if( !_used_representation ) {
        _used_representation = new SdaiRepresentation;
    }
    return (SdaiRepresentation_ptr) _used_representation;
}

SdaiRepresentation_ptr_c SdaiProperty_definition_representation::used_representation_() const {
    return (SdaiRepresentation_ptr) _used_representation;
}

void SdaiProperty_definition_representation::used_representation_( const SdaiRepresentation_ptr x ) {
    _used_representation = x;
}

void init_SdaiProperty_definition_representation( Registry& reg ) {
    std::string str;

    config_control_design::a_99definition =
      new AttrDescriptor( "definition", config_control_design::e_property_definition, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_property_definition_representation);
        config_control_design::e_property_definition_representation->AddExplicitAttr (config_control_design::a_99definition);
    config_control_design::a_100used_representation =
      new AttrDescriptor( "used_representation", config_control_design::e_representation, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_property_definition_representation);
        config_control_design::e_property_definition_representation->AddExplicitAttr (config_control_design::a_100used_representation);
        reg.AddEntity( *config_control_design::e_property_definition_representation );
}

#endif
