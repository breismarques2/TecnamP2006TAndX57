#ifndef  ENTITY_SDAILINE_CC
#define  ENTITY_SDAILINE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiLine.h"

EntityDescriptor * config_control_design::e_line = 0;
AttrDescriptor * config_control_design::a_303pnt = 0;
AttrDescriptor * config_control_design::a_304dir = 0;

SdaiLine::SdaiLine(): SdaiCurve(), _pnt( 0 ), _dir( 0 ) {
        /*  parent: SdaiCurve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_line;
    STEPattribute * a = new STEPattribute( * config_control_design::a_303pnt, ( SDAI_Application_instance_ptr * ) & _pnt );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_304dir, ( SDAI_Application_instance_ptr * ) & _dir );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiLine::SdaiLine ( SdaiLine & e ) : SdaiCurve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiLine::~SdaiLine() {
}

SdaiLine::SdaiLine( SDAI_Application_instance * se, bool addAttrs ) : SdaiCurve( se, addAttrs ), _pnt( 0 ), _dir( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiCurve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_line;
    STEPattribute * a = new STEPattribute( * config_control_design::a_303pnt, ( SDAI_Application_instance_ptr * ) &_pnt );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_304dir, ( SDAI_Application_instance_ptr * ) &_dir );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiCartesian_point_ptr SdaiLine::pnt_() {
    if( !_pnt ) {
        _pnt = new SdaiCartesian_point;
    }
    return (SdaiCartesian_point_ptr) _pnt;
}

SdaiCartesian_point_ptr_c SdaiLine::pnt_() const {
    return (SdaiCartesian_point_ptr) _pnt;
}

void SdaiLine::pnt_( const SdaiCartesian_point_ptr x ) {
    _pnt = x;
}

SdaiVector_ptr SdaiLine::dir_() {
    if( !_dir ) {
        _dir = new SdaiVector;
    }
    return (SdaiVector_ptr) _dir;
}

SdaiVector_ptr_c SdaiLine::dir_() const {
    return (SdaiVector_ptr) _dir;
}

void SdaiLine::dir_( const SdaiVector_ptr x ) {
    _dir = x;
}

void init_SdaiLine( Registry& reg ) {
    std::string str;

    config_control_design::e_line->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "dir.dim = pnt.dim\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_line->_where_rules->Append( wr );
    config_control_design::e_line->AddSupertype(config_control_design::e_curve);
    config_control_design::e_curve->AddSubtype(config_control_design::e_line);
    config_control_design::a_303pnt =
      new AttrDescriptor( "pnt", config_control_design::e_cartesian_point, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_line);
        config_control_design::e_line->AddExplicitAttr (config_control_design::a_303pnt);
    config_control_design::a_304dir =
      new AttrDescriptor( "dir", config_control_design::e_vector, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_line);
        config_control_design::e_line->AddExplicitAttr (config_control_design::a_304dir);
        reg.AddEntity( *config_control_design::e_line );
}

#endif
