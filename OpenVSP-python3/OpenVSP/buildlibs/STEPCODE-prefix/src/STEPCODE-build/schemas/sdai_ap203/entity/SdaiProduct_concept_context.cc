#ifndef  ENTITY_SDAIPRODUCT_CONCEPT_CONTEXT_CC
#define  ENTITY_SDAIPRODUCT_CONCEPT_CONTEXT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiProduct_concept_context.h"

EntityDescriptor * config_control_design::e_product_concept_context = 0;
AttrDescriptor * config_control_design::a_343market_segment_type = 0;

SdaiProduct_concept_context::SdaiProduct_concept_context(): SdaiApplication_context_element() {
        /*  parent: SdaiApplication_context_element  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_product_concept_context;
    STEPattribute * a = new STEPattribute( * config_control_design::a_343market_segment_type, & _market_segment_type );
    a->set_null();
    attributes.push( a );
}

SdaiProduct_concept_context::SdaiProduct_concept_context ( SdaiProduct_concept_context & e ) : SdaiApplication_context_element() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiProduct_concept_context::~SdaiProduct_concept_context() {
}

SdaiProduct_concept_context::SdaiProduct_concept_context( SDAI_Application_instance * se, bool addAttrs ) : SdaiApplication_context_element( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiApplication_context_element */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_product_concept_context;
    STEPattribute * a = new STEPattribute( * config_control_design::a_343market_segment_type,  &_market_segment_type );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiProduct_concept_context::market_segment_type_() {
    return _market_segment_type;
}

const SdaiLabel SdaiProduct_concept_context::market_segment_type_() const {
    return (const SdaiLabel) _market_segment_type;
}

void SdaiProduct_concept_context::market_segment_type_( const SdaiLabel x ) {
    _market_segment_type = x;
}

void init_SdaiProduct_concept_context( Registry& reg ) {
    std::string str;

    config_control_design::e_product_concept_context->AddSupertype(config_control_design::e_application_context_element);
    config_control_design::e_application_context_element->AddSubtype(config_control_design::e_product_concept_context);
        config_control_design::a_343market_segment_type =
          new AttrDescriptor("market_segment_type",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_concept_context);
        config_control_design::e_product_concept_context->AddExplicitAttr (config_control_design::a_343market_segment_type);
        reg.AddEntity( *config_control_design::e_product_concept_context );
}

#endif
