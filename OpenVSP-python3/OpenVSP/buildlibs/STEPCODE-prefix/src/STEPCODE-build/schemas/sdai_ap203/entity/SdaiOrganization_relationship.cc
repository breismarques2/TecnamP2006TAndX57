#ifndef  ENTITY_SDAIORGANIZATION_RELATIONSHIP_CC
#define  ENTITY_SDAIORGANIZATION_RELATIONSHIP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOrganization_relationship.h"

EntityDescriptor * config_control_design::e_organization_relationship = 0;
AttrDescriptor * config_control_design::a_60name = 0;
AttrDescriptor * config_control_design::a_61description = 0;
AttrDescriptor * config_control_design::a_62relating_organization = 0;
AttrDescriptor * config_control_design::a_63related_organization = 0;

SdaiOrganization_relationship::SdaiOrganization_relationship() : _relating_organization( 0 ), _related_organization( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_organization_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_60name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_61description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_62relating_organization, ( SDAI_Application_instance_ptr * ) & _relating_organization );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_63related_organization, ( SDAI_Application_instance_ptr * ) & _related_organization );
    a->set_null();
    attributes.push( a );
}

SdaiOrganization_relationship::SdaiOrganization_relationship ( SdaiOrganization_relationship & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOrganization_relationship::~SdaiOrganization_relationship() {
}

SdaiOrganization_relationship::SdaiOrganization_relationship( SDAI_Application_instance * se, bool addAttrs ) : _relating_organization( 0 ), _related_organization( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_organization_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_60name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_61description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_62relating_organization, ( SDAI_Application_instance_ptr * ) &_relating_organization );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_63related_organization, ( SDAI_Application_instance_ptr * ) &_related_organization );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiOrganization_relationship::name_() {
    return _name;
}

const SdaiLabel SdaiOrganization_relationship::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiOrganization_relationship::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiOrganization_relationship::description_() {
    return _description;
}

const SdaiText SdaiOrganization_relationship::description_() const {
    return (const SdaiText) _description;
}

void SdaiOrganization_relationship::description_( const SdaiText x ) {
    _description = x;
}

SdaiOrganization_ptr SdaiOrganization_relationship::relating_organization_() {
    if( !_relating_organization ) {
        _relating_organization = new SdaiOrganization;
    }
    return (SdaiOrganization_ptr) _relating_organization;
}

SdaiOrganization_ptr_c SdaiOrganization_relationship::relating_organization_() const {
    return (SdaiOrganization_ptr) _relating_organization;
}

void SdaiOrganization_relationship::relating_organization_( const SdaiOrganization_ptr x ) {
    _relating_organization = x;
}

SdaiOrganization_ptr SdaiOrganization_relationship::related_organization_() {
    if( !_related_organization ) {
        _related_organization = new SdaiOrganization;
    }
    return (SdaiOrganization_ptr) _related_organization;
}

SdaiOrganization_ptr_c SdaiOrganization_relationship::related_organization_() const {
    return (SdaiOrganization_ptr) _related_organization;
}

void SdaiOrganization_relationship::related_organization_( const SdaiOrganization_ptr x ) {
    _related_organization = x;
}

void init_SdaiOrganization_relationship( Registry& reg ) {
    std::string str;

        config_control_design::a_60name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_organization_relationship);
        config_control_design::e_organization_relationship->AddExplicitAttr (config_control_design::a_60name);
        config_control_design::a_61description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_organization_relationship);
        config_control_design::e_organization_relationship->AddExplicitAttr (config_control_design::a_61description);
    config_control_design::a_62relating_organization =
      new AttrDescriptor( "relating_organization", config_control_design::e_organization, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_organization_relationship);
        config_control_design::e_organization_relationship->AddExplicitAttr (config_control_design::a_62relating_organization);
    config_control_design::a_63related_organization =
      new AttrDescriptor( "related_organization", config_control_design::e_organization, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_organization_relationship);
        config_control_design::e_organization_relationship->AddExplicitAttr (config_control_design::a_63related_organization);
        reg.AddEntity( *config_control_design::e_organization_relationship );
}

#endif
