#ifndef  ENTITY_SDAIREPARAMETRISED_COMPOSITE_CURVE_SEGMENT_CC
#define  ENTITY_SDAIREPARAMETRISED_COMPOSITE_CURVE_SEGMENT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiReparametrised_composite_curve_segment.h"

EntityDescriptor * config_control_design::e_reparametrised_composite_curve_segment = 0;
AttrDescriptor * config_control_design::a_10param_length = 0;

SdaiReparametrised_composite_curve_segment::SdaiReparametrised_composite_curve_segment(): SdaiComposite_curve_segment() {
        /*  parent: SdaiComposite_curve_segment  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_reparametrised_composite_curve_segment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_10param_length, & _param_length );
    a->set_null();
    attributes.push( a );
}

SdaiReparametrised_composite_curve_segment::SdaiReparametrised_composite_curve_segment ( SdaiReparametrised_composite_curve_segment & e ) : SdaiComposite_curve_segment() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiReparametrised_composite_curve_segment::~SdaiReparametrised_composite_curve_segment() {
}

SdaiReparametrised_composite_curve_segment::SdaiReparametrised_composite_curve_segment( SDAI_Application_instance * se, bool addAttrs ) : SdaiComposite_curve_segment( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiComposite_curve_segment */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_reparametrised_composite_curve_segment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_10param_length,  &_param_length );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiParameter_value SdaiReparametrised_composite_curve_segment::param_length_() const {
    return (SdaiParameter_value) _param_length;
}

void SdaiReparametrised_composite_curve_segment::param_length_( const SdaiParameter_value x ) {
    _param_length = x;
}

void init_SdaiReparametrised_composite_curve_segment( Registry& reg ) {
    std::string str;

    config_control_design::e_reparametrised_composite_curve_segment->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "param_length > 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_reparametrised_composite_curve_segment->_where_rules->Append( wr );
    config_control_design::e_reparametrised_composite_curve_segment->AddSupertype(config_control_design::e_composite_curve_segment);
    config_control_design::e_composite_curve_segment->AddSubtype(config_control_design::e_reparametrised_composite_curve_segment);
        config_control_design::a_10param_length =
          new AttrDescriptor("param_length",config_control_design::t_parameter_value,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_reparametrised_composite_curve_segment);
        config_control_design::e_reparametrised_composite_curve_segment->AddExplicitAttr (config_control_design::a_10param_length);
        reg.AddEntity( *config_control_design::e_reparametrised_composite_curve_segment );
}

#endif
