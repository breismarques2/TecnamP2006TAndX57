#ifndef  ENTITY_SDAICONTEXT_DEPENDENT_SHAPE_REPRESENTATION_CC
#define  ENTITY_SDAICONTEXT_DEPENDENT_SHAPE_REPRESENTATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiContext_dependent_shape_representation.h"

EntityDescriptor * config_control_design::e_context_dependent_shape_representation = 0;
AttrDescriptor * config_control_design::a_364representation_relation = 0;
AttrDescriptor * config_control_design::a_365represented_product_relation = 0;

SdaiContext_dependent_shape_representation::SdaiContext_dependent_shape_representation() : _representation_relation( 0 ), _represented_product_relation( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_context_dependent_shape_representation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_364representation_relation, ( SDAI_Application_instance_ptr * ) & _representation_relation );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_365represented_product_relation, ( SDAI_Application_instance_ptr * ) & _represented_product_relation );
    a->set_null();
    attributes.push( a );
}

SdaiContext_dependent_shape_representation::SdaiContext_dependent_shape_representation ( SdaiContext_dependent_shape_representation & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiContext_dependent_shape_representation::~SdaiContext_dependent_shape_representation() {
}

SdaiContext_dependent_shape_representation::SdaiContext_dependent_shape_representation( SDAI_Application_instance * se, bool addAttrs ) : _representation_relation( 0 ), _represented_product_relation( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_context_dependent_shape_representation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_364representation_relation, ( SDAI_Application_instance_ptr * ) &_representation_relation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_365represented_product_relation, ( SDAI_Application_instance_ptr * ) &_represented_product_relation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiShape_representation_relationship_ptr SdaiContext_dependent_shape_representation::representation_relation_() {
    if( !_representation_relation ) {
        _representation_relation = new SdaiShape_representation_relationship;
    }
    return (SdaiShape_representation_relationship_ptr) _representation_relation;
}

SdaiShape_representation_relationship_ptr_c SdaiContext_dependent_shape_representation::representation_relation_() const {
    return (SdaiShape_representation_relationship_ptr) _representation_relation;
}

void SdaiContext_dependent_shape_representation::representation_relation_( const SdaiShape_representation_relationship_ptr x ) {
    _representation_relation = x;
}

SdaiProduct_definition_shape_ptr SdaiContext_dependent_shape_representation::represented_product_relation_() {
    if( !_represented_product_relation ) {
        _represented_product_relation = new SdaiProduct_definition_shape;
    }
    return (SdaiProduct_definition_shape_ptr) _represented_product_relation;
}

SdaiProduct_definition_shape_ptr_c SdaiContext_dependent_shape_representation::represented_product_relation_() const {
    return (SdaiProduct_definition_shape_ptr) _represented_product_relation;
}

void SdaiContext_dependent_shape_representation::represented_product_relation_( const SdaiProduct_definition_shape_ptr x ) {
    _represented_product_relation = x;
}

void init_SdaiContext_dependent_shape_representation( Registry& reg ) {
    std::string str;

    config_control_design::e_context_dependent_shape_representation->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( " 'CONFIG_CONTROL_DESIGN.PRODUCT_DEFINITION_RELATIONSHIP' IN TYPEOF( SELF.represented_product_relation.definition )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_context_dependent_shape_representation->_where_rules->Append( wr );
    config_control_design::a_364representation_relation =
      new AttrDescriptor( "representation_relation", config_control_design::e_shape_representation_relationship, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_context_dependent_shape_representation);
        config_control_design::e_context_dependent_shape_representation->AddExplicitAttr (config_control_design::a_364representation_relation);
    config_control_design::a_365represented_product_relation =
      new AttrDescriptor( "represented_product_relation", config_control_design::e_product_definition_shape, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_context_dependent_shape_representation);
        config_control_design::e_context_dependent_shape_representation->AddExplicitAttr (config_control_design::a_365represented_product_relation);
        reg.AddEntity( *config_control_design::e_context_dependent_shape_representation );
}

#endif
