#ifndef  ENTITY_SDAICOMPOSITE_CURVE_CC
#define  ENTITY_SDAICOMPOSITE_CURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiComposite_curve.h"

EntityDescriptor * config_control_design::e_composite_curve = 0;
AttrDescriptor * config_control_design::a_64segments = 0;
AttrDescriptor * config_control_design::a_65self_intersect = 0;
Derived_attribute * config_control_design::a_66Dn_segments = 0;
Derived_attribute * config_control_design::a_67Dclosed_curve = 0;

SdaiComposite_curve::SdaiComposite_curve(): SdaiBounded_curve(), _segments( 0 ) {
        /*  parent: SdaiBounded_curve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_composite_curve;
    _segments = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_64segments, _segments );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_65self_intersect, & _self_intersect );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "n_segments", "composite_curve" );
    MakeDerived( "closed_curve", "composite_curve" );
}

SdaiComposite_curve::SdaiComposite_curve ( SdaiComposite_curve & e ) : SdaiBounded_curve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiComposite_curve::~SdaiComposite_curve() {
    delete _segments;
}

SdaiComposite_curve::SdaiComposite_curve( SDAI_Application_instance * se, bool addAttrs ) : SdaiBounded_curve( se, addAttrs ), _segments( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiBounded_curve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_composite_curve;
    _segments = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_64segments,  _segments );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_65self_intersect,  &_self_intersect );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "n_segments", "composite_curve" );
    MakeDerived( "closed_curve", "composite_curve" );
}


EntityAggregate_ptr SdaiComposite_curve::segments_() {
    if( !_segments ) {
        _segments = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _segments;
}

EntityAggregate_ptr_c SdaiComposite_curve::segments_() const {
    return ( EntityAggregate_ptr ) _segments;
}

void SdaiComposite_curve::segments_( const EntityAggregate_ptr x ) {
    if( !_segments ) {
        _segments = new EntityAggregate;
    }
    _segments->ShallowCopy( * x );
}

Logical SdaiComposite_curve::self_intersect_() const {
    return (const Logical) _self_intersect;
}

void SdaiComposite_curve::self_intersect_( const Logical x ) {
    _self_intersect.put (x);
}

void init_SdaiComposite_curve( Registry& reg ) {
    std::string str;

    config_control_design::e_composite_curve->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "( ( NOT closed_curve ) AND ( SIZEOF( QUERY ( temp <* segments | ( temp.transition = discontinuous ) ) ) = 1 ) ) OR ( closed_curve \n" );
    str.append( "      AND ( SIZEOF( QUERY ( temp <* segments | ( temp.transition = discontinuous ) ) ) = 0 ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_composite_curve->_where_rules->Append( wr );
    config_control_design::e_composite_curve->AddSupertype(config_control_design::e_bounded_curve);
    config_control_design::e_bounded_curve->AddSubtype(config_control_design::e_composite_curve);
        ListTypeDescriptor * t_6 = new ListTypeDescriptor;
        t_6->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_6->SetBound1( 1 );
        t_6->SetBound2( 2147483647 );
        t_6->FundamentalType(LIST_TYPE);
        t_6->Description("LIST [1:?] OF composite_curve_segment");
        t_6->OriginatingSchema(config_control_design::schema);
        t_6->ReferentType(config_control_design::e_composite_curve_segment);
        config_control_design::schema->AddUnnamedType(t_6);
        config_control_design::a_64segments =
          new AttrDescriptor("segments",t_6,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_composite_curve);
        config_control_design::e_composite_curve->AddExplicitAttr (config_control_design::a_64segments);
        config_control_design::a_65self_intersect =
          new AttrDescriptor("self_intersect",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_composite_curve);
        config_control_design::e_composite_curve->AddExplicitAttr (config_control_design::a_65self_intersect);
        config_control_design::a_66Dn_segments =
          new Derived_attribute("n_segments",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_composite_curve);
        config_control_design::e_composite_curve->AddExplicitAttr (config_control_design::a_66Dn_segments);
        config_control_design::a_66Dn_segments->initializer_("SIZEOF( segments )");
        config_control_design::a_67Dclosed_curve =
          new Derived_attribute("closed_curve",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_composite_curve);
        config_control_design::e_composite_curve->AddExplicitAttr (config_control_design::a_67Dclosed_curve);
        config_control_design::a_67Dclosed_curve->initializer_("segments[n_segments].transition <> discontinuous");
        reg.AddEntity( *config_control_design::e_composite_curve );
}

#endif
