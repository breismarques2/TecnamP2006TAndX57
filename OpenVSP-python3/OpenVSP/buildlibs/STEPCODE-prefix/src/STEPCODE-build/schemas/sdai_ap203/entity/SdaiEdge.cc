#ifndef  ENTITY_SDAIEDGE_CC
#define  ENTITY_SDAIEDGE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiEdge.h"

EntityDescriptor * config_control_design::e_edge = 0;
AttrDescriptor * config_control_design::a_136edge_start = 0;
AttrDescriptor * config_control_design::a_137edge_end = 0;

SdaiEdge::SdaiEdge(): SdaiTopological_representation_item(), _edge_start( 0 ), _edge_end( 0 ) {
        /*  parent: SdaiTopological_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_edge;
    STEPattribute * a = new STEPattribute( * config_control_design::a_136edge_start, ( SDAI_Application_instance_ptr * ) & _edge_start );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_137edge_end, ( SDAI_Application_instance_ptr * ) & _edge_end );
    a->set_null();
    attributes.push( a );
}

SdaiEdge::SdaiEdge ( SdaiEdge & e ) : SdaiTopological_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiEdge::~SdaiEdge() {
}

SdaiEdge::SdaiEdge( SDAI_Application_instance * se, bool addAttrs ) : SdaiTopological_representation_item( se, addAttrs ), _edge_start( 0 ), _edge_end( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiTopological_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_edge;
    STEPattribute * a = new STEPattribute( * config_control_design::a_136edge_start, ( SDAI_Application_instance_ptr * ) &_edge_start );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_137edge_end, ( SDAI_Application_instance_ptr * ) &_edge_end );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiVertex_ptr SdaiEdge::edge_start_() {
    if( !_edge_start ) {
        _edge_start = new SdaiVertex;
    }
    return (SdaiVertex_ptr) _edge_start;
}

SdaiVertex_ptr_c SdaiEdge::edge_start_() const {
    return (SdaiVertex_ptr) _edge_start;
}

void SdaiEdge::edge_start_( const SdaiVertex_ptr x ) {
    _edge_start = x;
}

SdaiVertex_ptr SdaiEdge::edge_end_() {
    if( !_edge_end ) {
        _edge_end = new SdaiVertex;
    }
    return (SdaiVertex_ptr) _edge_end;
}

SdaiVertex_ptr_c SdaiEdge::edge_end_() const {
    return (SdaiVertex_ptr) _edge_end;
}

void SdaiEdge::edge_end_( const SdaiVertex_ptr x ) {
    _edge_end = x;
}

void init_SdaiEdge( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( edge_curve, oriented_edge )\n" );
    str.append( ")" );
    config_control_design::e_edge->AddSupertype_Stmt( str );
    config_control_design::e_edge->AddSupertype(config_control_design::e_topological_representation_item);
    config_control_design::e_topological_representation_item->AddSubtype(config_control_design::e_edge);
    config_control_design::a_136edge_start =
      new AttrDescriptor( "edge_start", config_control_design::e_vertex, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_edge);
        config_control_design::e_edge->AddExplicitAttr (config_control_design::a_136edge_start);
    config_control_design::a_137edge_end =
      new AttrDescriptor( "edge_end", config_control_design::e_vertex, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_edge);
        config_control_design::e_edge->AddExplicitAttr (config_control_design::a_137edge_end);
        reg.AddEntity( *config_control_design::e_edge );
}

#endif
