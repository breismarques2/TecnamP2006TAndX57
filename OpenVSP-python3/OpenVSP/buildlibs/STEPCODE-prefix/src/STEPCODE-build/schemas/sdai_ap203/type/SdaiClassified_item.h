#ifndef  TYPE_SDAICLASSIFIED_ITEM_H
#define  TYPE_SDAICLASSIFIED_ITEM_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiClassified_item
class SC_SCHEMA_EXPORT SdaiClassified_item  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   PRODUCT_DEFINITION_FORMATION    --  sdaiINSTANCE
    //   ASSEMBLY_COMPONENT_USAGE    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiClassified_item( const SelectTypeDescriptor * =config_control_design::t_classified_item );
    //  part 1
    SdaiClassified_item( const SdaiProduct_definition_formation_ptr&,
                         const SelectTypeDescriptor * =config_control_design::t_classified_item );
    SdaiClassified_item( const SdaiAssembly_component_usage_ptr&,
                         const SelectTypeDescriptor * =config_control_design::t_classified_item );
    virtual ~SdaiClassified_item();

    //  part 2
    operator SdaiProduct_definition_formation_ptr();
    operator SdaiAssembly_component_usage_ptr();

    //  part 3
  const SdaiIdentifier   reference_designator_() const;
        SdaiIdentifier   reference_designator_();
        void reference_designator_( const SdaiIdentifier x );

        SdaiProduct_definition_ptr_c related_product_definition_() const;
        SdaiProduct_definition_ptr   related_product_definition_();
        void related_product_definition_( const SdaiProduct_definition_ptr x );

        SdaiProduct_definition_ptr_c relating_product_definition_() const;
        SdaiProduct_definition_ptr   relating_product_definition_();
        void relating_product_definition_( const SdaiProduct_definition_ptr x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );

        SdaiProduct_ptr_c of_product_() const;
        SdaiProduct_ptr   of_product_();
        void of_product_( const SdaiProduct_ptr x );

  const SdaiText   description_() const;
        SdaiText   description_();
        void description_( const SdaiText x );

  const SdaiIdentifier   id_() const;
        SdaiIdentifier   id_();
        void id_( const SdaiIdentifier x );


    //  part 4
    SdaiClassified_item& operator =( const SdaiProduct_definition_formation_ptr& );
    SdaiClassified_item& operator =( const SdaiAssembly_component_usage_ptr& );
    // not in SDAI
    SdaiClassified_item& ShallowCopy ( const SdaiClassified_item& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiClassified_item& operator =( SdaiClassified_item * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsProduct_definition_formation() const;
    Logical IsAssembly_component_usage() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiClassified_item () { return new SdaiClassified_item; }
typedef SdaiClassified_item * SdaiClassified_itemH;
typedef SdaiClassified_item_ptr SdaiClassified_item_var;


class SdaiClassified_item_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiClassified_item_agg( SelectTypeDescriptor * =config_control_design::t_classified_item );
    ~SdaiClassified_item_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiClassified_item( sel_type )); }
};
inline STEPaggregate * create_SdaiClassified_item_agg () { return new SdaiClassified_item_agg; }
typedef SdaiClassified_item_agg_ptr SdaiClassified_item_agg_var;

/////  END SELECT TYPE classified_item

void init_SdaiClassified_item(Registry& reg);

#endif
