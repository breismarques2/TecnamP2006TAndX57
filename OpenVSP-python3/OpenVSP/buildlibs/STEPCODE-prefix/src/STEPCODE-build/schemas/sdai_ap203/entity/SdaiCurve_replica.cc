#ifndef  ENTITY_SDAICURVE_REPLICA_CC
#define  ENTITY_SDAICURVE_REPLICA_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCurve_replica.h"

EntityDescriptor * config_control_design::e_curve_replica = 0;
AttrDescriptor * config_control_design::a_280parent_curve = 0;
AttrDescriptor * config_control_design::a_281transformation = 0;

SdaiCurve_replica::SdaiCurve_replica(): SdaiCurve(), _parent_curve( 0 ), _transformation( 0 ) {
        /*  parent: SdaiCurve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_curve_replica;
    STEPattribute * a = new STEPattribute( * config_control_design::a_280parent_curve, ( SDAI_Application_instance_ptr * ) & _parent_curve );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_281transformation, ( SDAI_Application_instance_ptr * ) & _transformation );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiCurve_replica::SdaiCurve_replica ( SdaiCurve_replica & e ) : SdaiCurve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCurve_replica::~SdaiCurve_replica() {
}

SdaiCurve_replica::SdaiCurve_replica( SDAI_Application_instance * se, bool addAttrs ) : SdaiCurve( se, addAttrs ), _parent_curve( 0 ), _transformation( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiCurve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_curve_replica;
    STEPattribute * a = new STEPattribute( * config_control_design::a_280parent_curve, ( SDAI_Application_instance_ptr * ) &_parent_curve );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_281transformation, ( SDAI_Application_instance_ptr * ) &_transformation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiCurve_ptr SdaiCurve_replica::parent_curve_() {
    if( !_parent_curve ) {
        _parent_curve = new SdaiCurve;
    }
    return (SdaiCurve_ptr) _parent_curve;
}

SdaiCurve_ptr_c SdaiCurve_replica::parent_curve_() const {
    return (SdaiCurve_ptr) _parent_curve;
}

void SdaiCurve_replica::parent_curve_( const SdaiCurve_ptr x ) {
    _parent_curve = x;
}

SdaiCartesian_transformation_operator_ptr SdaiCurve_replica::transformation_() {
    if( !_transformation ) {
        _transformation = new SdaiCartesian_transformation_operator;
    }
    return (SdaiCartesian_transformation_operator_ptr) _transformation;
}

SdaiCartesian_transformation_operator_ptr_c SdaiCurve_replica::transformation_() const {
    return (SdaiCartesian_transformation_operator_ptr) _transformation;
}

void SdaiCurve_replica::transformation_( const SdaiCartesian_transformation_operator_ptr x ) {
    _transformation = x;
}

void init_SdaiCurve_replica( Registry& reg ) {
    std::string str;

    config_control_design::e_curve_replica->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "transformation.dim = parent_curve.dim\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_curve_replica->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "acyclic_curve_replica( SELF, parent_curve )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_curve_replica->_where_rules->Append( wr );
    config_control_design::e_curve_replica->AddSupertype(config_control_design::e_curve);
    config_control_design::e_curve->AddSubtype(config_control_design::e_curve_replica);
    config_control_design::a_280parent_curve =
      new AttrDescriptor( "parent_curve", config_control_design::e_curve, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_curve_replica);
        config_control_design::e_curve_replica->AddExplicitAttr (config_control_design::a_280parent_curve);
    config_control_design::a_281transformation =
      new AttrDescriptor( "transformation", config_control_design::e_cartesian_transformation_operator, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_curve_replica);
        config_control_design::e_curve_replica->AddExplicitAttr (config_control_design::a_281transformation);
        reg.AddEntity( *config_control_design::e_curve_replica );
}

#endif
