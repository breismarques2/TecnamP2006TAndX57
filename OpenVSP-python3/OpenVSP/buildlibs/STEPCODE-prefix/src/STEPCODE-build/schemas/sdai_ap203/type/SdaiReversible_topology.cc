#ifndef  TYPE_SDAIREVERSIBLE_TOPOLOGY_CC
#define  TYPE_SDAIREVERSIBLE_TOPOLOGY_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiReversible_topology.h"


//////////  SELECT TYPE reversible_topology

const TypeDescriptor * 
SdaiReversible_topology::AssignEntity (SDAI_Application_instance * se)
{
  (void)se;
    //  REVERSIBLE_TOPOLOGY_ITEM
    if( config_control_design::t_reversible_topology_item->CanBe( se->getEDesc() ) ) {
        _sdaireversible_topology_item.AssignEntity (se);
        return SetUnderlyingType (config_control_design::t_reversible_topology_item);
    }
  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
  std::cerr << se -> EntityName () << std::endl;
#endif
  return 0;
}

SDAI_Select * 
SdaiReversible_topology::NewSelect ()
{
    SdaiReversible_topology * tmp = new SdaiReversible_topology();
    return tmp;
}


// STEP Part 21

void
SdaiReversible_topology::STEPwrite_content (ostream& out, const char * currSch) const {
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::t_reversible_topology_item) {
        _sdaireversible_topology_item.STEPwrite (out, currSch);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::t_list_of_reversible_topology_item) {
        _sdaireversible_topology_item_agg -> STEPwrite (out);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::t_set_of_reversible_topology_item) {
        _sdaireversible_topology_item_agg -> STEPwrite (out);
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
}

BASE_TYPE
SdaiReversible_topology::ValueType() const {
    if (CurrentUnderlyingType() == config_control_design::t_reversible_topology_item)
        return _sdaireversible_topology_item.ValueType();
    if (CurrentUnderlyingType() == config_control_design::t_list_of_reversible_topology_item)
        return LIST_TYPE;
    if (CurrentUnderlyingType() == config_control_design::t_set_of_reversible_topology_item)
        return SET_TYPE;
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return (BASE_TYPE)0;
}

void
SdaiReversible_topology::STEPwrite_verbose (ostream& out, const char *currSch) const
{
    const TypeDescriptor *td = CurrentUnderlyingType();
    std::string tmp;

    if ( td ) {
        // If we have a legal underlying type, get its name acc
        // to the current schema.
        StrToUpper( td->Name(currSch), tmp );
    }
    if (td == config_control_design::t_reversible_topology_item) {
        out << tmp << "(";
        _sdaireversible_topology_item.STEPwrite_verbose (out, currSch);
        out << ")";
        return;
    }
    if (td == config_control_design::t_list_of_reversible_topology_item) {
        out << tmp << "(";
        _sdaireversible_topology_item_agg->STEPwrite (out, currSch);
        out << ")";
        return;
    }
    if (td == config_control_design::t_set_of_reversible_topology_item) {
        out << tmp << "(";
        _sdaireversible_topology_item_agg->STEPwrite (out, currSch);
        out << ")";
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return;
}

Severity
SdaiReversible_topology::STEPread_content (istream& in, InstMgrBase * instances,
            const char *utype, int addFileId, const char *currSch)
{
  (void)instances;
  (void)utype;
  (void)addFileId;
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::t_reversible_topology_item) {
        _sdaireversible_topology_item.STEPread (in, &_error, instances, utype, addFileId, currSch);
        return severity ();
    }
    if (CurrentUnderlyingType () == config_control_design::t_list_of_reversible_topology_item) {
        _sdaireversible_topology_item_agg->STEPread (in, &_error, config_control_design::t_list_of_reversible_topology_item -> AggrElemTypeDescriptor (),
          instances, addFileId, currSch);
        return severity ();
    }
    if (CurrentUnderlyingType () == config_control_design::t_set_of_reversible_topology_item) {
        _sdaireversible_topology_item_agg->STEPread (in, &_error, config_control_design::t_set_of_reversible_topology_item -> AggrElemTypeDescriptor (),
          instances, addFileId, currSch);
        return severity ();
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
    return severity ();
}

Severity
SdaiReversible_topology::StrToVal_content (const char * str, InstMgrBase * instances)
{
  (void)str;
  (void)instances;
  switch (base_type)  {
  case LIST_TYPE :  
    return _sdaireversible_topology_item_agg->StrToVal (str, &_error, config_control_design::t_list_of_reversible_topology_item -> AggrElemTypeDescriptor ());
  default:  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
std::cerr << str << "  " << instances << std::endl;
#endif
    return SEVERITY_WARNING;
  }
#ifdef __GNUG__

  return SEVERITY_NULL;
#endif
}

// STEP Part 22:  SDAI

    //  part 0
SdaiReversible_topology::SdaiReversible_topology( const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript),
    _sdaireversible_topology_item (config_control_design::t_reversible_topology_item)
{
#ifdef SC_LOGGING
    if( *logStream )
    {
    *logStream << "DAVE ERR entering SdaiReversible_topology constructor." << std::endl;
    }
#endif
   _sdaireversible_topology_item_agg = new SdaiReversible_topology_item_agg;
   nullify();
#ifdef SC_LOGGING
    if( *logStream )
    {
//    *logStream << "DAVE ERR exiting SdaiReversible_topology constructor." << std::endl;
    }
#endif
}

    //  part 1
SdaiReversible_topology::SdaiReversible_topology( const SdaiReversible_topology_item_ptr& o,
                                                  const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::t_reversible_topology_item),
    _sdaireversible_topology_item (config_control_design::t_reversible_topology_item)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiReversible_topology constructor." << std::endl; }
#endif
   _sdaireversible_topology_item = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiReversible_topology constructor." << std::endl; }
#endif
}

SdaiReversible_topology::SdaiReversible_topology( const SdaiSet_of_reversible_topology_item_ptr& o,
                                                  const SelectTypeDescriptor *typedescript )
  : SDAI_Select ( typedescript, config_control_design::t_set_of_reversible_topology_item ),
    _sdaireversible_topology_item (config_control_design::t_reversible_topology_item)
{
#ifdef SC_LOGGING
    if( *logStream )
    {
    *logStream << "DAVE ERR entering SdaiReversible_topology constructor." << std::endl;
    }
#endif
   _sdaireversible_topology_item_agg = new SdaiReversible_topology_item_agg;
   _sdaireversible_topology_item_agg->ShallowCopy (*o);
//  NOTE:  Underlying type defaults to config_control_design::t_set_of_reversible_topology_item instead of NULL
#ifdef SC_LOGGING
    if( *logStream )
    {
//    *logStream << "DAVE ERR exiting SdaiReversible_topology constructor." << std::endl;
    }
#endif
}

SdaiReversible_topology::~SdaiReversible_topology() {
   if( _sdaireversible_topology_item_agg ) {
       delete _sdaireversible_topology_item_agg;
       _sdaireversible_topology_item_agg = 0;
    }
}

SdaiReversible_topology_agg::SdaiReversible_topology_agg( SelectTypeDescriptor *s)
  : SelectAggregate(), sel_type(s)
{
}

SdaiReversible_topology_agg::~SdaiReversible_topology_agg() { }


    //  part 2
SdaiReversible_topology::operator SdaiReversible_topology_item_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::t_reversible_topology_item )
      return & _sdaireversible_topology_item;

   severity( SEVERITY_WARNING );
   Error( "Underlying type is not SdaiReversible_topology_item_ptr" );

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return 0;
}

SdaiReversible_topology::operator SdaiSet_of_reversible_topology_item_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::t_list_of_reversible_topology_item )
      return  _sdaireversible_topology_item_agg;
   if( CurrentUnderlyingType () == config_control_design::t_set_of_reversible_topology_item )
      return  _sdaireversible_topology_item_agg;

   severity( SEVERITY_WARNING );
   Error( "Underlying type is not SdaiSet_of_reversible_topology_item_ptr" );

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return (SdaiSet_of_reversible_topology_item_ptr)0;
}


    //  part 3

    //  part 4
SdaiReversible_topology& SdaiReversible_topology::operator =( const SdaiReversible_topology_item_ptr& o )
{
   nullify ();
   _sdaireversible_topology_item = o;
   SetUnderlyingType( config_control_design::t_reversible_topology_item );
   return *this;
}

SdaiReversible_topology& SdaiReversible_topology::operator =( const SdaiSet_of_reversible_topology_item_ptr& o )
{
   _sdaireversible_topology_item_agg->ShallowCopy (*o);
   underlying_type = 0; // MUST BE SET BY USER
   //	discriminator = UNSET
   return *this;
}

#ifndef COMPILER_DEFINES_OPERATOR_EQ

SdaiReversible_topology& SdaiReversible_topology::operator =( const SdaiReversible_topology_ptr& o ) {
    SDAI_Select::operator=( *o );
    if ( o -> CurrentUnderlyingType() == config_control_design::t_reversible_topology_item ) {
        _sdaireversible_topology_item =  &( o -> _sdaireversible_topology_item );
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::t_list_of_reversible_topology_item ) {
        _sdaireversible_topology_item_agg = o -> _sdaireversible_topology_item_agg;
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::t_set_of_reversible_topology_item ) {
        _sdaireversible_topology_item_agg = o -> _sdaireversible_topology_item_agg;
        return *this;
    }
    return *this;
}

SDAI_Select& SdaiReversible_topology::operator =( const SDAI_Select& o ) {
    SDAI_Select::operator=( o );
    if ( o.CurrentUnderlyingType() == config_control_design::t_reversible_topology_item ) {
        _sdaireversible_topology_item = &( ( ( SdaiReversible_topology& ) o )._sdaireversible_topology_item );
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::t_list_of_reversible_topology_item ) {
        _sdaireversible_topology_item_agg = ( ( SdaiReversible_topology& ) o )._sdaireversible_topology_item_agg;
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::t_set_of_reversible_topology_item ) {
        _sdaireversible_topology_item_agg = ( ( SdaiReversible_topology& ) o )._sdaireversible_topology_item_agg;
        return *this;
    }
   return *this;
}

#endif //ndef COMPILER_DEFINES_OPERATOR_EQ

    //  part 5
Logical SdaiReversible_topology::IsReversible_topology_item() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::t_reversible_topology_item )
      return LTrue;
   return LFalse;
}

Logical SdaiReversible_topology::IsList_of_reversible_topology_item() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::t_list_of_reversible_topology_item )
      return LTrue;
   return LFalse;
}

Logical SdaiReversible_topology::IsSet_of_reversible_topology_item() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::t_set_of_reversible_topology_item )
      return LTrue;
   return LFalse;
}


    //  part 7
const TypeDescriptor * 
SdaiReversible_topology::SetUnderlyingType (const TypeDescriptor * td)
{
  return SDAI_Select::SetUnderlyingType (td);
}
//////////  END SELECT TYPE SdaiReversible_topology


void init_SdaiReversible_topology( Registry& reg ) {
    std::string str;
        config_control_design::t_reversible_topology = new SelectTypeDescriptor (
                  ~(sdaiINSTANCE | sdaiAGGR),        //unique elements,
                  "Reversible_Topology",        // Name
                  sdaiSELECT,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "SELECT (Reversible_Topology_Item, List_Of_Reversible_Topology_Item, Set_Of_Reversible_Topology_Item)",        // Description
                  (SelectCreator) create_SdaiReversible_topology);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_reversible_topology);
    config_control_design::t_reversible_topology -> Elements ().AddNode (config_control_design::t_reversible_topology_item);
    config_control_design::t_reversible_topology -> Elements ().AddNode (config_control_design::t_list_of_reversible_topology_item);
    config_control_design::t_reversible_topology -> Elements ().AddNode (config_control_design::t_set_of_reversible_topology_item);
    reg.AddType (*config_control_design::t_reversible_topology);
}

#endif
