#ifndef  ENTITY_SDAIACTION_REQUEST_SOLUTION_CC
#define  ENTITY_SDAIACTION_REQUEST_SOLUTION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAction_request_solution.h"

EntityDescriptor * config_control_design::e_action_request_solution = 0;
AttrDescriptor * config_control_design::a_377method = 0;
AttrDescriptor * config_control_design::a_378request = 0;

SdaiAction_request_solution::SdaiAction_request_solution() : _method( 0 ), _request( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_action_request_solution;
    STEPattribute * a = new STEPattribute( * config_control_design::a_377method, ( SDAI_Application_instance_ptr * ) & _method );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_378request, ( SDAI_Application_instance_ptr * ) & _request );
    a->set_null();
    attributes.push( a );
}

SdaiAction_request_solution::SdaiAction_request_solution ( SdaiAction_request_solution & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAction_request_solution::~SdaiAction_request_solution() {
}

SdaiAction_request_solution::SdaiAction_request_solution( SDAI_Application_instance * se, bool addAttrs ) : _method( 0 ), _request( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_action_request_solution;
    STEPattribute * a = new STEPattribute( * config_control_design::a_377method, ( SDAI_Application_instance_ptr * ) &_method );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_378request, ( SDAI_Application_instance_ptr * ) &_request );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiAction_method_ptr SdaiAction_request_solution::method_() {
    if( !_method ) {
        _method = new SdaiAction_method;
    }
    return (SdaiAction_method_ptr) _method;
}

SdaiAction_method_ptr_c SdaiAction_request_solution::method_() const {
    return (SdaiAction_method_ptr) _method;
}

void SdaiAction_request_solution::method_( const SdaiAction_method_ptr x ) {
    _method = x;
}

SdaiVersioned_action_request_ptr SdaiAction_request_solution::request_() {
    if( !_request ) {
        _request = new SdaiVersioned_action_request;
    }
    return (SdaiVersioned_action_request_ptr) _request;
}

SdaiVersioned_action_request_ptr_c SdaiAction_request_solution::request_() const {
    return (SdaiVersioned_action_request_ptr) _request;
}

void SdaiAction_request_solution::request_( const SdaiVersioned_action_request_ptr x ) {
    _request = x;
}

void init_SdaiAction_request_solution( Registry& reg ) {
    std::string str;

    config_control_design::a_377method =
      new AttrDescriptor( "method", config_control_design::e_action_method, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_action_request_solution);
        config_control_design::e_action_request_solution->AddExplicitAttr (config_control_design::a_377method);
    config_control_design::a_378request =
      new AttrDescriptor( "request", config_control_design::e_versioned_action_request, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_action_request_solution);
        config_control_design::e_action_request_solution->AddExplicitAttr (config_control_design::a_378request);
        reg.AddEntity( *config_control_design::e_action_request_solution );
}

#endif
