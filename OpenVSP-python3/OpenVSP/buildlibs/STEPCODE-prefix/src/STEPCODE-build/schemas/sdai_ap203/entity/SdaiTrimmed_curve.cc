#ifndef  ENTITY_SDAITRIMMED_CURVE_CC
#define  ENTITY_SDAITRIMMED_CURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiTrimmed_curve.h"

EntityDescriptor * config_control_design::e_trimmed_curve = 0;
AttrDescriptor * config_control_design::a_254basis_curve = 0;
AttrDescriptor * config_control_design::a_255trim_1 = 0;
AttrDescriptor * config_control_design::a_256trim_2 = 0;
AttrDescriptor * config_control_design::a_257sense_agreement = 0;
AttrDescriptor * config_control_design::a_258master_representation = 0;

SdaiTrimmed_curve::SdaiTrimmed_curve(): SdaiBounded_curve(), _basis_curve( 0 ), _trim_1( 0 ), _trim_2( 0 ) {
        /*  parent: SdaiBounded_curve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_trimmed_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_254basis_curve, ( SDAI_Application_instance_ptr * ) & _basis_curve );
    a->set_null();
    attributes.push( a );
    _trim_1 = new SdaiTrimming_select_agg;
    a = new STEPattribute( * config_control_design::a_255trim_1, _trim_1 );
    a->set_null();
    attributes.push( a );
    _trim_2 = new SdaiTrimming_select_agg;
    a = new STEPattribute( * config_control_design::a_256trim_2, _trim_2 );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_257sense_agreement, & _sense_agreement );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_258master_representation, & _master_representation );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiTrimmed_curve::SdaiTrimmed_curve ( SdaiTrimmed_curve & e ) : SdaiBounded_curve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiTrimmed_curve::~SdaiTrimmed_curve() {
    delete _trim_1;
    delete _trim_2;
}

SdaiTrimmed_curve::SdaiTrimmed_curve( SDAI_Application_instance * se, bool addAttrs ) : SdaiBounded_curve( se, addAttrs ), _basis_curve( 0 ), _trim_1( 0 ), _trim_2( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiBounded_curve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_trimmed_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_254basis_curve, ( SDAI_Application_instance_ptr * ) &_basis_curve );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _trim_1 = new SdaiTrimming_select_agg;
    a = new STEPattribute( * config_control_design::a_255trim_1,  _trim_1 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _trim_2 = new SdaiTrimming_select_agg;
    a = new STEPattribute( * config_control_design::a_256trim_2,  _trim_2 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_257sense_agreement,  &_sense_agreement );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_258master_representation,  &_master_representation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiCurve_ptr SdaiTrimmed_curve::basis_curve_() {
    if( !_basis_curve ) {
        _basis_curve = new SdaiCurve;
    }
    return (SdaiCurve_ptr) _basis_curve;
}

SdaiCurve_ptr_c SdaiTrimmed_curve::basis_curve_() const {
    return (SdaiCurve_ptr) _basis_curve;
}

void SdaiTrimmed_curve::basis_curve_( const SdaiCurve_ptr x ) {
    _basis_curve = x;
}

SdaiTrimming_select_agg_ptr SdaiTrimmed_curve::trim_1_() {
    if( !_trim_1 ) {
        _trim_1 = new SdaiTrimming_select_agg;
    }
    return ( SdaiTrimming_select_agg_ptr ) _trim_1;
}

SdaiTrimming_select_agg_ptr_c SdaiTrimmed_curve::trim_1_() const {
    return ( SdaiTrimming_select_agg_ptr ) _trim_1;
}

void SdaiTrimmed_curve::trim_1_( const SdaiTrimming_select_agg_ptr x ) {
    if( !_trim_1 ) {
        _trim_1 = new SdaiTrimming_select_agg;
    }
    _trim_1->ShallowCopy( * x );
}

SdaiTrimming_select_agg_ptr SdaiTrimmed_curve::trim_2_() {
    if( !_trim_2 ) {
        _trim_2 = new SdaiTrimming_select_agg;
    }
    return ( SdaiTrimming_select_agg_ptr ) _trim_2;
}

SdaiTrimming_select_agg_ptr_c SdaiTrimmed_curve::trim_2_() const {
    return ( SdaiTrimming_select_agg_ptr ) _trim_2;
}

void SdaiTrimmed_curve::trim_2_( const SdaiTrimming_select_agg_ptr x ) {
    if( !_trim_2 ) {
        _trim_2 = new SdaiTrimming_select_agg;
    }
    _trim_2->ShallowCopy( * x );
}

Boolean SdaiTrimmed_curve::sense_agreement_() const {
    return (const Boolean) _sense_agreement;
}

void SdaiTrimmed_curve::sense_agreement_( const Boolean x ) {
    _sense_agreement.put (x);
}

SdaiTrimming_preference_var SdaiTrimmed_curve::master_representation_() {
    return (Trimming_preference) _master_representation;
}

const SdaiTrimming_preference_var SdaiTrimmed_curve::master_representation_() const {
    return (const Trimming_preference) _master_representation;
}

void SdaiTrimmed_curve::master_representation_( const SdaiTrimming_preference_var x ) {
    _master_representation.put( x );
}

void init_SdaiTrimmed_curve( Registry& reg ) {
    std::string str;

    config_control_design::e_trimmed_curve->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "( HIINDEX( trim_1 ) = 1 ) OR ( TYPEOF( trim_1[1] ) <> TYPEOF( trim_1[2] ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_trimmed_curve->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "( HIINDEX( trim_2 ) = 1 ) OR ( TYPEOF( trim_2[1] ) <> TYPEOF( trim_2[2] ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_trimmed_curve->_where_rules->Append( wr );
    config_control_design::e_trimmed_curve->AddSupertype(config_control_design::e_bounded_curve);
    config_control_design::e_bounded_curve->AddSubtype(config_control_design::e_trimmed_curve);
    config_control_design::a_254basis_curve =
      new AttrDescriptor( "basis_curve", config_control_design::e_curve, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_trimmed_curve);
        config_control_design::e_trimmed_curve->AddExplicitAttr (config_control_design::a_254basis_curve);
        SetTypeDescriptor * t_46 = new SetTypeDescriptor;
        t_46->AssignAggrCreator((AggregateCreator) create_SdaiTrimming_select_agg);        // Creator function
        t_46->SetBound1( 1 );
        t_46->SetBound2( 2 );
        t_46->FundamentalType(SET_TYPE);
        t_46->Description("SET [1:2] OF trimming_select");
        t_46->OriginatingSchema(config_control_design::schema);
        t_46->ReferentType(config_control_design::t_trimming_select);
        config_control_design::schema->AddUnnamedType(t_46);
        config_control_design::a_255trim_1 =
          new AttrDescriptor("trim_1",t_46,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_trimmed_curve);
        config_control_design::e_trimmed_curve->AddExplicitAttr (config_control_design::a_255trim_1);
        SetTypeDescriptor * t_47 = new SetTypeDescriptor;
        t_47->AssignAggrCreator((AggregateCreator) create_SdaiTrimming_select_agg);        // Creator function
        t_47->SetBound1( 1 );
        t_47->SetBound2( 2 );
        t_47->FundamentalType(SET_TYPE);
        t_47->Description("SET [1:2] OF trimming_select");
        t_47->OriginatingSchema(config_control_design::schema);
        t_47->ReferentType(config_control_design::t_trimming_select);
        config_control_design::schema->AddUnnamedType(t_47);
        config_control_design::a_256trim_2 =
          new AttrDescriptor("trim_2",t_47,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_trimmed_curve);
        config_control_design::e_trimmed_curve->AddExplicitAttr (config_control_design::a_256trim_2);
        config_control_design::a_257sense_agreement =
          new AttrDescriptor("sense_agreement",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_trimmed_curve);
        config_control_design::e_trimmed_curve->AddExplicitAttr (config_control_design::a_257sense_agreement);
        config_control_design::a_258master_representation =
          new AttrDescriptor("master_representation",config_control_design::t_trimming_preference,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_trimmed_curve);
        config_control_design::e_trimmed_curve->AddExplicitAttr (config_control_design::a_258master_representation);
        reg.AddEntity( *config_control_design::e_trimmed_curve );
}

#endif
