#ifndef  ENTITY_SDAIDIRECTION_CC
#define  ENTITY_SDAIDIRECTION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDirection.h"

EntityDescriptor * config_control_design::e_direction = 0;
AttrDescriptor * config_control_design::a_388direction_ratios = 0;

SdaiDirection::SdaiDirection(): SdaiGeometric_representation_item(), _direction_ratios( 0 ) {
        /*  parent: SdaiGeometric_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_direction;
    _direction_ratios = new RealAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_388direction_ratios, _direction_ratios );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiDirection::SdaiDirection ( SdaiDirection & e ) : SdaiGeometric_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDirection::~SdaiDirection() {
    delete _direction_ratios;
}

SdaiDirection::SdaiDirection( SDAI_Application_instance * se, bool addAttrs ) : SdaiGeometric_representation_item( se, addAttrs ), _direction_ratios( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiGeometric_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_direction;
    _direction_ratios = new RealAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_388direction_ratios,  _direction_ratios );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


RealAggregate_ptr SdaiDirection::direction_ratios_() {
    if( !_direction_ratios ) {
        _direction_ratios = new RealAggregate;
    }
    return ( RealAggregate_ptr ) _direction_ratios;
}

RealAggregate_ptr_c SdaiDirection::direction_ratios_() const {
    return ( RealAggregate_ptr ) _direction_ratios;
}

void SdaiDirection::direction_ratios_( const RealAggregate_ptr x ) {
    if( !_direction_ratios ) {
        _direction_ratios = new RealAggregate;
    }
    _direction_ratios->ShallowCopy( * x );
}

void init_SdaiDirection( Registry& reg ) {
    std::string str;

    config_control_design::e_direction->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( QUERY ( tmp <* direction_ratios | ( tmp <> 0 ) ) ) > 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_direction->_where_rules->Append( wr );
    config_control_design::e_direction->AddSupertype(config_control_design::e_geometric_representation_item);
    config_control_design::e_geometric_representation_item->AddSubtype(config_control_design::e_direction);
        ListTypeDescriptor * t_69 = new ListTypeDescriptor;
        t_69->AssignAggrCreator((AggregateCreator) create_RealAggregate);        // Creator function
        t_69->SetBound1( 2 );
        t_69->SetBound2( 3 );
        t_69->FundamentalType(LIST_TYPE);
        t_69->Description("LIST [2:3] OF REAL");
        t_69->OriginatingSchema(config_control_design::schema);
        t_69->ReferentType(t_sdaiREAL);
        config_control_design::schema->AddUnnamedType(t_69);
        config_control_design::a_388direction_ratios =
          new AttrDescriptor("direction_ratios",t_69,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_direction);
        config_control_design::e_direction->AddExplicitAttr (config_control_design::a_388direction_ratios);
        reg.AddEntity( *config_control_design::e_direction );
}

#endif
