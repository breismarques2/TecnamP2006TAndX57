#ifndef  TYPE_SDAIB_SPLINE_CURVE_FORM_VAR_CC
#define  TYPE_SDAIB_SPLINE_CURVE_FORM_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiB_spline_curve_form_var.h"

const char *
SdaiB_spline_curve_form_var::element_at (int n) const  {
  switch (n)  {
  case B_spline_curve_form__hyperbolic_arc:  return "HYPERBOLIC_ARC";
  case B_spline_curve_form__elliptic_arc:  return "ELLIPTIC_ARC";
  case B_spline_curve_form__polyline_form:  return "POLYLINE_FORM";
  case B_spline_curve_form__unspecified:  return "UNSPECIFIED";
  case B_spline_curve_form__circular_arc:  return "CIRCULAR_ARC";
  case B_spline_curve_form__parabolic_arc:  return "PARABOLIC_ARC";
  case B_spline_curve_form_unset        :
  default                :  return "UNSET";
  }
}

SdaiB_spline_curve_form_var::SdaiB_spline_curve_form_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiB_spline_curve_form_var::operator B_spline_curve_form () const {
  switch (v) {
        case B_spline_curve_form__hyperbolic_arc        :  return B_spline_curve_form__hyperbolic_arc;
        case B_spline_curve_form__elliptic_arc        :  return B_spline_curve_form__elliptic_arc;
        case B_spline_curve_form__polyline_form        :  return B_spline_curve_form__polyline_form;
        case B_spline_curve_form__unspecified        :  return B_spline_curve_form__unspecified;
        case B_spline_curve_form__circular_arc        :  return B_spline_curve_form__circular_arc;
        case B_spline_curve_form__parabolic_arc        :  return B_spline_curve_form__parabolic_arc;
        case B_spline_curve_form_unset        :
        default                :  return B_spline_curve_form_unset;
  }
}

SDAI_Enum *
create_SdaiB_spline_curve_form_var ()
{
    return new SdaiB_spline_curve_form_var( "", config_control_design::t_b_spline_curve_form );
}


SdaiB_spline_curve_form_var_agg::SdaiB_spline_curve_form_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiB_spline_curve_form_var_agg::~SdaiB_spline_curve_form_var_agg()
{
}

STEPaggregate *
create_SdaiB_spline_curve_form_var_agg ()
{
    return new SdaiB_spline_curve_form_var_agg( config_control_design::t_b_spline_curve_form );
}

void init_SdaiB_spline_curve_form_var( Registry& reg ) {
    std::string str;
        config_control_design::t_b_spline_curve_form = new EnumTypeDescriptor (
                  "B_Spline_Curve_Form",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (polyline_form, circular_arc, elliptic_arc, parabolic_arc, hyperbolic_arc, unspecified)",        // Description
                  (EnumCreator) create_SdaiB_spline_curve_form_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_b_spline_curve_form);
    reg.AddType (*config_control_design::t_b_spline_curve_form);
}

#endif
