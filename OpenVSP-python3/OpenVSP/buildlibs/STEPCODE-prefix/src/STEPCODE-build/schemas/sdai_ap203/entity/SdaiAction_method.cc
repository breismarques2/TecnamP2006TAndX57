#ifndef  ENTITY_SDAIACTION_METHOD_CC
#define  ENTITY_SDAIACTION_METHOD_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAction_method.h"

EntityDescriptor * config_control_design::e_action_method = 0;
AttrDescriptor * config_control_design::a_224name = 0;
AttrDescriptor * config_control_design::a_225description = 0;
AttrDescriptor * config_control_design::a_226consequence = 0;
AttrDescriptor * config_control_design::a_227purpose = 0;

SdaiAction_method::SdaiAction_method() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_action_method;
    STEPattribute * a = new STEPattribute( * config_control_design::a_224name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_225description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_226consequence, & _consequence );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_227purpose, & _purpose );
    a->set_null();
    attributes.push( a );
}

SdaiAction_method::SdaiAction_method ( SdaiAction_method & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAction_method::~SdaiAction_method() {
}

SdaiAction_method::SdaiAction_method( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_action_method;
    STEPattribute * a = new STEPattribute( * config_control_design::a_224name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_225description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_226consequence,  &_consequence );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_227purpose,  &_purpose );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiAction_method::name_() {
    return _name;
}

const SdaiLabel SdaiAction_method::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiAction_method::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiAction_method::description_() {
    return _description;
}

const SdaiText SdaiAction_method::description_() const {
    return (const SdaiText) _description;
}

void SdaiAction_method::description_( const SdaiText x ) {
    _description = x;
}

SdaiText SdaiAction_method::consequence_() {
    return _consequence;
}

const SdaiText SdaiAction_method::consequence_() const {
    return (const SdaiText) _consequence;
}

void SdaiAction_method::consequence_( const SdaiText x ) {
    _consequence = x;
}

SdaiText SdaiAction_method::purpose_() {
    return _purpose;
}

const SdaiText SdaiAction_method::purpose_() const {
    return (const SdaiText) _purpose;
}

void SdaiAction_method::purpose_( const SdaiText x ) {
    _purpose = x;
}

void init_SdaiAction_method( Registry& reg ) {
    std::string str;

        config_control_design::a_224name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_method);
        config_control_design::e_action_method->AddExplicitAttr (config_control_design::a_224name);
        config_control_design::a_225description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_method);
        config_control_design::e_action_method->AddExplicitAttr (config_control_design::a_225description);
        config_control_design::a_226consequence =
          new AttrDescriptor("consequence",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_method);
        config_control_design::e_action_method->AddExplicitAttr (config_control_design::a_226consequence);
        config_control_design::a_227purpose =
          new AttrDescriptor("purpose",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_method);
        config_control_design::e_action_method->AddExplicitAttr (config_control_design::a_227purpose);
        reg.AddEntity( *config_control_design::e_action_method );
}

#endif
