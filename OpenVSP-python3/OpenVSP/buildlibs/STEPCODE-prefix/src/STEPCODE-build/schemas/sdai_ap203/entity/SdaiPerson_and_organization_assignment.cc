#ifndef  ENTITY_SDAIPERSON_AND_ORGANIZATION_ASSIGNMENT_CC
#define  ENTITY_SDAIPERSON_AND_ORGANIZATION_ASSIGNMENT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPerson_and_organization_assignment.h"

EntityDescriptor * config_control_design::e_person_and_organization_assignment = 0;
AttrDescriptor * config_control_design::a_252assigned_person_and_organization = 0;
AttrDescriptor * config_control_design::a_253role = 0;

SdaiPerson_and_organization_assignment::SdaiPerson_and_organization_assignment() : _assigned_person_and_organization( 0 ), _role( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_person_and_organization_assignment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_252assigned_person_and_organization, ( SDAI_Application_instance_ptr * ) & _assigned_person_and_organization );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_253role, ( SDAI_Application_instance_ptr * ) & _role );
    a->set_null();
    attributes.push( a );
}

SdaiPerson_and_organization_assignment::SdaiPerson_and_organization_assignment ( SdaiPerson_and_organization_assignment & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPerson_and_organization_assignment::~SdaiPerson_and_organization_assignment() {
}

SdaiPerson_and_organization_assignment::SdaiPerson_and_organization_assignment( SDAI_Application_instance * se, bool addAttrs ) : _assigned_person_and_organization( 0 ), _role( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_person_and_organization_assignment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_252assigned_person_and_organization, ( SDAI_Application_instance_ptr * ) &_assigned_person_and_organization );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_253role, ( SDAI_Application_instance_ptr * ) &_role );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiPerson_and_organization_ptr SdaiPerson_and_organization_assignment::assigned_person_and_organization_() {
    if( !_assigned_person_and_organization ) {
        _assigned_person_and_organization = new SdaiPerson_and_organization;
    }
    return (SdaiPerson_and_organization_ptr) _assigned_person_and_organization;
}

SdaiPerson_and_organization_ptr_c SdaiPerson_and_organization_assignment::assigned_person_and_organization_() const {
    return (SdaiPerson_and_organization_ptr) _assigned_person_and_organization;
}

void SdaiPerson_and_organization_assignment::assigned_person_and_organization_( const SdaiPerson_and_organization_ptr x ) {
    _assigned_person_and_organization = x;
}

SdaiPerson_and_organization_role_ptr SdaiPerson_and_organization_assignment::role_() {
    if( !_role ) {
        _role = new SdaiPerson_and_organization_role;
    }
    return (SdaiPerson_and_organization_role_ptr) _role;
}

SdaiPerson_and_organization_role_ptr_c SdaiPerson_and_organization_assignment::role_() const {
    return (SdaiPerson_and_organization_role_ptr) _role;
}

void SdaiPerson_and_organization_assignment::role_( const SdaiPerson_and_organization_role_ptr x ) {
    _role = x;
}

void init_SdaiPerson_and_organization_assignment( Registry& reg ) {
    std::string str;

    config_control_design::e_person_and_organization_assignment->AddSupertype_Stmt( "ABSTRACT SUPERTYPE" );
    config_control_design::a_252assigned_person_and_organization =
      new AttrDescriptor( "assigned_person_and_organization", config_control_design::e_person_and_organization, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_person_and_organization_assignment);
        config_control_design::e_person_and_organization_assignment->AddExplicitAttr (config_control_design::a_252assigned_person_and_organization);
    config_control_design::a_253role =
      new AttrDescriptor( "role", config_control_design::e_person_and_organization_role, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_person_and_organization_assignment);
        config_control_design::e_person_and_organization_assignment->AddExplicitAttr (config_control_design::a_253role);
        reg.AddEntity( *config_control_design::e_person_and_organization_assignment );
}

#endif
