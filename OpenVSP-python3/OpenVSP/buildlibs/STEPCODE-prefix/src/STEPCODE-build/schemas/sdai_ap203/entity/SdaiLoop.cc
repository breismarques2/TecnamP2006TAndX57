#ifndef  ENTITY_SDAILOOP_CC
#define  ENTITY_SDAILOOP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiLoop.h"

EntityDescriptor * config_control_design::e_loop = 0;

SdaiLoop::SdaiLoop(): SdaiTopological_representation_item() {
        /*  parent: SdaiTopological_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_loop;
}

SdaiLoop::SdaiLoop ( SdaiLoop & e ) : SdaiTopological_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiLoop::~SdaiLoop() {
}

SdaiLoop::SdaiLoop( SDAI_Application_instance * se, bool addAttrs ) : SdaiTopological_representation_item( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiTopological_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_loop;
}


void init_SdaiLoop( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( vertex_loop, edge_loop, poly_loop )\n" );
    str.append( ")" );
    config_control_design::e_loop->AddSupertype_Stmt( str );
    config_control_design::e_loop->AddSupertype(config_control_design::e_topological_representation_item);
    config_control_design::e_topological_representation_item->AddSubtype(config_control_design::e_loop);
        reg.AddEntity( *config_control_design::e_loop );
}

#endif
