#ifndef  ENTITY_SDAIAPPROVAL_ASSIGNMENT_CC
#define  ENTITY_SDAIAPPROVAL_ASSIGNMENT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiApproval_assignment.h"

EntityDescriptor * config_control_design::e_approval_assignment = 0;
AttrDescriptor * config_control_design::a_244assigned_approval = 0;

SdaiApproval_assignment::SdaiApproval_assignment() : _assigned_approval( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_approval_assignment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_244assigned_approval, ( SDAI_Application_instance_ptr * ) & _assigned_approval );
    a->set_null();
    attributes.push( a );
}

SdaiApproval_assignment::SdaiApproval_assignment ( SdaiApproval_assignment & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiApproval_assignment::~SdaiApproval_assignment() {
}

SdaiApproval_assignment::SdaiApproval_assignment( SDAI_Application_instance * se, bool addAttrs ) : _assigned_approval( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_approval_assignment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_244assigned_approval, ( SDAI_Application_instance_ptr * ) &_assigned_approval );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiApproval_ptr SdaiApproval_assignment::assigned_approval_() {
    if( !_assigned_approval ) {
        _assigned_approval = new SdaiApproval;
    }
    return (SdaiApproval_ptr) _assigned_approval;
}

SdaiApproval_ptr_c SdaiApproval_assignment::assigned_approval_() const {
    return (SdaiApproval_ptr) _assigned_approval;
}

void SdaiApproval_assignment::assigned_approval_( const SdaiApproval_ptr x ) {
    _assigned_approval = x;
}

void init_SdaiApproval_assignment( Registry& reg ) {
    std::string str;

    config_control_design::e_approval_assignment->AddSupertype_Stmt( "ABSTRACT SUPERTYPE" );
    config_control_design::a_244assigned_approval =
      new AttrDescriptor( "assigned_approval", config_control_design::e_approval, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_approval_assignment);
        config_control_design::e_approval_assignment->AddExplicitAttr (config_control_design::a_244assigned_approval);
        reg.AddEntity( *config_control_design::e_approval_assignment );
}

#endif
