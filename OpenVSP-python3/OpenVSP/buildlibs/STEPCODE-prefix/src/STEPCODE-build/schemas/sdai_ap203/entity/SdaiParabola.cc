#ifndef  ENTITY_SDAIPARABOLA_CC
#define  ENTITY_SDAIPARABOLA_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiParabola.h"

EntityDescriptor * config_control_design::e_parabola = 0;
AttrDescriptor * config_control_design::a_340focal_dist = 0;

SdaiParabola::SdaiParabola(): SdaiConic() {
        /*  parent: SdaiConic  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_parabola;
    STEPattribute * a = new STEPattribute( * config_control_design::a_340focal_dist, & _focal_dist );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiParabola::SdaiParabola ( SdaiParabola & e ) : SdaiConic() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiParabola::~SdaiParabola() {
}

SdaiParabola::SdaiParabola( SDAI_Application_instance * se, bool addAttrs ) : SdaiConic( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiConic */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_parabola;
    STEPattribute * a = new STEPattribute( * config_control_design::a_340focal_dist,  &_focal_dist );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiLength_measure SdaiParabola::focal_dist_() const {
    return (SdaiLength_measure) _focal_dist;
}

void SdaiParabola::focal_dist_( const SdaiLength_measure x ) {
    _focal_dist = x;
}

void init_SdaiParabola( Registry& reg ) {
    std::string str;

    config_control_design::e_parabola->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "focal_dist <> 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_parabola->_where_rules->Append( wr );
    config_control_design::e_parabola->AddSupertype(config_control_design::e_conic);
    config_control_design::e_conic->AddSubtype(config_control_design::e_parabola);
        config_control_design::a_340focal_dist =
          new AttrDescriptor("focal_dist",config_control_design::t_length_measure,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_parabola);
        config_control_design::e_parabola->AddExplicitAttr (config_control_design::a_340focal_dist);
        reg.AddEntity( *config_control_design::e_parabola );
}

#endif
