#ifndef  ENTITY_SDAIOFFSET_CURVE_3D_CC
#define  ENTITY_SDAIOFFSET_CURVE_3D_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOffset_curve_3d.h"

EntityDescriptor * config_control_design::e_offset_curve_3d = 0;
AttrDescriptor * config_control_design::a_422basis_curve = 0;
AttrDescriptor * config_control_design::a_423distance = 0;
AttrDescriptor * config_control_design::a_424self_intersect = 0;
AttrDescriptor * config_control_design::a_425ref_direction = 0;

SdaiOffset_curve_3d::SdaiOffset_curve_3d(): SdaiCurve(), _basis_curve( 0 ), _ref_direction( 0 ) {
        /*  parent: SdaiCurve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_offset_curve_3d;
    STEPattribute * a = new STEPattribute( * config_control_design::a_422basis_curve, ( SDAI_Application_instance_ptr * ) & _basis_curve );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_423distance, & _distance );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_424self_intersect, & _self_intersect );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_425ref_direction, ( SDAI_Application_instance_ptr * ) & _ref_direction );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiOffset_curve_3d::SdaiOffset_curve_3d ( SdaiOffset_curve_3d & e ) : SdaiCurve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOffset_curve_3d::~SdaiOffset_curve_3d() {
}

SdaiOffset_curve_3d::SdaiOffset_curve_3d( SDAI_Application_instance * se, bool addAttrs ) : SdaiCurve( se, addAttrs ), _basis_curve( 0 ), _ref_direction( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiCurve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_offset_curve_3d;
    STEPattribute * a = new STEPattribute( * config_control_design::a_422basis_curve, ( SDAI_Application_instance_ptr * ) &_basis_curve );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_423distance,  &_distance );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_424self_intersect,  &_self_intersect );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_425ref_direction, ( SDAI_Application_instance_ptr * ) &_ref_direction );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiCurve_ptr SdaiOffset_curve_3d::basis_curve_() {
    if( !_basis_curve ) {
        _basis_curve = new SdaiCurve;
    }
    return (SdaiCurve_ptr) _basis_curve;
}

SdaiCurve_ptr_c SdaiOffset_curve_3d::basis_curve_() const {
    return (SdaiCurve_ptr) _basis_curve;
}

void SdaiOffset_curve_3d::basis_curve_( const SdaiCurve_ptr x ) {
    _basis_curve = x;
}

SdaiLength_measure SdaiOffset_curve_3d::distance_() const {
    return (SdaiLength_measure) _distance;
}

void SdaiOffset_curve_3d::distance_( const SdaiLength_measure x ) {
    _distance = x;
}

Logical SdaiOffset_curve_3d::self_intersect_() const {
    return (const Logical) _self_intersect;
}

void SdaiOffset_curve_3d::self_intersect_( const Logical x ) {
    _self_intersect.put (x);
}

SdaiDirection_ptr SdaiOffset_curve_3d::ref_direction_() {
    if( !_ref_direction ) {
        _ref_direction = new SdaiDirection;
    }
    return (SdaiDirection_ptr) _ref_direction;
}

SdaiDirection_ptr_c SdaiOffset_curve_3d::ref_direction_() const {
    return (SdaiDirection_ptr) _ref_direction;
}

void SdaiOffset_curve_3d::ref_direction_( const SdaiDirection_ptr x ) {
    _ref_direction = x;
}

void init_SdaiOffset_curve_3d( Registry& reg ) {
    std::string str;

    config_control_design::e_offset_curve_3d->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "( basis_curve.dim = 3 ) AND ( ref_direction.dim = 3 )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_offset_curve_3d->_where_rules->Append( wr );
    config_control_design::e_offset_curve_3d->AddSupertype(config_control_design::e_curve);
    config_control_design::e_curve->AddSubtype(config_control_design::e_offset_curve_3d);
    config_control_design::a_422basis_curve =
      new AttrDescriptor( "basis_curve", config_control_design::e_curve, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_offset_curve_3d);
        config_control_design::e_offset_curve_3d->AddExplicitAttr (config_control_design::a_422basis_curve);
        config_control_design::a_423distance =
          new AttrDescriptor("distance",config_control_design::t_length_measure,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_offset_curve_3d);
        config_control_design::e_offset_curve_3d->AddExplicitAttr (config_control_design::a_423distance);
        config_control_design::a_424self_intersect =
          new AttrDescriptor("self_intersect",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_offset_curve_3d);
        config_control_design::e_offset_curve_3d->AddExplicitAttr (config_control_design::a_424self_intersect);
    config_control_design::a_425ref_direction =
      new AttrDescriptor( "ref_direction", config_control_design::e_direction, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_offset_curve_3d);
        config_control_design::e_offset_curve_3d->AddExplicitAttr (config_control_design::a_425ref_direction);
        reg.AddEntity( *config_control_design::e_offset_curve_3d );
}

#endif
