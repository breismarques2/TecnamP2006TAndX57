#ifndef  TYPE_SDAISI_UNIT_NAME_VAR_CC
#define  TYPE_SDAISI_UNIT_NAME_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiSi_unit_name_var.h"

const char *
SdaiSi_unit_name_var::element_at (int n) const  {
  switch (n)  {
  case Si_unit_name__hertz:  return "HERTZ";
  case Si_unit_name__coulomb:  return "COULOMB";
  case Si_unit_name__degree_celsius:  return "DEGREE_CELSIUS";
  case Si_unit_name__steradian:  return "STERADIAN";
  case Si_unit_name__siemens:  return "SIEMENS";
  case Si_unit_name__lux:  return "LUX";
  case Si_unit_name__sievert:  return "SIEVERT";
  case Si_unit_name__watt:  return "WATT";
  case Si_unit_name__ohm:  return "OHM";
  case Si_unit_name__second:  return "SECOND";
  case Si_unit_name__pascal:  return "PASCAL";
  case Si_unit_name__henry:  return "HENRY";
  case Si_unit_name__tesla:  return "TESLA";
  case Si_unit_name__volt:  return "VOLT";
  case Si_unit_name__joule:  return "JOULE";
  case Si_unit_name__kelvin:  return "KELVIN";
  case Si_unit_name__ampere:  return "AMPERE";
  case Si_unit_name__gram:  return "GRAM";
  case Si_unit_name__mole:  return "MOLE";
  case Si_unit_name__lumen:  return "LUMEN";
  case Si_unit_name__gray:  return "GRAY";
  case Si_unit_name__candela:  return "CANDELA";
  case Si_unit_name__farad:  return "FARAD";
  case Si_unit_name__radian:  return "RADIAN";
  case Si_unit_name__newton:  return "NEWTON";
  case Si_unit_name__becquerel:  return "BECQUEREL";
  case Si_unit_name__metre:  return "METRE";
  case Si_unit_name__weber:  return "WEBER";
  case Si_unit_name_unset        :
  default                :  return "UNSET";
  }
}

SdaiSi_unit_name_var::SdaiSi_unit_name_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiSi_unit_name_var::operator Si_unit_name () const {
  switch (v) {
        case Si_unit_name__hertz        :  return Si_unit_name__hertz;
        case Si_unit_name__coulomb        :  return Si_unit_name__coulomb;
        case Si_unit_name__degree_celsius        :  return Si_unit_name__degree_celsius;
        case Si_unit_name__steradian        :  return Si_unit_name__steradian;
        case Si_unit_name__siemens        :  return Si_unit_name__siemens;
        case Si_unit_name__lux        :  return Si_unit_name__lux;
        case Si_unit_name__sievert        :  return Si_unit_name__sievert;
        case Si_unit_name__watt        :  return Si_unit_name__watt;
        case Si_unit_name__ohm        :  return Si_unit_name__ohm;
        case Si_unit_name__second        :  return Si_unit_name__second;
        case Si_unit_name__pascal        :  return Si_unit_name__pascal;
        case Si_unit_name__henry        :  return Si_unit_name__henry;
        case Si_unit_name__tesla        :  return Si_unit_name__tesla;
        case Si_unit_name__volt        :  return Si_unit_name__volt;
        case Si_unit_name__joule        :  return Si_unit_name__joule;
        case Si_unit_name__kelvin        :  return Si_unit_name__kelvin;
        case Si_unit_name__ampere        :  return Si_unit_name__ampere;
        case Si_unit_name__gram        :  return Si_unit_name__gram;
        case Si_unit_name__mole        :  return Si_unit_name__mole;
        case Si_unit_name__lumen        :  return Si_unit_name__lumen;
        case Si_unit_name__gray        :  return Si_unit_name__gray;
        case Si_unit_name__candela        :  return Si_unit_name__candela;
        case Si_unit_name__farad        :  return Si_unit_name__farad;
        case Si_unit_name__radian        :  return Si_unit_name__radian;
        case Si_unit_name__newton        :  return Si_unit_name__newton;
        case Si_unit_name__becquerel        :  return Si_unit_name__becquerel;
        case Si_unit_name__metre        :  return Si_unit_name__metre;
        case Si_unit_name__weber        :  return Si_unit_name__weber;
        case Si_unit_name_unset        :
        default                :  return Si_unit_name_unset;
  }
}

SDAI_Enum *
create_SdaiSi_unit_name_var ()
{
    return new SdaiSi_unit_name_var( "", config_control_design::t_si_unit_name );
}


SdaiSi_unit_name_var_agg::SdaiSi_unit_name_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiSi_unit_name_var_agg::~SdaiSi_unit_name_var_agg()
{
}

STEPaggregate *
create_SdaiSi_unit_name_var_agg ()
{
    return new SdaiSi_unit_name_var_agg( config_control_design::t_si_unit_name );
}

void init_SdaiSi_unit_name_var( Registry& reg ) {
    std::string str;
        config_control_design::t_si_unit_name = new EnumTypeDescriptor (
                  "Si_Unit_Name",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (metre, gram, second, ampere, kelvin, mole, candela, radian, steradian, hertz, newton, pascal, joule, watt, coulomb, volt, farad, ohm, siemens, weber, tesla, henry, degree_celsius, lumen, lux, becquerel, gray, sievert)",        // Description
                  (EnumCreator) create_SdaiSi_unit_name_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_si_unit_name);
    reg.AddType (*config_control_design::t_si_unit_name);
}

#endif
