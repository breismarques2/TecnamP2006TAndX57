#ifndef  ENTITY_SDAIACTION_DIRECTIVE_CC
#define  ENTITY_SDAIACTION_DIRECTIVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAction_directive.h"

EntityDescriptor * config_control_design::e_action_directive = 0;
AttrDescriptor * config_control_design::a_417name = 0;
AttrDescriptor * config_control_design::a_418description = 0;
AttrDescriptor * config_control_design::a_419analysis = 0;
AttrDescriptor * config_control_design::a_420comment = 0;
AttrDescriptor * config_control_design::a_421requests = 0;

SdaiAction_directive::SdaiAction_directive() : _requests( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_action_directive;
    STEPattribute * a = new STEPattribute( * config_control_design::a_417name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_418description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_419analysis, & _analysis );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_420comment, & _comment );
    a->set_null();
    attributes.push( a );
    _requests = new EntityAggregate;
    a = new STEPattribute( * config_control_design::a_421requests, _requests );
    a->set_null();
    attributes.push( a );
}

SdaiAction_directive::SdaiAction_directive ( SdaiAction_directive & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAction_directive::~SdaiAction_directive() {
    delete _requests;
}

SdaiAction_directive::SdaiAction_directive( SDAI_Application_instance * se, bool addAttrs ) : _requests( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_action_directive;
    STEPattribute * a = new STEPattribute( * config_control_design::a_417name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_418description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_419analysis,  &_analysis );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_420comment,  &_comment );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _requests = new EntityAggregate;
    a = new STEPattribute( * config_control_design::a_421requests,  _requests );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiAction_directive::name_() {
    return _name;
}

const SdaiLabel SdaiAction_directive::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiAction_directive::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiAction_directive::description_() {
    return _description;
}

const SdaiText SdaiAction_directive::description_() const {
    return (const SdaiText) _description;
}

void SdaiAction_directive::description_( const SdaiText x ) {
    _description = x;
}

SdaiText SdaiAction_directive::analysis_() {
    return _analysis;
}

const SdaiText SdaiAction_directive::analysis_() const {
    return (const SdaiText) _analysis;
}

void SdaiAction_directive::analysis_( const SdaiText x ) {
    _analysis = x;
}

SdaiText SdaiAction_directive::comment_() {
    return _comment;
}

const SdaiText SdaiAction_directive::comment_() const {
    return (const SdaiText) _comment;
}

void SdaiAction_directive::comment_( const SdaiText x ) {
    _comment = x;
}

EntityAggregate_ptr SdaiAction_directive::requests_() {
    if( !_requests ) {
        _requests = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _requests;
}

EntityAggregate_ptr_c SdaiAction_directive::requests_() const {
    return ( EntityAggregate_ptr ) _requests;
}

void SdaiAction_directive::requests_( const EntityAggregate_ptr x ) {
    if( !_requests ) {
        _requests = new EntityAggregate;
    }
    _requests->ShallowCopy( * x );
}

void init_SdaiAction_directive( Registry& reg ) {
    std::string str;

        config_control_design::a_417name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_directive);
        config_control_design::e_action_directive->AddExplicitAttr (config_control_design::a_417name);
        config_control_design::a_418description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_directive);
        config_control_design::e_action_directive->AddExplicitAttr (config_control_design::a_418description);
        config_control_design::a_419analysis =
          new AttrDescriptor("analysis",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_directive);
        config_control_design::e_action_directive->AddExplicitAttr (config_control_design::a_419analysis);
        config_control_design::a_420comment =
          new AttrDescriptor("comment",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_directive);
        config_control_design::e_action_directive->AddExplicitAttr (config_control_design::a_420comment);
        SetTypeDescriptor * t_74 = new SetTypeDescriptor;
        t_74->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_74->SetBound1( 1 );
        t_74->SetBound2( 2147483647 );
        t_74->FundamentalType(SET_TYPE);
        t_74->Description("SET [1:?] OF versioned_action_request");
        t_74->OriginatingSchema(config_control_design::schema);
        t_74->ReferentType(config_control_design::e_versioned_action_request);
        config_control_design::schema->AddUnnamedType(t_74);
        config_control_design::a_421requests =
          new AttrDescriptor("requests",t_74,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action_directive);
        config_control_design::e_action_directive->AddExplicitAttr (config_control_design::a_421requests);
        reg.AddEntity( *config_control_design::e_action_directive );
}

#endif
