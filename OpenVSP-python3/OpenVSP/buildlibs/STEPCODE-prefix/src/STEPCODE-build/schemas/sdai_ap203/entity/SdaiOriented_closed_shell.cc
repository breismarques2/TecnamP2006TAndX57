#ifndef  ENTITY_SDAIORIENTED_CLOSED_SHELL_CC
#define  ENTITY_SDAIORIENTED_CLOSED_SHELL_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOriented_closed_shell.h"

EntityDescriptor * config_control_design::e_oriented_closed_shell = 0;
AttrDescriptor * config_control_design::a_286closed_shell_element = 0;
AttrDescriptor * config_control_design::a_287orientation = 0;
Derived_attribute * config_control_design::a_288Dconnected_face_set_cfs_faces = 0;

SdaiOriented_closed_shell::SdaiOriented_closed_shell(): SdaiClosed_shell(), _closed_shell_element( 0 ) {
        /*  parent: SdaiClosed_shell  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_oriented_closed_shell;
    STEPattribute * a = new STEPattribute( * config_control_design::a_286closed_shell_element, ( SDAI_Application_instance_ptr * ) & _closed_shell_element );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_287orientation, & _orientation );
    a->set_null();
    attributes.push( a );
    MakeDerived( "cfs_faces", "connected_face_set" );
}

SdaiOriented_closed_shell::SdaiOriented_closed_shell ( SdaiOriented_closed_shell & e ) : SdaiClosed_shell() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOriented_closed_shell::~SdaiOriented_closed_shell() {
}

SdaiOriented_closed_shell::SdaiOriented_closed_shell( SDAI_Application_instance * se, bool addAttrs ) : SdaiClosed_shell( se, addAttrs ), _closed_shell_element( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiClosed_shell */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_oriented_closed_shell;
    STEPattribute * a = new STEPattribute( * config_control_design::a_286closed_shell_element, ( SDAI_Application_instance_ptr * ) &_closed_shell_element );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_287orientation,  &_orientation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "cfs_faces", "connected_face_set" );
}


SdaiClosed_shell_ptr SdaiOriented_closed_shell::closed_shell_element_() {
    if( !_closed_shell_element ) {
        _closed_shell_element = new SdaiClosed_shell;
    }
    return (SdaiClosed_shell_ptr) _closed_shell_element;
}

SdaiClosed_shell_ptr_c SdaiOriented_closed_shell::closed_shell_element_() const {
    return (SdaiClosed_shell_ptr) _closed_shell_element;
}

void SdaiOriented_closed_shell::closed_shell_element_( const SdaiClosed_shell_ptr x ) {
    _closed_shell_element = x;
}

Boolean SdaiOriented_closed_shell::orientation_() const {
    return (const Boolean) _orientation;
}

void SdaiOriented_closed_shell::orientation_( const Boolean x ) {
    _orientation.put (x);
}

void init_SdaiOriented_closed_shell( Registry& reg ) {
    std::string str;

    config_control_design::e_oriented_closed_shell->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "NOT ( 'CONFIG_CONTROL_DESIGN.ORIENTED_CLOSED_SHELL' IN TYPEOF( SELF.closed_shell_element ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_oriented_closed_shell->_where_rules->Append( wr );
    config_control_design::e_oriented_closed_shell->AddSupertype(config_control_design::e_closed_shell);
    config_control_design::e_closed_shell->AddSubtype(config_control_design::e_oriented_closed_shell);
    config_control_design::a_286closed_shell_element =
      new AttrDescriptor( "closed_shell_element", config_control_design::e_closed_shell, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_oriented_closed_shell);
        config_control_design::e_oriented_closed_shell->AddExplicitAttr (config_control_design::a_286closed_shell_element);
        config_control_design::a_287orientation =
          new AttrDescriptor("orientation",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_oriented_closed_shell);
        config_control_design::e_oriented_closed_shell->AddExplicitAttr (config_control_design::a_287orientation);
        SetTypeDescriptor * t_54 = new SetTypeDescriptor;
        t_54->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_54->SetBound1( 1 );
        t_54->SetBound2( 2147483647 );
        t_54->FundamentalType(SET_TYPE);
        t_54->Description("SET [1:?] OF face");
        t_54->OriginatingSchema(config_control_design::schema);
        t_54->ReferentType(config_control_design::e_face);
        config_control_design::schema->AddUnnamedType(t_54);
        config_control_design::a_288Dconnected_face_set_cfs_faces =
          new Derived_attribute("connected_face_set.cfs_faces",t_54,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_oriented_closed_shell);
        config_control_design::e_oriented_closed_shell->AddExplicitAttr (config_control_design::a_288Dconnected_face_set_cfs_faces);
        config_control_design::a_288Dconnected_face_set_cfs_faces->initializer_("conditional_reverse( SELF.orientation, SELF.closed_shell_element.cfs_faces )");
        reg.AddEntity( *config_control_design::e_oriented_closed_shell );
}

#endif
