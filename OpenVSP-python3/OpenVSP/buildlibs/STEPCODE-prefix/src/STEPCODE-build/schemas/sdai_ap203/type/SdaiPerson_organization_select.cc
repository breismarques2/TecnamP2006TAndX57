#ifndef  TYPE_SDAIPERSON_ORGANIZATION_SELECT_CC
#define  TYPE_SDAIPERSON_ORGANIZATION_SELECT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiPerson_organization_select.h"


//////////  SELECT TYPE person_organization_select

const TypeDescriptor * 
SdaiPerson_organization_select::AssignEntity (SDAI_Application_instance * se)
{
  (void)se;
  //  PERSON
  if (se -> IsA (config_control_design::e_person))
  {  
    _app_inst = (SdaiPerson_ptr) se;
    return SetUnderlyingType (config_control_design::e_person);
  }
  //  ORGANIZATION
  if (se -> IsA (config_control_design::e_organization))
  {  
    _app_inst = (SdaiOrganization_ptr) se;
    return SetUnderlyingType (config_control_design::e_organization);
  }
  //  PERSON_AND_ORGANIZATION
  if (se -> IsA (config_control_design::e_person_and_organization))
  {  
    _app_inst = (SdaiPerson_and_organization_ptr) se;
    return SetUnderlyingType (config_control_design::e_person_and_organization);
  }
  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
  std::cerr << se -> EntityName () << std::endl;
#endif
  return 0;
}

SDAI_Select * 
SdaiPerson_organization_select::NewSelect ()
{
    SdaiPerson_organization_select * tmp = new SdaiPerson_organization_select();
    return tmp;
}


// STEP Part 21

void
SdaiPerson_organization_select::STEPwrite_content (ostream& out, const char * currSch) const {
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::e_person) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::e_organization) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::e_person_and_organization) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
}

BASE_TYPE
SdaiPerson_organization_select::ValueType() const {
    if (CurrentUnderlyingType() == config_control_design::e_person)
        return sdaiINSTANCE;
    if (CurrentUnderlyingType() == config_control_design::e_organization)
        return sdaiINSTANCE;
    if (CurrentUnderlyingType() == config_control_design::e_person_and_organization)
        return sdaiINSTANCE;
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return (BASE_TYPE)0;
}

void
SdaiPerson_organization_select::STEPwrite_verbose (ostream& out, const char *currSch) const
{
    const TypeDescriptor *td = CurrentUnderlyingType();
    std::string tmp;

    if ( td ) {
        // If we have a legal underlying type, get its name acc
        // to the current schema.
        StrToUpper( td->Name(currSch), tmp );
    }
    if (td == config_control_design::e_person) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    if (td == config_control_design::e_organization) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    if (td == config_control_design::e_person_and_organization) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return;
}

Severity
SdaiPerson_organization_select::STEPread_content (istream& in, InstMgrBase * instances,
            const char *utype, int addFileId, const char *currSch)
{
  (void)instances;
  (void)utype;
  (void)addFileId;
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::e_person) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }
    if (CurrentUnderlyingType () == config_control_design::e_organization) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }
    if (CurrentUnderlyingType () == config_control_design::e_person_and_organization) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
    return severity ();
}

Severity
SdaiPerson_organization_select::StrToVal_content (const char * str, InstMgrBase * instances)
{
  (void)str;
  (void)instances;
  switch (base_type)  {
  default:  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
std::cerr << str << "  " << instances << std::endl;
#endif
    return SEVERITY_WARNING;
  }
#ifdef __GNUG__

  return SEVERITY_NULL;
#endif
}

// STEP Part 22:  SDAI

    //  part 0
SdaiPerson_organization_select::SdaiPerson_organization_select( const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript)
{
#ifdef SC_LOGGING
    if( *logStream )
    {
    *logStream << "DAVE ERR entering SdaiPerson_organization_select constructor." << std::endl;
    }
#endif
   nullify();
#ifdef SC_LOGGING
    if( *logStream )
    {
//    *logStream << "DAVE ERR exiting SdaiPerson_organization_select constructor." << std::endl;
    }
#endif
}

    //  part 1
SdaiPerson_organization_select::SdaiPerson_organization_select( const SdaiPerson_ptr& o,
                                                                const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_person)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiPerson_organization_select constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiPerson_organization_select constructor." << std::endl; }
#endif
}

SdaiPerson_organization_select::SdaiPerson_organization_select( const SdaiOrganization_ptr& o,
                                                                const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_organization)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiPerson_organization_select constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiPerson_organization_select constructor." << std::endl; }
#endif
}

SdaiPerson_organization_select::SdaiPerson_organization_select( const SdaiPerson_and_organization_ptr& o,
                                                                const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_person_and_organization)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiPerson_organization_select constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiPerson_organization_select constructor." << std::endl; }
#endif
}

SdaiPerson_organization_select::~SdaiPerson_organization_select() {
}

SdaiPerson_organization_select_agg::SdaiPerson_organization_select_agg( SelectTypeDescriptor *s)
  : SelectAggregate(), sel_type(s)
{
}

SdaiPerson_organization_select_agg::~SdaiPerson_organization_select_agg() { }


    //  part 2
SdaiPerson_organization_select::operator SdaiPerson_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_person )
      return ((SdaiPerson_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}

SdaiPerson_organization_select::operator SdaiOrganization_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_organization )
      return ((SdaiOrganization_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}

SdaiPerson_organization_select::operator SdaiPerson_and_organization_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_person_and_organization )
      return ((SdaiPerson_and_organization_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}


    //  part 3

SdaiOrganization_ptr SdaiPerson_organization_select::the_organization_() {
  if( CurrentUnderlyingType () == config_control_design::e_person_and_organization ) 
    //  PERSON_AND_ORGANIZATION
    return ((SdaiPerson_and_organization_ptr) _app_inst) ->the_organization_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


SdaiOrganization_ptr_c SdaiPerson_organization_select::the_organization_() const {
  if( CurrentUnderlyingType () == config_control_design::e_person_and_organization ) 
    //  PERSON_AND_ORGANIZATION
    return ((const SdaiPerson_and_organization_ptr) _app_inst) ->the_organization_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::the_organization_( const SdaiOrganization_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_person_and_organization ) 
    //  PERSON_AND_ORGANIZATION
    {  ((SdaiPerson_and_organization_ptr) _app_inst) ->the_organization_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiPerson_ptr SdaiPerson_organization_select::the_person_() {
  if( CurrentUnderlyingType () == config_control_design::e_person_and_organization ) 
    //  PERSON_AND_ORGANIZATION
    return ((SdaiPerson_and_organization_ptr) _app_inst) ->the_person_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


SdaiPerson_ptr_c SdaiPerson_organization_select::the_person_() const {
  if( CurrentUnderlyingType () == config_control_design::e_person_and_organization ) 
    //  PERSON_AND_ORGANIZATION
    return ((const SdaiPerson_and_organization_ptr) _app_inst) ->the_person_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::the_person_( const SdaiPerson_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_person_and_organization ) 
    //  PERSON_AND_ORGANIZATION
    {  ((SdaiPerson_and_organization_ptr) _app_inst) ->the_person_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiText SdaiPerson_organization_select::description_() {
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    return ((SdaiOrganization_ptr) _app_inst) ->description_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


const SdaiText SdaiPerson_organization_select::description_() const {
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    return ((const SdaiOrganization_ptr) _app_inst) ->description_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::description_( const SdaiText x ) {
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    {  ((SdaiOrganization_ptr) _app_inst) ->description_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiLabel SdaiPerson_organization_select::name_() {
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    return ((SdaiOrganization_ptr) _app_inst) ->name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


const SdaiLabel SdaiPerson_organization_select::name_() const {
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    return ((const SdaiOrganization_ptr) _app_inst) ->name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::name_( const SdaiLabel x ) {
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    {  ((SdaiOrganization_ptr) _app_inst) ->name_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

StringAggregate_ptr SdaiPerson_organization_select::suffix_titles_() {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((SdaiPerson_ptr) _app_inst) ->suffix_titles_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


StringAggregate_ptr_c SdaiPerson_organization_select::suffix_titles_() const {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((const SdaiPerson_ptr) _app_inst) ->suffix_titles_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::suffix_titles_( const StringAggregate_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    {  ((SdaiPerson_ptr) _app_inst) ->suffix_titles_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

StringAggregate_ptr SdaiPerson_organization_select::prefix_titles_() {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((SdaiPerson_ptr) _app_inst) ->prefix_titles_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


StringAggregate_ptr_c SdaiPerson_organization_select::prefix_titles_() const {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((const SdaiPerson_ptr) _app_inst) ->prefix_titles_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::prefix_titles_( const StringAggregate_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    {  ((SdaiPerson_ptr) _app_inst) ->prefix_titles_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

StringAggregate_ptr SdaiPerson_organization_select::middle_names_() {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((SdaiPerson_ptr) _app_inst) ->middle_names_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


StringAggregate_ptr_c SdaiPerson_organization_select::middle_names_() const {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((const SdaiPerson_ptr) _app_inst) ->middle_names_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::middle_names_( const StringAggregate_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    {  ((SdaiPerson_ptr) _app_inst) ->middle_names_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiLabel SdaiPerson_organization_select::first_name_() {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((SdaiPerson_ptr) _app_inst) ->first_name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


const SdaiLabel SdaiPerson_organization_select::first_name_() const {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((const SdaiPerson_ptr) _app_inst) ->first_name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::first_name_( const SdaiLabel x ) {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    {  ((SdaiPerson_ptr) _app_inst) ->first_name_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiLabel SdaiPerson_organization_select::last_name_() {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((SdaiPerson_ptr) _app_inst) ->last_name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


const SdaiLabel SdaiPerson_organization_select::last_name_() const {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((const SdaiPerson_ptr) _app_inst) ->last_name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::last_name_( const SdaiLabel x ) {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    {  ((SdaiPerson_ptr) _app_inst) ->last_name_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiIdentifier SdaiPerson_organization_select::id_() {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((SdaiPerson_ptr) _app_inst) ->id_();
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    return ((SdaiOrganization_ptr) _app_inst) ->id_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


const SdaiIdentifier SdaiPerson_organization_select::id_() const {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    return ((const SdaiPerson_ptr) _app_inst) ->id_();
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    return ((const SdaiOrganization_ptr) _app_inst) ->id_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiPerson_organization_select::id_( const SdaiIdentifier x ) {
  if( CurrentUnderlyingType () == config_control_design::e_person ) 
    //  PERSON
    {  ((SdaiPerson_ptr) _app_inst) ->id_( x );
      return;
    }
  if( CurrentUnderlyingType () == config_control_design::e_organization ) 
    //  ORGANIZATION
    {  ((SdaiOrganization_ptr) _app_inst) ->id_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

    //  part 4
SdaiPerson_organization_select& SdaiPerson_organization_select::operator =( const SdaiPerson_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_person );
   return *this;
}

SdaiPerson_organization_select& SdaiPerson_organization_select::operator =( const SdaiOrganization_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_organization );
   return *this;
}

SdaiPerson_organization_select& SdaiPerson_organization_select::operator =( const SdaiPerson_and_organization_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_person_and_organization );
   return *this;
}


#ifndef COMPILER_DEFINES_OPERATOR_EQ

SdaiPerson_organization_select& SdaiPerson_organization_select::operator =( const SdaiPerson_organization_select_ptr& o ) {
    SDAI_Select::operator=( *o );
    if ( o -> CurrentUnderlyingType() == config_control_design::e_person ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::e_organization ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::e_person_and_organization ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    return *this;
}

SDAI_Select& SdaiPerson_organization_select::operator =( const SDAI_Select& o ) {
    SDAI_Select::operator=( o );
    if ( o.CurrentUnderlyingType() == config_control_design::e_person ) {
        _app_inst = ( ( SdaiPerson_organization_select& ) o )._app_inst;
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::e_organization ) {
        _app_inst = ( ( SdaiPerson_organization_select& ) o )._app_inst;
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::e_person_and_organization ) {
        _app_inst = ( ( SdaiPerson_organization_select& ) o )._app_inst;
        return *this;
    }
   return *this;
}

#endif //ndef COMPILER_DEFINES_OPERATOR_EQ

    //  part 5
Logical SdaiPerson_organization_select::IsPerson() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_person )
      return LTrue;
   return LFalse;
}

Logical SdaiPerson_organization_select::IsOrganization() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_organization )
      return LTrue;
   return LFalse;
}

Logical SdaiPerson_organization_select::IsPerson_and_organization() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_person_and_organization )
      return LTrue;
   return LFalse;
}

//////////  END SELECT TYPE SdaiPerson_organization_select


void init_SdaiPerson_organization_select( Registry& reg ) {
    std::string str;
        config_control_design::t_person_organization_select = new SelectTypeDescriptor (
                  ~(sdaiINSTANCE),        //unique elements,
                  "Person_Organization_Select",        // Name
                  sdaiSELECT,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "SELECT (Person, Organization, Person_And_Organization)",        // Description
                  (SelectCreator) create_SdaiPerson_organization_select);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_person_organization_select);
    config_control_design::t_person_organization_select -> Elements ().AddNode (config_control_design::e_person);
    config_control_design::t_person_organization_select -> Elements ().AddNode (config_control_design::e_organization);
    config_control_design::t_person_organization_select -> Elements ().AddNode (config_control_design::e_person_and_organization);
    reg.AddType (*config_control_design::t_person_organization_select);
}

#endif
