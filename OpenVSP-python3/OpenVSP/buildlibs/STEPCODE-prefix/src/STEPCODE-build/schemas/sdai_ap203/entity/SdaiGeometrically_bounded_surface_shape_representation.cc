#ifndef  ENTITY_SDAIGEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION_CC
#define  ENTITY_SDAIGEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiGeometrically_bounded_surface_shape_representation.h"

EntityDescriptor * config_control_design::e_geometrically_bounded_surface_shape_representation = 0;

SdaiGeometrically_bounded_surface_shape_representation::SdaiGeometrically_bounded_surface_shape_representation(): SdaiShape_representation() {
        /*  parent: SdaiShape_representation  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_geometrically_bounded_surface_shape_representation;
}

SdaiGeometrically_bounded_surface_shape_representation::SdaiGeometrically_bounded_surface_shape_representation ( SdaiGeometrically_bounded_surface_shape_representation & e ) : SdaiShape_representation() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiGeometrically_bounded_surface_shape_representation::~SdaiGeometrically_bounded_surface_shape_representation() {
}

SdaiGeometrically_bounded_surface_shape_representation::SdaiGeometrically_bounded_surface_shape_representation( SDAI_Application_instance * se, bool addAttrs ) : SdaiShape_representation( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiShape_representation */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_geometrically_bounded_surface_shape_representation;
}


void init_SdaiGeometrically_bounded_surface_shape_representation( Registry& reg ) {
    std::string str;

    config_control_design::e_geometrically_bounded_surface_shape_representation->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( QUERY ( it <* SELF.items | ( NOT ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.GEOMETRIC_SET', 'CONFIG_CONTROL_DESIGN.MAPPED_ITEM', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_geometrically_bounded_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "SIZEOF( QUERY ( it <* SELF.items | ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.GEOMETRIC_SET', 'CONFIG_CONTROL_DESIGN.MAPPED_ITEM'] * \n" );
    str.append( "      TYPEOF( it ) ) = 1 ) ) ) > 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_geometrically_bounded_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr3: (" );
    str.append( "SIZEOF( QUERY ( mi <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.MAPPED_ITEM' IN TYPEOF( it ) ) ) | ( NOT ( ( ( \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.'  + 'GEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION' ) IN TYPEOF( mi\\mapped_item.mapping_source\n" );
    str.append( "      .mapped_representation ) ) AND ( SIZEOF( QUERY ( mr_it <* mi\\mapped_item.mapping_source.mapped_representation.items | ( \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.GEOMETRIC_SET'  IN TYPEOF( mr_it ) ) ) ) > 0 ) ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_geometrically_bounded_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr4: (" );
    str.append( "SIZEOF( QUERY ( gs <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.GEOMETRIC_SET' IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( \n" );
    str.append( "      QUERY ( pnt <* QUERY ( gsel <* gs\\geometric_set.elements | ( 'CONFIG_CONTROL_DESIGN.POINT' IN TYPEOF( gsel ) ) ) | ( NOT \n" );
    str.append( "      gbsf_check_point( pnt ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_geometrically_bounded_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr5: (" );
    str.append( "SIZEOF( QUERY ( gs <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.GEOMETRIC_SET' IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( \n" );
    str.append( "      QUERY ( cv <* QUERY ( gsel <* gs\\geometric_set.elements | ( 'CONFIG_CONTROL_DESIGN.CURVE' IN TYPEOF( gsel ) ) ) | ( NOT \n" );
    str.append( "      gbsf_check_curve( cv ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_geometrically_bounded_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr6: (" );
    str.append( "SIZEOF( QUERY ( gs <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.GEOMETRIC_SET' IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( \n" );
    str.append( "      QUERY ( sf <* QUERY ( gsel <* gs\\geometric_set.elements | ( 'CONFIG_CONTROL_DESIGN.SURFACE' IN TYPEOF( gsel ) ) ) | ( NOT \n" );
    str.append( "      gbsf_check_surface( sf ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_geometrically_bounded_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr7: (" );
    str.append( "SIZEOF( QUERY ( gs <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.GEOMETRIC_SET' IN TYPEOF( it ) ) ) | ( SIZEOF( \n" );
    str.append( "      QUERY ( gsel <* gs\\geometric_set.elements | ( 'CONFIG_CONTROL_DESIGN.SURFACE' IN TYPEOF( gsel ) ) ) ) > 0 ) ) ) > 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_geometrically_bounded_surface_shape_representation->_where_rules->Append( wr );
    config_control_design::e_geometrically_bounded_surface_shape_representation->AddSupertype(config_control_design::e_shape_representation);
    config_control_design::e_shape_representation->AddSubtype(config_control_design::e_geometrically_bounded_surface_shape_representation);
        reg.AddEntity( *config_control_design::e_geometrically_bounded_surface_shape_representation );
}

#endif
