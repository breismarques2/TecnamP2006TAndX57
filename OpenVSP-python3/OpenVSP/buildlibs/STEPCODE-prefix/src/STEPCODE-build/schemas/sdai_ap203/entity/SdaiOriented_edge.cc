#ifndef  ENTITY_SDAIORIENTED_EDGE_CC
#define  ENTITY_SDAIORIENTED_EDGE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOriented_edge.h"

EntityDescriptor * config_control_design::e_oriented_edge = 0;
AttrDescriptor * config_control_design::a_138edge_element = 0;
AttrDescriptor * config_control_design::a_139orientation = 0;
Derived_attribute * config_control_design::a_140Dedge_edge_start = 0;
Derived_attribute * config_control_design::a_141Dedge_edge_end = 0;

SdaiOriented_edge::SdaiOriented_edge(): SdaiEdge(), _edge_element( 0 ) {
        /*  parent: SdaiEdge  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_oriented_edge;
    STEPattribute * a = new STEPattribute( * config_control_design::a_138edge_element, ( SDAI_Application_instance_ptr * ) & _edge_element );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_139orientation, & _orientation );
    a->set_null();
    attributes.push( a );
    MakeDerived( "edge_start", "edge" );
    MakeDerived( "edge_end", "edge" );
}

SdaiOriented_edge::SdaiOriented_edge ( SdaiOriented_edge & e ) : SdaiEdge() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOriented_edge::~SdaiOriented_edge() {
}

SdaiOriented_edge::SdaiOriented_edge( SDAI_Application_instance * se, bool addAttrs ) : SdaiEdge( se, addAttrs ), _edge_element( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiEdge */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_oriented_edge;
    STEPattribute * a = new STEPattribute( * config_control_design::a_138edge_element, ( SDAI_Application_instance_ptr * ) &_edge_element );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_139orientation,  &_orientation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "edge_start", "edge" );
    MakeDerived( "edge_end", "edge" );
}


SdaiEdge_ptr SdaiOriented_edge::edge_element_() {
    if( !_edge_element ) {
        _edge_element = new SdaiEdge;
    }
    return (SdaiEdge_ptr) _edge_element;
}

SdaiEdge_ptr_c SdaiOriented_edge::edge_element_() const {
    return (SdaiEdge_ptr) _edge_element;
}

void SdaiOriented_edge::edge_element_( const SdaiEdge_ptr x ) {
    _edge_element = x;
}

Boolean SdaiOriented_edge::orientation_() const {
    return (const Boolean) _orientation;
}

void SdaiOriented_edge::orientation_( const Boolean x ) {
    _orientation.put (x);
}

void init_SdaiOriented_edge( Registry& reg ) {
    std::string str;

    config_control_design::e_oriented_edge->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "NOT ( 'CONFIG_CONTROL_DESIGN.ORIENTED_EDGE' IN TYPEOF( SELF.edge_element ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_oriented_edge->_where_rules->Append( wr );
    config_control_design::e_oriented_edge->AddSupertype(config_control_design::e_edge);
    config_control_design::e_edge->AddSubtype(config_control_design::e_oriented_edge);
    config_control_design::a_138edge_element =
      new AttrDescriptor( "edge_element", config_control_design::e_edge, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_oriented_edge);
        config_control_design::e_oriented_edge->AddExplicitAttr (config_control_design::a_138edge_element);
        config_control_design::a_139orientation =
          new AttrDescriptor("orientation",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_oriented_edge);
        config_control_design::e_oriented_edge->AddExplicitAttr (config_control_design::a_139orientation);
    config_control_design::a_140Dedge_edge_start =
      new Derived_attribute( "edge.edge_start", config_control_design::e_vertex, LFalse,
       LFalse, AttrType_Deriving, *config_control_design::e_oriented_edge);
        config_control_design::e_oriented_edge->AddExplicitAttr (config_control_design::a_140Dedge_edge_start);
        config_control_design::a_140Dedge_edge_start->initializer_("boolean_choose( SELF.orientation, SELF.edge_element.edge_start, SELF.edge_element.edge_end )");
    config_control_design::a_141Dedge_edge_end =
      new Derived_attribute( "edge.edge_end", config_control_design::e_vertex, LFalse,
       LFalse, AttrType_Deriving, *config_control_design::e_oriented_edge);
        config_control_design::e_oriented_edge->AddExplicitAttr (config_control_design::a_141Dedge_edge_end);
        config_control_design::a_141Dedge_edge_end->initializer_("boolean_choose( SELF.orientation, SELF.edge_element.edge_end, SELF.edge_element.edge_start )");
        reg.AddEntity( *config_control_design::e_oriented_edge );
}

#endif
