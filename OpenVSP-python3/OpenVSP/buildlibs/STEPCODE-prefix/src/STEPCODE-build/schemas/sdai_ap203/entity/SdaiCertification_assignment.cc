#ifndef  ENTITY_SDAICERTIFICATION_ASSIGNMENT_CC
#define  ENTITY_SDAICERTIFICATION_ASSIGNMENT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCertification_assignment.h"

EntityDescriptor * config_control_design::e_certification_assignment = 0;
AttrDescriptor * config_control_design::a_299assigned_certification = 0;

SdaiCertification_assignment::SdaiCertification_assignment() : _assigned_certification( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_certification_assignment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_299assigned_certification, ( SDAI_Application_instance_ptr * ) & _assigned_certification );
    a->set_null();
    attributes.push( a );
}

SdaiCertification_assignment::SdaiCertification_assignment ( SdaiCertification_assignment & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCertification_assignment::~SdaiCertification_assignment() {
}

SdaiCertification_assignment::SdaiCertification_assignment( SDAI_Application_instance * se, bool addAttrs ) : _assigned_certification( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_certification_assignment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_299assigned_certification, ( SDAI_Application_instance_ptr * ) &_assigned_certification );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiCertification_ptr SdaiCertification_assignment::assigned_certification_() {
    if( !_assigned_certification ) {
        _assigned_certification = new SdaiCertification;
    }
    return (SdaiCertification_ptr) _assigned_certification;
}

SdaiCertification_ptr_c SdaiCertification_assignment::assigned_certification_() const {
    return (SdaiCertification_ptr) _assigned_certification;
}

void SdaiCertification_assignment::assigned_certification_( const SdaiCertification_ptr x ) {
    _assigned_certification = x;
}

void init_SdaiCertification_assignment( Registry& reg ) {
    std::string str;

    config_control_design::e_certification_assignment->AddSupertype_Stmt( "ABSTRACT SUPERTYPE" );
    config_control_design::a_299assigned_certification =
      new AttrDescriptor( "assigned_certification", config_control_design::e_certification, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_certification_assignment);
        config_control_design::e_certification_assignment->AddExplicitAttr (config_control_design::a_299assigned_certification);
        reg.AddEntity( *config_control_design::e_certification_assignment );
}

#endif
