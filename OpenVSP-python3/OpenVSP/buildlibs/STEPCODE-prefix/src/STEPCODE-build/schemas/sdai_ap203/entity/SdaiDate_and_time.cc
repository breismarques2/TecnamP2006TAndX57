#ifndef  ENTITY_SDAIDATE_AND_TIME_CC
#define  ENTITY_SDAIDATE_AND_TIME_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDate_and_time.h"

EntityDescriptor * config_control_design::e_date_and_time = 0;
AttrDescriptor * config_control_design::a_27date_component = 0;
AttrDescriptor * config_control_design::a_28time_component = 0;

SdaiDate_and_time::SdaiDate_and_time() : _date_component( 0 ), _time_component( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_date_and_time;
    STEPattribute * a = new STEPattribute( * config_control_design::a_27date_component, ( SDAI_Application_instance_ptr * ) & _date_component );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_28time_component, ( SDAI_Application_instance_ptr * ) & _time_component );
    a->set_null();
    attributes.push( a );
}

SdaiDate_and_time::SdaiDate_and_time ( SdaiDate_and_time & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDate_and_time::~SdaiDate_and_time() {
}

SdaiDate_and_time::SdaiDate_and_time( SDAI_Application_instance * se, bool addAttrs ) : _date_component( 0 ), _time_component( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_date_and_time;
    STEPattribute * a = new STEPattribute( * config_control_design::a_27date_component, ( SDAI_Application_instance_ptr * ) &_date_component );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_28time_component, ( SDAI_Application_instance_ptr * ) &_time_component );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiDate_ptr SdaiDate_and_time::date_component_() {
    if( !_date_component ) {
        _date_component = new SdaiDate;
    }
    return (SdaiDate_ptr) _date_component;
}

SdaiDate_ptr_c SdaiDate_and_time::date_component_() const {
    return (SdaiDate_ptr) _date_component;
}

void SdaiDate_and_time::date_component_( const SdaiDate_ptr x ) {
    _date_component = x;
}

SdaiLocal_time_ptr SdaiDate_and_time::time_component_() {
    if( !_time_component ) {
        _time_component = new SdaiLocal_time;
    }
    return (SdaiLocal_time_ptr) _time_component;
}

SdaiLocal_time_ptr_c SdaiDate_and_time::time_component_() const {
    return (SdaiLocal_time_ptr) _time_component;
}

void SdaiDate_and_time::time_component_( const SdaiLocal_time_ptr x ) {
    _time_component = x;
}

void init_SdaiDate_and_time( Registry& reg ) {
    std::string str;

    config_control_design::a_27date_component =
      new AttrDescriptor( "date_component", config_control_design::e_date, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_date_and_time);
        config_control_design::e_date_and_time->AddExplicitAttr (config_control_design::a_27date_component);
    config_control_design::a_28time_component =
      new AttrDescriptor( "time_component", config_control_design::e_local_time, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_date_and_time);
        config_control_design::e_date_and_time->AddExplicitAttr (config_control_design::a_28time_component);
        reg.AddEntity( *config_control_design::e_date_and_time );
}

#endif
