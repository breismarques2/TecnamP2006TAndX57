#ifndef  ENTITY_SDAIASSEMBLY_COMPONENT_USAGE_CC
#define  ENTITY_SDAIASSEMBLY_COMPONENT_USAGE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAssembly_component_usage.h"

EntityDescriptor * config_control_design::e_assembly_component_usage = 0;
AttrDescriptor * config_control_design::a_239reference_designator = 0;

SdaiAssembly_component_usage::SdaiAssembly_component_usage(): SdaiProduct_definition_usage() {
        /*  parent: SdaiProduct_definition_usage  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_assembly_component_usage;
    STEPattribute * a = new STEPattribute( * config_control_design::a_239reference_designator, & _reference_designator );
    a->set_null();
    attributes.push( a );
}

SdaiAssembly_component_usage::SdaiAssembly_component_usage ( SdaiAssembly_component_usage & e ) : SdaiProduct_definition_usage() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAssembly_component_usage::~SdaiAssembly_component_usage() {
}

SdaiAssembly_component_usage::SdaiAssembly_component_usage( SDAI_Application_instance * se, bool addAttrs ) : SdaiProduct_definition_usage( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiProduct_definition_usage */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_assembly_component_usage;
    STEPattribute * a = new STEPattribute( * config_control_design::a_239reference_designator,  &_reference_designator );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiAssembly_component_usage::reference_designator_() {
    return _reference_designator;
}

const SdaiIdentifier SdaiAssembly_component_usage::reference_designator_() const {
    return (const SdaiIdentifier) _reference_designator;
}

void SdaiAssembly_component_usage::reference_designator_( const SdaiIdentifier x ) {
    _reference_designator = x;
}

void init_SdaiAssembly_component_usage( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( next_assembly_usage_occurrence, specified_higher_usage_occurrence, promissory_usage_occurrence )\n" );
    str.append( ")" );
    config_control_design::e_assembly_component_usage->AddSupertype_Stmt( str );
    config_control_design::e_assembly_component_usage->AddSupertype(config_control_design::e_product_definition_usage);
    config_control_design::e_product_definition_usage->AddSubtype(config_control_design::e_assembly_component_usage);
        config_control_design::a_239reference_designator =
          new AttrDescriptor("reference_designator",config_control_design::t_identifier,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_assembly_component_usage);
        config_control_design::e_assembly_component_usage->AddExplicitAttr (config_control_design::a_239reference_designator);
        reg.AddEntity( *config_control_design::e_assembly_component_usage );
}

#endif
