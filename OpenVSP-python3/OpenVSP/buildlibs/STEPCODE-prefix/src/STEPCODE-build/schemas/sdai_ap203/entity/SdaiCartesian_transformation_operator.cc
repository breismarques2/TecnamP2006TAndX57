#ifndef  ENTITY_SDAICARTESIAN_TRANSFORMATION_OPERATOR_CC
#define  ENTITY_SDAICARTESIAN_TRANSFORMATION_OPERATOR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCartesian_transformation_operator.h"

EntityDescriptor * config_control_design::e_cartesian_transformation_operator = 0;
AttrDescriptor * config_control_design::a_144axis1 = 0;
AttrDescriptor * config_control_design::a_145axis2 = 0;
AttrDescriptor * config_control_design::a_146local_origin = 0;
AttrDescriptor * config_control_design::a_147scale = 0;
Derived_attribute * config_control_design::a_148Dscl = 0;

SdaiCartesian_transformation_operator::SdaiCartesian_transformation_operator(): SdaiGeometric_representation_item(), _axis1( 0 ), _axis2( 0 ), _local_origin( 0 ) {
        /*  parent: SdaiGeometric_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */
        /*  parent: SdaiFunctionally_defined_transformation  */
    HeadEntity(this);
    AppendMultInstance(new SdaiFunctionally_defined_transformation(this));

    eDesc = config_control_design::e_cartesian_transformation_operator;
    STEPattribute * a = new STEPattribute( * config_control_design::a_144axis1, ( SDAI_Application_instance_ptr * ) & _axis1 );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_145axis2, ( SDAI_Application_instance_ptr * ) & _axis2 );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_146local_origin, ( SDAI_Application_instance_ptr * ) & _local_origin );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_147scale, & _scale );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "scl", "cartesian_transformation_operator" );
}

SdaiCartesian_transformation_operator::SdaiCartesian_transformation_operator ( SdaiCartesian_transformation_operator & e ) : SdaiGeometric_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCartesian_transformation_operator::~SdaiCartesian_transformation_operator() {
}

SdaiCartesian_transformation_operator::SdaiCartesian_transformation_operator( SDAI_Application_instance * se, bool addAttrs ) : SdaiGeometric_representation_item( se, addAttrs ), _axis1( 0 ), _axis2( 0 ), _local_origin( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiGeometric_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */
        /* parent: SdaiFunctionally_defined_transformation */
    se->AppendMultInstance( new SdaiFunctionally_defined_transformation( se, addAttrs ) );

    eDesc = config_control_design::e_cartesian_transformation_operator;
    STEPattribute * a = new STEPattribute( * config_control_design::a_144axis1, ( SDAI_Application_instance_ptr * ) &_axis1 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_145axis2, ( SDAI_Application_instance_ptr * ) &_axis2 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_146local_origin, ( SDAI_Application_instance_ptr * ) &_local_origin );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_147scale,  &_scale );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "scl", "cartesian_transformation_operator" );
}


SdaiDirection_ptr SdaiCartesian_transformation_operator::axis1_() {
    if( !_axis1 ) {
        _axis1 = new SdaiDirection;
    }
    return (SdaiDirection_ptr) _axis1;
}

SdaiDirection_ptr_c SdaiCartesian_transformation_operator::axis1_() const {
    return (SdaiDirection_ptr) _axis1;
}

void SdaiCartesian_transformation_operator::axis1_( const SdaiDirection_ptr x ) {
    _axis1 = x;
}

SdaiDirection_ptr SdaiCartesian_transformation_operator::axis2_() {
    if( !_axis2 ) {
        _axis2 = new SdaiDirection;
    }
    return (SdaiDirection_ptr) _axis2;
}

SdaiDirection_ptr_c SdaiCartesian_transformation_operator::axis2_() const {
    return (SdaiDirection_ptr) _axis2;
}

void SdaiCartesian_transformation_operator::axis2_( const SdaiDirection_ptr x ) {
    _axis2 = x;
}

SdaiCartesian_point_ptr SdaiCartesian_transformation_operator::local_origin_() {
    if( !_local_origin ) {
        _local_origin = new SdaiCartesian_point;
    }
    return (SdaiCartesian_point_ptr) _local_origin;
}

SdaiCartesian_point_ptr_c SdaiCartesian_transformation_operator::local_origin_() const {
    return (SdaiCartesian_point_ptr) _local_origin;
}

void SdaiCartesian_transformation_operator::local_origin_( const SdaiCartesian_point_ptr x ) {
    _local_origin = x;
}

SDAI_Real SdaiCartesian_transformation_operator::scale_() const {
    return (SDAI_Real) _scale;
}

void SdaiCartesian_transformation_operator::scale_( const SDAI_Real x ) {
    _scale = x;
}

SdaiText SdaiCartesian_transformation_operator::description_() {
    return _description;
}

const SdaiText SdaiCartesian_transformation_operator::description_() const {
    return (const SdaiText) _description;
}

void SdaiCartesian_transformation_operator::description_( const SdaiText x ) {
    _description = x;
}

void init_SdaiCartesian_transformation_operator( Registry& reg ) {
    std::string str;

    config_control_design::e_cartesian_transformation_operator->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "scl > 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_cartesian_transformation_operator->_where_rules->Append( wr );
    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "cartesian_transformation_operator_3d\n" );
    str.append( ")" );
    config_control_design::e_cartesian_transformation_operator->AddSupertype_Stmt( str );
    config_control_design::e_cartesian_transformation_operator->AddSupertype(config_control_design::e_geometric_representation_item);
    config_control_design::e_geometric_representation_item->AddSubtype(config_control_design::e_cartesian_transformation_operator);
    config_control_design::e_cartesian_transformation_operator->AddSupertype(config_control_design::e_functionally_defined_transformation);
    config_control_design::e_functionally_defined_transformation->AddSubtype(config_control_design::e_cartesian_transformation_operator);
    config_control_design::a_144axis1 =
      new AttrDescriptor( "axis1", config_control_design::e_direction, LTrue,
       LFalse, AttrType_Explicit, *config_control_design::e_cartesian_transformation_operator);
        config_control_design::e_cartesian_transformation_operator->AddExplicitAttr (config_control_design::a_144axis1);
    config_control_design::a_145axis2 =
      new AttrDescriptor( "axis2", config_control_design::e_direction, LTrue,
       LFalse, AttrType_Explicit, *config_control_design::e_cartesian_transformation_operator);
        config_control_design::e_cartesian_transformation_operator->AddExplicitAttr (config_control_design::a_145axis2);
    config_control_design::a_146local_origin =
      new AttrDescriptor( "local_origin", config_control_design::e_cartesian_point, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_cartesian_transformation_operator);
        config_control_design::e_cartesian_transformation_operator->AddExplicitAttr (config_control_design::a_146local_origin);
        config_control_design::a_147scale =
          new AttrDescriptor("scale",t_sdaiREAL,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_cartesian_transformation_operator);
        config_control_design::e_cartesian_transformation_operator->AddExplicitAttr (config_control_design::a_147scale);
        config_control_design::a_148Dscl =
          new Derived_attribute("scl",t_sdaiREAL,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_cartesian_transformation_operator);
        config_control_design::e_cartesian_transformation_operator->AddExplicitAttr (config_control_design::a_148Dscl);
        config_control_design::a_148Dscl->initializer_("NVL( scale, 1 )");
        reg.AddEntity( *config_control_design::e_cartesian_transformation_operator );
}

#endif
