#ifndef  ENTITY_SDAICC_DESIGN_CONTRACT_CC
#define  ENTITY_SDAICC_DESIGN_CONTRACT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCc_design_contract.h"

EntityDescriptor * config_control_design::e_cc_design_contract = 0;
AttrDescriptor * config_control_design::a_202items = 0;

SdaiCc_design_contract::SdaiCc_design_contract(): SdaiContract_assignment(), _items( 0 ) {
        /*  parent: SdaiContract_assignment  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_cc_design_contract;
    _items = new SdaiContracted_item_agg;
    STEPattribute * a = new STEPattribute( * config_control_design::a_202items, _items );
    a->set_null();
    attributes.push( a );
}

SdaiCc_design_contract::SdaiCc_design_contract ( SdaiCc_design_contract & e ) : SdaiContract_assignment() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCc_design_contract::~SdaiCc_design_contract() {
    delete _items;
}

SdaiCc_design_contract::SdaiCc_design_contract( SDAI_Application_instance * se, bool addAttrs ) : SdaiContract_assignment( se, addAttrs ), _items( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiContract_assignment */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_cc_design_contract;
    _items = new SdaiContracted_item_agg;
    STEPattribute * a = new STEPattribute( * config_control_design::a_202items,  _items );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiContracted_item_agg_ptr SdaiCc_design_contract::items_() {
    if( !_items ) {
        _items = new SdaiContracted_item_agg;
    }
    return ( SdaiContracted_item_agg_ptr ) _items;
}

SdaiContracted_item_agg_ptr_c SdaiCc_design_contract::items_() const {
    return ( SdaiContracted_item_agg_ptr ) _items;
}

void SdaiCc_design_contract::items_( const SdaiContracted_item_agg_ptr x ) {
    if( !_items ) {
        _items = new SdaiContracted_item_agg;
    }
    _items->ShallowCopy( * x );
}

void init_SdaiCc_design_contract( Registry& reg ) {
    std::string str;

    config_control_design::e_cc_design_contract->AddSupertype(config_control_design::e_contract_assignment);
    config_control_design::e_contract_assignment->AddSubtype(config_control_design::e_cc_design_contract);
        SetTypeDescriptor * t_42 = new SetTypeDescriptor;
        t_42->AssignAggrCreator((AggregateCreator) create_SdaiContracted_item_agg);        // Creator function
        t_42->SetBound1( 1 );
        t_42->SetBound2( 2147483647 );
        t_42->FundamentalType(SET_TYPE);
        t_42->Description("SET [1:?] OF contracted_item");
        t_42->OriginatingSchema(config_control_design::schema);
        t_42->ReferentType(config_control_design::t_contracted_item);
        config_control_design::schema->AddUnnamedType(t_42);
        config_control_design::a_202items =
          new AttrDescriptor("items",t_42,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_cc_design_contract);
        config_control_design::e_cc_design_contract->AddExplicitAttr (config_control_design::a_202items);
        reg.AddEntity( *config_control_design::e_cc_design_contract );
}

#endif
