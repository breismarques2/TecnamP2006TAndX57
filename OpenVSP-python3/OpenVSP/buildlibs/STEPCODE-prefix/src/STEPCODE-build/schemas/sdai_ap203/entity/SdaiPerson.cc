#ifndef  ENTITY_SDAIPERSON_CC
#define  ENTITY_SDAIPERSON_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPerson.h"

EntityDescriptor * config_control_design::e_person = 0;
AttrDescriptor * config_control_design::a_130id = 0;
AttrDescriptor * config_control_design::a_131last_name = 0;
AttrDescriptor * config_control_design::a_132first_name = 0;
AttrDescriptor * config_control_design::a_133middle_names = 0;
AttrDescriptor * config_control_design::a_134prefix_titles = 0;
AttrDescriptor * config_control_design::a_135suffix_titles = 0;

SdaiPerson::SdaiPerson() : _middle_names( 0 ), _prefix_titles( 0 ), _suffix_titles( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_person;
    STEPattribute * a = new STEPattribute( * config_control_design::a_130id, & _id );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_131last_name, & _last_name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_132first_name, & _first_name );
    a->set_null();
    attributes.push( a );
    _middle_names = new StringAggregate;
    a = new STEPattribute( * config_control_design::a_133middle_names, _middle_names );
    a->set_null();
    attributes.push( a );
    _prefix_titles = new StringAggregate;
    a = new STEPattribute( * config_control_design::a_134prefix_titles, _prefix_titles );
    a->set_null();
    attributes.push( a );
    _suffix_titles = new StringAggregate;
    a = new STEPattribute( * config_control_design::a_135suffix_titles, _suffix_titles );
    a->set_null();
    attributes.push( a );
}

SdaiPerson::SdaiPerson ( SdaiPerson & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPerson::~SdaiPerson() {
    delete _middle_names;
    delete _prefix_titles;
    delete _suffix_titles;
}

SdaiPerson::SdaiPerson( SDAI_Application_instance * se, bool addAttrs ) : _middle_names( 0 ), _prefix_titles( 0 ), _suffix_titles( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_person;
    STEPattribute * a = new STEPattribute( * config_control_design::a_130id,  &_id );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_131last_name,  &_last_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_132first_name,  &_first_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _middle_names = new StringAggregate;
    a = new STEPattribute( * config_control_design::a_133middle_names,  _middle_names );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _prefix_titles = new StringAggregate;
    a = new STEPattribute( * config_control_design::a_134prefix_titles,  _prefix_titles );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _suffix_titles = new StringAggregate;
    a = new STEPattribute( * config_control_design::a_135suffix_titles,  _suffix_titles );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiPerson::id_() {
    return _id;
}

const SdaiIdentifier SdaiPerson::id_() const {
    return (const SdaiIdentifier) _id;
}

void SdaiPerson::id_( const SdaiIdentifier x ) {
    _id = x;
}

SdaiLabel SdaiPerson::last_name_() {
    return _last_name;
}

const SdaiLabel SdaiPerson::last_name_() const {
    return (const SdaiLabel) _last_name;
}

void SdaiPerson::last_name_( const SdaiLabel x ) {
    _last_name = x;
}

SdaiLabel SdaiPerson::first_name_() {
    return _first_name;
}

const SdaiLabel SdaiPerson::first_name_() const {
    return (const SdaiLabel) _first_name;
}

void SdaiPerson::first_name_( const SdaiLabel x ) {
    _first_name = x;
}

StringAggregate_ptr SdaiPerson::middle_names_() {
    if( !_middle_names ) {
        _middle_names = new StringAggregate;
    }
    return ( StringAggregate_ptr ) _middle_names;
}

StringAggregate_ptr_c SdaiPerson::middle_names_() const {
    return ( StringAggregate_ptr ) _middle_names;
}

void SdaiPerson::middle_names_( const StringAggregate_ptr x ) {
    if( !_middle_names ) {
        _middle_names = new StringAggregate;
    }
    _middle_names->ShallowCopy( * x );
}

StringAggregate_ptr SdaiPerson::prefix_titles_() {
    if( !_prefix_titles ) {
        _prefix_titles = new StringAggregate;
    }
    return ( StringAggregate_ptr ) _prefix_titles;
}

StringAggregate_ptr_c SdaiPerson::prefix_titles_() const {
    return ( StringAggregate_ptr ) _prefix_titles;
}

void SdaiPerson::prefix_titles_( const StringAggregate_ptr x ) {
    if( !_prefix_titles ) {
        _prefix_titles = new StringAggregate;
    }
    _prefix_titles->ShallowCopy( * x );
}

StringAggregate_ptr SdaiPerson::suffix_titles_() {
    if( !_suffix_titles ) {
        _suffix_titles = new StringAggregate;
    }
    return ( StringAggregate_ptr ) _suffix_titles;
}

StringAggregate_ptr_c SdaiPerson::suffix_titles_() const {
    return ( StringAggregate_ptr ) _suffix_titles;
}

void SdaiPerson::suffix_titles_( const StringAggregate_ptr x ) {
    if( !_suffix_titles ) {
        _suffix_titles = new StringAggregate;
    }
    _suffix_titles->ShallowCopy( * x );
}

void init_SdaiPerson( Registry& reg ) {
    std::string str;

    config_control_design::e_person->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "EXISTS( last_name ) OR EXISTS( first_name )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_person->_where_rules->Append( wr );
        config_control_design::e_person->_uniqueness_rules = new Uniqueness_rule__set;
        Uniqueness_rule * ur;
        str.clear();
    str.append( "UR1 : " );
    str.append( "id\n" );
    ur = new Uniqueness_rule( str.c_str() );
    config_control_design::e_person->_uniqueness_rules->Append(ur);
        config_control_design::a_130id =
          new AttrDescriptor("id",config_control_design::t_identifier,
          LFalse,LTrue, AttrType_Explicit,
          *config_control_design::e_person);
        config_control_design::e_person->AddExplicitAttr (config_control_design::a_130id);
        config_control_design::a_131last_name =
          new AttrDescriptor("last_name",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_person);
        config_control_design::e_person->AddExplicitAttr (config_control_design::a_131last_name);
        config_control_design::a_132first_name =
          new AttrDescriptor("first_name",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_person);
        config_control_design::e_person->AddExplicitAttr (config_control_design::a_132first_name);
        ListTypeDescriptor * t_24 = new ListTypeDescriptor;
        t_24->AssignAggrCreator((AggregateCreator) create_StringAggregate);        // Creator function
        t_24->SetBound1( 1 );
        t_24->SetBound2( 2147483647 );
        t_24->FundamentalType(LIST_TYPE);
        t_24->Description("LIST [1:?] OF label");
        t_24->OriginatingSchema(config_control_design::schema);
        t_24->ReferentType(config_control_design::t_label);
        config_control_design::schema->AddUnnamedType(t_24);
        config_control_design::a_133middle_names =
          new AttrDescriptor("middle_names",t_24,LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_person);
        config_control_design::e_person->AddExplicitAttr (config_control_design::a_133middle_names);
        ListTypeDescriptor * t_25 = new ListTypeDescriptor;
        t_25->AssignAggrCreator((AggregateCreator) create_StringAggregate);        // Creator function
        t_25->SetBound1( 1 );
        t_25->SetBound2( 2147483647 );
        t_25->FundamentalType(LIST_TYPE);
        t_25->Description("LIST [1:?] OF label");
        t_25->OriginatingSchema(config_control_design::schema);
        t_25->ReferentType(config_control_design::t_label);
        config_control_design::schema->AddUnnamedType(t_25);
        config_control_design::a_134prefix_titles =
          new AttrDescriptor("prefix_titles",t_25,LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_person);
        config_control_design::e_person->AddExplicitAttr (config_control_design::a_134prefix_titles);
        ListTypeDescriptor * t_26 = new ListTypeDescriptor;
        t_26->AssignAggrCreator((AggregateCreator) create_StringAggregate);        // Creator function
        t_26->SetBound1( 1 );
        t_26->SetBound2( 2147483647 );
        t_26->FundamentalType(LIST_TYPE);
        t_26->Description("LIST [1:?] OF label");
        t_26->OriginatingSchema(config_control_design::schema);
        t_26->ReferentType(config_control_design::t_label);
        config_control_design::schema->AddUnnamedType(t_26);
        config_control_design::a_135suffix_titles =
          new AttrDescriptor("suffix_titles",t_26,LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_person);
        config_control_design::e_person->AddExplicitAttr (config_control_design::a_135suffix_titles);
        reg.AddEntity( *config_control_design::e_person );
}

#endif
