#ifndef  ENTITY_SDAIDATE_AND_TIME_ASSIGNMENT_CC
#define  ENTITY_SDAIDATE_AND_TIME_ASSIGNMENT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDate_and_time_assignment.h"

EntityDescriptor * config_control_design::e_date_and_time_assignment = 0;
AttrDescriptor * config_control_design::a_155assigned_date_and_time = 0;
AttrDescriptor * config_control_design::a_156role = 0;

SdaiDate_and_time_assignment::SdaiDate_and_time_assignment() : _assigned_date_and_time( 0 ), _role( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_date_and_time_assignment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_155assigned_date_and_time, ( SDAI_Application_instance_ptr * ) & _assigned_date_and_time );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_156role, ( SDAI_Application_instance_ptr * ) & _role );
    a->set_null();
    attributes.push( a );
}

SdaiDate_and_time_assignment::SdaiDate_and_time_assignment ( SdaiDate_and_time_assignment & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDate_and_time_assignment::~SdaiDate_and_time_assignment() {
}

SdaiDate_and_time_assignment::SdaiDate_and_time_assignment( SDAI_Application_instance * se, bool addAttrs ) : _assigned_date_and_time( 0 ), _role( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_date_and_time_assignment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_155assigned_date_and_time, ( SDAI_Application_instance_ptr * ) &_assigned_date_and_time );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_156role, ( SDAI_Application_instance_ptr * ) &_role );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiDate_and_time_ptr SdaiDate_and_time_assignment::assigned_date_and_time_() {
    if( !_assigned_date_and_time ) {
        _assigned_date_and_time = new SdaiDate_and_time;
    }
    return (SdaiDate_and_time_ptr) _assigned_date_and_time;
}

SdaiDate_and_time_ptr_c SdaiDate_and_time_assignment::assigned_date_and_time_() const {
    return (SdaiDate_and_time_ptr) _assigned_date_and_time;
}

void SdaiDate_and_time_assignment::assigned_date_and_time_( const SdaiDate_and_time_ptr x ) {
    _assigned_date_and_time = x;
}

SdaiDate_time_role_ptr SdaiDate_and_time_assignment::role_() {
    if( !_role ) {
        _role = new SdaiDate_time_role;
    }
    return (SdaiDate_time_role_ptr) _role;
}

SdaiDate_time_role_ptr_c SdaiDate_and_time_assignment::role_() const {
    return (SdaiDate_time_role_ptr) _role;
}

void SdaiDate_and_time_assignment::role_( const SdaiDate_time_role_ptr x ) {
    _role = x;
}

void init_SdaiDate_and_time_assignment( Registry& reg ) {
    std::string str;

    config_control_design::e_date_and_time_assignment->AddSupertype_Stmt( "ABSTRACT SUPERTYPE" );
    config_control_design::a_155assigned_date_and_time =
      new AttrDescriptor( "assigned_date_and_time", config_control_design::e_date_and_time, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_date_and_time_assignment);
        config_control_design::e_date_and_time_assignment->AddExplicitAttr (config_control_design::a_155assigned_date_and_time);
    config_control_design::a_156role =
      new AttrDescriptor( "role", config_control_design::e_date_time_role, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_date_and_time_assignment);
        config_control_design::e_date_and_time_assignment->AddExplicitAttr (config_control_design::a_156role);
        reg.AddEntity( *config_control_design::e_date_and_time_assignment );
}

#endif
