#ifndef  ENTITY_SDAIDOCUMENT_REFERENCE_CC
#define  ENTITY_SDAIDOCUMENT_REFERENCE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDocument_reference.h"

EntityDescriptor * config_control_design::e_document_reference = 0;
AttrDescriptor * config_control_design::a_370assigned_document = 0;
AttrDescriptor * config_control_design::a_371source = 0;

SdaiDocument_reference::SdaiDocument_reference() : _assigned_document( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_document_reference;
    STEPattribute * a = new STEPattribute( * config_control_design::a_370assigned_document, ( SDAI_Application_instance_ptr * ) & _assigned_document );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_371source, & _source );
    a->set_null();
    attributes.push( a );
}

SdaiDocument_reference::SdaiDocument_reference ( SdaiDocument_reference & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDocument_reference::~SdaiDocument_reference() {
}

SdaiDocument_reference::SdaiDocument_reference( SDAI_Application_instance * se, bool addAttrs ) : _assigned_document( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_document_reference;
    STEPattribute * a = new STEPattribute( * config_control_design::a_370assigned_document, ( SDAI_Application_instance_ptr * ) &_assigned_document );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_371source,  &_source );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiDocument_ptr SdaiDocument_reference::assigned_document_() {
    if( !_assigned_document ) {
        _assigned_document = new SdaiDocument;
    }
    return (SdaiDocument_ptr) _assigned_document;
}

SdaiDocument_ptr_c SdaiDocument_reference::assigned_document_() const {
    return (SdaiDocument_ptr) _assigned_document;
}

void SdaiDocument_reference::assigned_document_( const SdaiDocument_ptr x ) {
    _assigned_document = x;
}

SdaiLabel SdaiDocument_reference::source_() {
    return _source;
}

const SdaiLabel SdaiDocument_reference::source_() const {
    return (const SdaiLabel) _source;
}

void SdaiDocument_reference::source_( const SdaiLabel x ) {
    _source = x;
}

void init_SdaiDocument_reference( Registry& reg ) {
    std::string str;

    config_control_design::e_document_reference->AddSupertype_Stmt( "ABSTRACT SUPERTYPE" );
    config_control_design::a_370assigned_document =
      new AttrDescriptor( "assigned_document", config_control_design::e_document, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_document_reference);
        config_control_design::e_document_reference->AddExplicitAttr (config_control_design::a_370assigned_document);
        config_control_design::a_371source =
          new AttrDescriptor("source",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_document_reference);
        config_control_design::e_document_reference->AddExplicitAttr (config_control_design::a_371source);
        reg.AddEntity( *config_control_design::e_document_reference );
}

#endif
