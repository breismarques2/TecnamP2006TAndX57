#ifndef  ENTITY_SDAIRATIONAL_B_SPLINE_SURFACE_CC
#define  ENTITY_SDAIRATIONAL_B_SPLINE_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRational_b_spline_surface.h"

EntityDescriptor * config_control_design::e_rational_b_spline_surface = 0;
AttrDescriptor * config_control_design::a_344weights_data = 0;
Derived_attribute * config_control_design::a_345Dweights = 0;

SdaiRational_b_spline_surface::SdaiRational_b_spline_surface(): SdaiB_spline_surface(), _weights_data( 0 ) {
        /*  parent: SdaiB_spline_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_rational_b_spline_surface;
    _weights_data = new GenericAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_344weights_data, _weights_data );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "u_upper", "b_spline_surface" );
    MakeDerived( "v_upper", "b_spline_surface" );
    MakeDerived( "control_points", "b_spline_surface" );
    MakeDerived( "weights", "rational_b_spline_surface" );
}

SdaiRational_b_spline_surface::SdaiRational_b_spline_surface ( SdaiRational_b_spline_surface & e ) : SdaiB_spline_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRational_b_spline_surface::~SdaiRational_b_spline_surface() {
    delete _weights_data;
}

SdaiRational_b_spline_surface::SdaiRational_b_spline_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiB_spline_surface( se, addAttrs ), _weights_data( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiB_spline_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_rational_b_spline_surface;
    _weights_data = new GenericAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_344weights_data,  _weights_data );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "u_upper", "b_spline_surface" );
    MakeDerived( "v_upper", "b_spline_surface" );
    MakeDerived( "control_points", "b_spline_surface" );
    MakeDerived( "weights", "rational_b_spline_surface" );
}


GenericAggregate_ptr SdaiRational_b_spline_surface::weights_data_() {
    if( !_weights_data ) {
        _weights_data = new GenericAggregate;
    }
    return ( GenericAggregate_ptr ) _weights_data;
}

GenericAggregate_ptr_c SdaiRational_b_spline_surface::weights_data_() const {
    return ( GenericAggregate_ptr ) _weights_data;
}

void SdaiRational_b_spline_surface::weights_data_( const GenericAggregate_ptr x ) {
    if( !_weights_data ) {
        _weights_data = new GenericAggregate;
    }
    _weights_data->ShallowCopy( * x );
}

void init_SdaiRational_b_spline_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_rational_b_spline_surface->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "( SIZEOF( weights_data ) = SIZEOF( SELF\\b_spline_surface.control_points_list ) ) AND ( SIZEOF( weights_data[1] ) = SIZEOF( SELF\\\n" );
    str.append( "      b_spline_surface.control_points_list[1] ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rational_b_spline_surface->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "surface_weights_positive( SELF )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rational_b_spline_surface->_where_rules->Append( wr );
    config_control_design::e_rational_b_spline_surface->AddSupertype(config_control_design::e_b_spline_surface);
    config_control_design::e_b_spline_surface->AddSubtype(config_control_design::e_rational_b_spline_surface);
        ListTypeDescriptor * t_63 = new ListTypeDescriptor;
        t_63->AssignAggrCreator((AggregateCreator) create_GenericAggregate);        // Creator function
        t_63->SetBound1( 2 );
        t_63->SetBound2( 2147483647 );
        t_63->FundamentalType(LIST_TYPE);
        t_63->Description("LIST [2:?] OF LIST [2:?] OF REAL");
        t_63->OriginatingSchema(config_control_design::schema);
        ListTypeDescriptor * t_64 = new ListTypeDescriptor;
        t_64->AssignAggrCreator((AggregateCreator) create_RealAggregate);        // Creator function
        t_64->SetBound1( 2 );
        t_64->SetBound2( 2147483647 );
        t_64->FundamentalType(LIST_TYPE);
        t_64->Description("LIST [2:?] OF REAL");
        t_64->OriginatingSchema(config_control_design::schema);
        t_64->ReferentType(t_sdaiREAL);
        config_control_design::schema->AddUnnamedType(t_64);
        t_63->ReferentType(t_64);
        config_control_design::schema->AddUnnamedType(t_63);
        config_control_design::a_344weights_data =
          new AttrDescriptor("weights_data",t_63,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rational_b_spline_surface);
        config_control_design::e_rational_b_spline_surface->AddExplicitAttr (config_control_design::a_344weights_data);
        ArrayTypeDescriptor * t_65 = new ArrayTypeDescriptor;
        t_65->AssignAggrCreator((AggregateCreator) create_GenericAggregate);        // Creator function
        t_65->SetBound1( 0 );
        t_65->SetBound2( -1962471048 );
        t_65->FundamentalType(ARRAY_TYPE);
        t_65->Description("ARRAY [0:u_upper] OF ARRAY [0:v_upper] OF REAL");
        t_65->OriginatingSchema(config_control_design::schema);
        ArrayTypeDescriptor * t_66 = new ArrayTypeDescriptor;
        t_66->AssignAggrCreator((AggregateCreator) create_RealAggregate);        // Creator function
        t_66->SetBound1( 0 );
        t_66->SetBound2( -1962470992 );
        t_66->FundamentalType(ARRAY_TYPE);
        t_66->Description("ARRAY [0:v_upper] OF REAL");
        t_66->OriginatingSchema(config_control_design::schema);
        t_66->ReferentType(t_sdaiREAL);
        config_control_design::schema->AddUnnamedType(t_66);
        t_65->ReferentType(t_66);
        config_control_design::schema->AddUnnamedType(t_65);
        config_control_design::a_345Dweights =
          new Derived_attribute("weights",t_65,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_rational_b_spline_surface);
        config_control_design::e_rational_b_spline_surface->AddExplicitAttr (config_control_design::a_345Dweights);
        config_control_design::a_345Dweights->initializer_("make_array_of_array( weights_data, 0, u_upper, 0, v_upper )");
        reg.AddEntity( *config_control_design::e_rational_b_spline_surface );
}

#endif
