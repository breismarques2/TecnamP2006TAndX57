#ifndef  ENTITY_SDAISURFACE_OF_REVOLUTION_CC
#define  ENTITY_SDAISURFACE_OF_REVOLUTION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiSurface_of_revolution.h"

EntityDescriptor * config_control_design::e_surface_of_revolution = 0;
AttrDescriptor * config_control_design::a_248axis_position = 0;
Derived_attribute * config_control_design::a_249Daxis_line = 0;

SdaiSurface_of_revolution::SdaiSurface_of_revolution(): SdaiSwept_surface(), _axis_position( 0 ) {
        /*  parent: SdaiSwept_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_surface_of_revolution;
    STEPattribute * a = new STEPattribute( * config_control_design::a_248axis_position, ( SDAI_Application_instance_ptr * ) & _axis_position );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "axis_line", "surface_of_revolution" );
}

SdaiSurface_of_revolution::SdaiSurface_of_revolution ( SdaiSurface_of_revolution & e ) : SdaiSwept_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiSurface_of_revolution::~SdaiSurface_of_revolution() {
}

SdaiSurface_of_revolution::SdaiSurface_of_revolution( SDAI_Application_instance * se, bool addAttrs ) : SdaiSwept_surface( se, addAttrs ), _axis_position( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiSwept_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_surface_of_revolution;
    STEPattribute * a = new STEPattribute( * config_control_design::a_248axis_position, ( SDAI_Application_instance_ptr * ) &_axis_position );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "axis_line", "surface_of_revolution" );
}


SdaiAxis1_placement_ptr SdaiSurface_of_revolution::axis_position_() {
    if( !_axis_position ) {
        _axis_position = new SdaiAxis1_placement;
    }
    return (SdaiAxis1_placement_ptr) _axis_position;
}

SdaiAxis1_placement_ptr_c SdaiSurface_of_revolution::axis_position_() const {
    return (SdaiAxis1_placement_ptr) _axis_position;
}

void SdaiSurface_of_revolution::axis_position_( const SdaiAxis1_placement_ptr x ) {
    _axis_position = x;
}

void init_SdaiSurface_of_revolution( Registry& reg ) {
    std::string str;

    config_control_design::e_surface_of_revolution->AddSupertype(config_control_design::e_swept_surface);
    config_control_design::e_swept_surface->AddSubtype(config_control_design::e_surface_of_revolution);
    config_control_design::a_248axis_position =
      new AttrDescriptor( "axis_position", config_control_design::e_axis1_placement, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_surface_of_revolution);
        config_control_design::e_surface_of_revolution->AddExplicitAttr (config_control_design::a_248axis_position);
    config_control_design::a_249Daxis_line =
      new Derived_attribute( "axis_line", config_control_design::e_line, LFalse,
       LFalse, AttrType_Deriving, *config_control_design::e_surface_of_revolution);
        config_control_design::e_surface_of_revolution->AddExplicitAttr (config_control_design::a_249Daxis_line);
        config_control_design::a_249Daxis_line->initializer_("dummy_gri || curve(  ) || line( axis_position.location, dummy_gri || vector( axis_position.z, 1 ) )");
        reg.AddEntity( *config_control_design::e_surface_of_revolution );
}

#endif
