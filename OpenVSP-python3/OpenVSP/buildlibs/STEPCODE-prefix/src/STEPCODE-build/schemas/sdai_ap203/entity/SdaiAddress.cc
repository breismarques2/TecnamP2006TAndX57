#ifndef  ENTITY_SDAIADDRESS_CC
#define  ENTITY_SDAIADDRESS_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAddress.h"

EntityDescriptor * config_control_design::e_address = 0;
AttrDescriptor * config_control_design::a_76internal_location = 0;
AttrDescriptor * config_control_design::a_77street_number = 0;
AttrDescriptor * config_control_design::a_78street = 0;
AttrDescriptor * config_control_design::a_79postal_box = 0;
AttrDescriptor * config_control_design::a_80town = 0;
AttrDescriptor * config_control_design::a_81region = 0;
AttrDescriptor * config_control_design::a_82postal_code = 0;
AttrDescriptor * config_control_design::a_83country = 0;
AttrDescriptor * config_control_design::a_84facsimile_number = 0;
AttrDescriptor * config_control_design::a_85telephone_number = 0;
AttrDescriptor * config_control_design::a_86electronic_mail_address = 0;
AttrDescriptor * config_control_design::a_87telex_number = 0;

SdaiAddress::SdaiAddress() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_address;
    STEPattribute * a = new STEPattribute( * config_control_design::a_76internal_location, & _internal_location );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_77street_number, & _street_number );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_78street, & _street );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_79postal_box, & _postal_box );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_80town, & _town );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_81region, & _region );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_82postal_code, & _postal_code );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_83country, & _country );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_84facsimile_number, & _facsimile_number );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_85telephone_number, & _telephone_number );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_86electronic_mail_address, & _electronic_mail_address );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_87telex_number, & _telex_number );
    a->set_null();
    attributes.push( a );
}

SdaiAddress::SdaiAddress ( SdaiAddress & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAddress::~SdaiAddress() {
}

SdaiAddress::SdaiAddress( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_address;
    STEPattribute * a = new STEPattribute( * config_control_design::a_76internal_location,  &_internal_location );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_77street_number,  &_street_number );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_78street,  &_street );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_79postal_box,  &_postal_box );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_80town,  &_town );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_81region,  &_region );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_82postal_code,  &_postal_code );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_83country,  &_country );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_84facsimile_number,  &_facsimile_number );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_85telephone_number,  &_telephone_number );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_86electronic_mail_address,  &_electronic_mail_address );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_87telex_number,  &_telex_number );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiAddress::internal_location_() {
    return _internal_location;
}

const SdaiLabel SdaiAddress::internal_location_() const {
    return (const SdaiLabel) _internal_location;
}

void SdaiAddress::internal_location_( const SdaiLabel x ) {
    _internal_location = x;
}

SdaiLabel SdaiAddress::street_number_() {
    return _street_number;
}

const SdaiLabel SdaiAddress::street_number_() const {
    return (const SdaiLabel) _street_number;
}

void SdaiAddress::street_number_( const SdaiLabel x ) {
    _street_number = x;
}

SdaiLabel SdaiAddress::street_() {
    return _street;
}

const SdaiLabel SdaiAddress::street_() const {
    return (const SdaiLabel) _street;
}

void SdaiAddress::street_( const SdaiLabel x ) {
    _street = x;
}

SdaiLabel SdaiAddress::postal_box_() {
    return _postal_box;
}

const SdaiLabel SdaiAddress::postal_box_() const {
    return (const SdaiLabel) _postal_box;
}

void SdaiAddress::postal_box_( const SdaiLabel x ) {
    _postal_box = x;
}

SdaiLabel SdaiAddress::town_() {
    return _town;
}

const SdaiLabel SdaiAddress::town_() const {
    return (const SdaiLabel) _town;
}

void SdaiAddress::town_( const SdaiLabel x ) {
    _town = x;
}

SdaiLabel SdaiAddress::region_() {
    return _region;
}

const SdaiLabel SdaiAddress::region_() const {
    return (const SdaiLabel) _region;
}

void SdaiAddress::region_( const SdaiLabel x ) {
    _region = x;
}

SdaiLabel SdaiAddress::postal_code_() {
    return _postal_code;
}

const SdaiLabel SdaiAddress::postal_code_() const {
    return (const SdaiLabel) _postal_code;
}

void SdaiAddress::postal_code_( const SdaiLabel x ) {
    _postal_code = x;
}

SdaiLabel SdaiAddress::country_() {
    return _country;
}

const SdaiLabel SdaiAddress::country_() const {
    return (const SdaiLabel) _country;
}

void SdaiAddress::country_( const SdaiLabel x ) {
    _country = x;
}

SdaiLabel SdaiAddress::facsimile_number_() {
    return _facsimile_number;
}

const SdaiLabel SdaiAddress::facsimile_number_() const {
    return (const SdaiLabel) _facsimile_number;
}

void SdaiAddress::facsimile_number_( const SdaiLabel x ) {
    _facsimile_number = x;
}

SdaiLabel SdaiAddress::telephone_number_() {
    return _telephone_number;
}

const SdaiLabel SdaiAddress::telephone_number_() const {
    return (const SdaiLabel) _telephone_number;
}

void SdaiAddress::telephone_number_( const SdaiLabel x ) {
    _telephone_number = x;
}

SdaiLabel SdaiAddress::electronic_mail_address_() {
    return _electronic_mail_address;
}

const SdaiLabel SdaiAddress::electronic_mail_address_() const {
    return (const SdaiLabel) _electronic_mail_address;
}

void SdaiAddress::electronic_mail_address_( const SdaiLabel x ) {
    _electronic_mail_address = x;
}

SdaiLabel SdaiAddress::telex_number_() {
    return _telex_number;
}

const SdaiLabel SdaiAddress::telex_number_() const {
    return (const SdaiLabel) _telex_number;
}

void SdaiAddress::telex_number_( const SdaiLabel x ) {
    _telex_number = x;
}

void init_SdaiAddress( Registry& reg ) {
    std::string str;

    config_control_design::e_address->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "EXISTS( internal_location ) OR EXISTS( street_number ) OR EXISTS( street ) OR EXISTS( postal_box ) OR EXISTS( town ) OR EXISTS( \n" );
    str.append( "      region ) OR EXISTS( postal_code ) OR EXISTS( country ) OR EXISTS( facsimile_number ) OR EXISTS( telephone_number ) OR \n" );
    str.append( "      EXISTS( electronic_mail_address ) OR EXISTS( telex_number )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_address->_where_rules->Append( wr );
        config_control_design::a_76internal_location =
          new AttrDescriptor("internal_location",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_76internal_location);
        config_control_design::a_77street_number =
          new AttrDescriptor("street_number",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_77street_number);
        config_control_design::a_78street =
          new AttrDescriptor("street",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_78street);
        config_control_design::a_79postal_box =
          new AttrDescriptor("postal_box",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_79postal_box);
        config_control_design::a_80town =
          new AttrDescriptor("town",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_80town);
        config_control_design::a_81region =
          new AttrDescriptor("region",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_81region);
        config_control_design::a_82postal_code =
          new AttrDescriptor("postal_code",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_82postal_code);
        config_control_design::a_83country =
          new AttrDescriptor("country",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_83country);
        config_control_design::a_84facsimile_number =
          new AttrDescriptor("facsimile_number",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_84facsimile_number);
        config_control_design::a_85telephone_number =
          new AttrDescriptor("telephone_number",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_85telephone_number);
        config_control_design::a_86electronic_mail_address =
          new AttrDescriptor("electronic_mail_address",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_86electronic_mail_address);
        config_control_design::a_87telex_number =
          new AttrDescriptor("telex_number",config_control_design::t_label,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_address);
        config_control_design::e_address->AddExplicitAttr (config_control_design::a_87telex_number);
        reg.AddEntity( *config_control_design::e_address );
}

#endif
