#ifndef  ENTITY_SDAIRATIONAL_B_SPLINE_CURVE_CC
#define  ENTITY_SDAIRATIONAL_B_SPLINE_CURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRational_b_spline_curve.h"

EntityDescriptor * config_control_design::e_rational_b_spline_curve = 0;
AttrDescriptor * config_control_design::a_196weights_data = 0;
Derived_attribute * config_control_design::a_197Dweights = 0;

SdaiRational_b_spline_curve::SdaiRational_b_spline_curve(): SdaiB_spline_curve(), _weights_data( 0 ) {
        /*  parent: SdaiB_spline_curve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_rational_b_spline_curve;
    _weights_data = new RealAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_196weights_data, _weights_data );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "upper_index_on_control_points", "b_spline_curve" );
    MakeDerived( "control_points", "b_spline_curve" );
    MakeDerived( "weights", "rational_b_spline_curve" );
}

SdaiRational_b_spline_curve::SdaiRational_b_spline_curve ( SdaiRational_b_spline_curve & e ) : SdaiB_spline_curve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRational_b_spline_curve::~SdaiRational_b_spline_curve() {
    delete _weights_data;
}

SdaiRational_b_spline_curve::SdaiRational_b_spline_curve( SDAI_Application_instance * se, bool addAttrs ) : SdaiB_spline_curve( se, addAttrs ), _weights_data( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiB_spline_curve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_rational_b_spline_curve;
    _weights_data = new RealAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_196weights_data,  _weights_data );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "upper_index_on_control_points", "b_spline_curve" );
    MakeDerived( "control_points", "b_spline_curve" );
    MakeDerived( "weights", "rational_b_spline_curve" );
}


RealAggregate_ptr SdaiRational_b_spline_curve::weights_data_() {
    if( !_weights_data ) {
        _weights_data = new RealAggregate;
    }
    return ( RealAggregate_ptr ) _weights_data;
}

RealAggregate_ptr_c SdaiRational_b_spline_curve::weights_data_() const {
    return ( RealAggregate_ptr ) _weights_data;
}

void SdaiRational_b_spline_curve::weights_data_( const RealAggregate_ptr x ) {
    if( !_weights_data ) {
        _weights_data = new RealAggregate;
    }
    _weights_data->ShallowCopy( * x );
}

void init_SdaiRational_b_spline_curve( Registry& reg ) {
    std::string str;

    config_control_design::e_rational_b_spline_curve->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( weights_data ) = SIZEOF( SELF\\b_spline_curve.control_points_list )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rational_b_spline_curve->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "curve_weights_positive( SELF )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rational_b_spline_curve->_where_rules->Append( wr );
    config_control_design::e_rational_b_spline_curve->AddSupertype(config_control_design::e_b_spline_curve);
    config_control_design::e_b_spline_curve->AddSubtype(config_control_design::e_rational_b_spline_curve);
        ListTypeDescriptor * t_38 = new ListTypeDescriptor;
        t_38->AssignAggrCreator((AggregateCreator) create_RealAggregate);        // Creator function
        t_38->SetBound1( 2 );
        t_38->SetBound2( 2147483647 );
        t_38->FundamentalType(LIST_TYPE);
        t_38->Description("LIST [2:?] OF REAL");
        t_38->OriginatingSchema(config_control_design::schema);
        t_38->ReferentType(t_sdaiREAL);
        config_control_design::schema->AddUnnamedType(t_38);
        config_control_design::a_196weights_data =
          new AttrDescriptor("weights_data",t_38,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rational_b_spline_curve);
        config_control_design::e_rational_b_spline_curve->AddExplicitAttr (config_control_design::a_196weights_data);
        ArrayTypeDescriptor * t_39 = new ArrayTypeDescriptor;
        t_39->AssignAggrCreator((AggregateCreator) create_RealAggregate);        // Creator function
        t_39->SetBound1( 0 );
        t_39->SetBound2( -1962471776 );
        t_39->FundamentalType(ARRAY_TYPE);
        t_39->Description("ARRAY [0:upper_index_on_control_points] OF REAL");
        t_39->OriginatingSchema(config_control_design::schema);
        t_39->ReferentType(t_sdaiREAL);
        config_control_design::schema->AddUnnamedType(t_39);
        config_control_design::a_197Dweights =
          new Derived_attribute("weights",t_39,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_rational_b_spline_curve);
        config_control_design::e_rational_b_spline_curve->AddExplicitAttr (config_control_design::a_197Dweights);
        config_control_design::a_197Dweights->initializer_("list_to_array( weights_data, 0, upper_index_on_control_points )");
        reg.AddEntity( *config_control_design::e_rational_b_spline_curve );
}

#endif
