#ifndef  ENTITY_SDAIINTERSECTION_CURVE_CC
#define  ENTITY_SDAIINTERSECTION_CURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiIntersection_curve.h"

EntityDescriptor * config_control_design::e_intersection_curve = 0;

SdaiIntersection_curve::SdaiIntersection_curve(): SdaiSurface_curve() {
        /*  parent: SdaiSurface_curve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_intersection_curve;
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "basis_surface", "surface_curve" );
}

SdaiIntersection_curve::SdaiIntersection_curve ( SdaiIntersection_curve & e ) : SdaiSurface_curve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiIntersection_curve::~SdaiIntersection_curve() {
}

SdaiIntersection_curve::SdaiIntersection_curve( SDAI_Application_instance * se, bool addAttrs ) : SdaiSurface_curve( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiSurface_curve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_intersection_curve;
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "basis_surface", "surface_curve" );
}


void init_SdaiIntersection_curve( Registry& reg ) {
    std::string str;

    config_control_design::e_intersection_curve->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( SELF\\surface_curve.associated_geometry ) = 2\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_intersection_curve->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "associated_surface( SELF\\surface_curve.associated_geometry[1] ) <> associated_surface( SELF\\surface_curve.associated_geometry[2] )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_intersection_curve->_where_rules->Append( wr );
    config_control_design::e_intersection_curve->AddSupertype(config_control_design::e_surface_curve);
    config_control_design::e_surface_curve->AddSubtype(config_control_design::e_intersection_curve);
        reg.AddEntity( *config_control_design::e_intersection_curve );
}

#endif
