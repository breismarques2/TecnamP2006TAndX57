#ifndef  TYPE_SDAIKNOT_TYPE_VAR_CC
#define  TYPE_SDAIKNOT_TYPE_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiKnot_type_var.h"

const char *
SdaiKnot_type_var::element_at (int n) const  {
  switch (n)  {
  case Knot_type__piecewise_bezier_knots:  return "PIECEWISE_BEZIER_KNOTS";
  case Knot_type__uniform_knots:  return "UNIFORM_KNOTS";
  case Knot_type__quasi_uniform_knots:  return "QUASI_UNIFORM_KNOTS";
  case Knot_type__unspecified:  return "UNSPECIFIED";
  case Knot_type_unset        :
  default                :  return "UNSET";
  }
}

SdaiKnot_type_var::SdaiKnot_type_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiKnot_type_var::operator Knot_type () const {
  switch (v) {
        case Knot_type__piecewise_bezier_knots        :  return Knot_type__piecewise_bezier_knots;
        case Knot_type__uniform_knots        :  return Knot_type__uniform_knots;
        case Knot_type__quasi_uniform_knots        :  return Knot_type__quasi_uniform_knots;
        case Knot_type__unspecified        :  return Knot_type__unspecified;
        case Knot_type_unset        :
        default                :  return Knot_type_unset;
  }
}

SDAI_Enum *
create_SdaiKnot_type_var ()
{
    return new SdaiKnot_type_var( "", config_control_design::t_knot_type );
}


SdaiKnot_type_var_agg::SdaiKnot_type_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiKnot_type_var_agg::~SdaiKnot_type_var_agg()
{
}

STEPaggregate *
create_SdaiKnot_type_var_agg ()
{
    return new SdaiKnot_type_var_agg( config_control_design::t_knot_type );
}

void init_SdaiKnot_type_var( Registry& reg ) {
    std::string str;
        config_control_design::t_knot_type = new EnumTypeDescriptor (
                  "Knot_Type",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (uniform_knots, unspecified, quasi_uniform_knots, piecewise_bezier_knots)",        // Description
                  (EnumCreator) create_SdaiKnot_type_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_knot_type);
    reg.AddType (*config_control_design::t_knot_type);
}

#endif
