#ifndef  ENTITY_SDAIGLOBAL_UNIT_ASSIGNED_CONTEXT_CC
#define  ENTITY_SDAIGLOBAL_UNIT_ASSIGNED_CONTEXT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiGlobal_unit_assigned_context.h"

EntityDescriptor * config_control_design::e_global_unit_assigned_context = 0;
AttrDescriptor * config_control_design::a_75units = 0;

SdaiGlobal_unit_assigned_context::SdaiGlobal_unit_assigned_context(): SdaiRepresentation_context(), _units( 0 ) {
        /*  parent: SdaiRepresentation_context  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_global_unit_assigned_context;
    _units = new SdaiUnit_agg;
    STEPattribute * a = new STEPattribute( * config_control_design::a_75units, _units );
    a->set_null();
    attributes.push( a );
}

SdaiGlobal_unit_assigned_context::SdaiGlobal_unit_assigned_context ( SdaiGlobal_unit_assigned_context & e ) : SdaiRepresentation_context() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiGlobal_unit_assigned_context::~SdaiGlobal_unit_assigned_context() {
    delete _units;
}

SdaiGlobal_unit_assigned_context::SdaiGlobal_unit_assigned_context( SDAI_Application_instance * se, bool addAttrs ) : SdaiRepresentation_context( se, addAttrs ), _units( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiRepresentation_context */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_global_unit_assigned_context;
    _units = new SdaiUnit_agg;
    STEPattribute * a = new STEPattribute( * config_control_design::a_75units,  _units );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiUnit_agg_ptr SdaiGlobal_unit_assigned_context::units_() {
    if( !_units ) {
        _units = new SdaiUnit_agg;
    }
    return ( SdaiUnit_agg_ptr ) _units;
}

SdaiUnit_agg_ptr_c SdaiGlobal_unit_assigned_context::units_() const {
    return ( SdaiUnit_agg_ptr ) _units;
}

void SdaiGlobal_unit_assigned_context::units_( const SdaiUnit_agg_ptr x ) {
    if( !_units ) {
        _units = new SdaiUnit_agg;
    }
    _units->ShallowCopy( * x );
}

void init_SdaiGlobal_unit_assigned_context( Registry& reg ) {
    std::string str;

    config_control_design::e_global_unit_assigned_context->AddSupertype(config_control_design::e_representation_context);
    config_control_design::e_representation_context->AddSubtype(config_control_design::e_global_unit_assigned_context);
        SetTypeDescriptor * t_10 = new SetTypeDescriptor;
        t_10->AssignAggrCreator((AggregateCreator) create_SdaiUnit_agg);        // Creator function
        t_10->SetBound1( 1 );
        t_10->SetBound2( 2147483647 );
        t_10->FundamentalType(SET_TYPE);
        t_10->Description("SET [1:?] OF unit");
        t_10->OriginatingSchema(config_control_design::schema);
        t_10->ReferentType(config_control_design::t_unit);
        config_control_design::schema->AddUnnamedType(t_10);
        config_control_design::a_75units =
          new AttrDescriptor("units",t_10,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_global_unit_assigned_context);
        config_control_design::e_global_unit_assigned_context->AddExplicitAttr (config_control_design::a_75units);
        reg.AddEntity( *config_control_design::e_global_unit_assigned_context );
}

#endif
