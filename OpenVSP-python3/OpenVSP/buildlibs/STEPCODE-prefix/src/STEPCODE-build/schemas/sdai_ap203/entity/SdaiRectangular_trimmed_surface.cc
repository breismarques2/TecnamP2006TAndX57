#ifndef  ENTITY_SDAIRECTANGULAR_TRIMMED_SURFACE_CC
#define  ENTITY_SDAIRECTANGULAR_TRIMMED_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRectangular_trimmed_surface.h"

EntityDescriptor * config_control_design::e_rectangular_trimmed_surface = 0;
AttrDescriptor * config_control_design::a_326basis_surface = 0;
AttrDescriptor * config_control_design::a_327u1 = 0;
AttrDescriptor * config_control_design::a_328u2 = 0;
AttrDescriptor * config_control_design::a_329v1 = 0;
AttrDescriptor * config_control_design::a_330v2 = 0;
AttrDescriptor * config_control_design::a_331usense = 0;
AttrDescriptor * config_control_design::a_332vsense = 0;

SdaiRectangular_trimmed_surface::SdaiRectangular_trimmed_surface(): SdaiBounded_surface(), _basis_surface( 0 ) {
        /*  parent: SdaiBounded_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_rectangular_trimmed_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_326basis_surface, ( SDAI_Application_instance_ptr * ) & _basis_surface );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_327u1, & _u1 );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_328u2, & _u2 );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_329v1, & _v1 );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_330v2, & _v2 );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_331usense, & _usense );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_332vsense, & _vsense );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiRectangular_trimmed_surface::SdaiRectangular_trimmed_surface ( SdaiRectangular_trimmed_surface & e ) : SdaiBounded_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRectangular_trimmed_surface::~SdaiRectangular_trimmed_surface() {
}

SdaiRectangular_trimmed_surface::SdaiRectangular_trimmed_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiBounded_surface( se, addAttrs ), _basis_surface( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiBounded_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_rectangular_trimmed_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_326basis_surface, ( SDAI_Application_instance_ptr * ) &_basis_surface );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_327u1,  &_u1 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_328u2,  &_u2 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_329v1,  &_v1 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_330v2,  &_v2 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_331usense,  &_usense );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_332vsense,  &_vsense );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiSurface_ptr SdaiRectangular_trimmed_surface::basis_surface_() {
    if( !_basis_surface ) {
        _basis_surface = new SdaiSurface;
    }
    return (SdaiSurface_ptr) _basis_surface;
}

SdaiSurface_ptr_c SdaiRectangular_trimmed_surface::basis_surface_() const {
    return (SdaiSurface_ptr) _basis_surface;
}

void SdaiRectangular_trimmed_surface::basis_surface_( const SdaiSurface_ptr x ) {
    _basis_surface = x;
}

SdaiParameter_value SdaiRectangular_trimmed_surface::u1_() const {
    return (SdaiParameter_value) _u1;
}

void SdaiRectangular_trimmed_surface::u1_( const SdaiParameter_value x ) {
    _u1 = x;
}

SdaiParameter_value SdaiRectangular_trimmed_surface::u2_() const {
    return (SdaiParameter_value) _u2;
}

void SdaiRectangular_trimmed_surface::u2_( const SdaiParameter_value x ) {
    _u2 = x;
}

SdaiParameter_value SdaiRectangular_trimmed_surface::v1_() const {
    return (SdaiParameter_value) _v1;
}

void SdaiRectangular_trimmed_surface::v1_( const SdaiParameter_value x ) {
    _v1 = x;
}

SdaiParameter_value SdaiRectangular_trimmed_surface::v2_() const {
    return (SdaiParameter_value) _v2;
}

void SdaiRectangular_trimmed_surface::v2_( const SdaiParameter_value x ) {
    _v2 = x;
}

Boolean SdaiRectangular_trimmed_surface::usense_() const {
    return (const Boolean) _usense;
}

void SdaiRectangular_trimmed_surface::usense_( const Boolean x ) {
    _usense.put (x);
}

Boolean SdaiRectangular_trimmed_surface::vsense_() const {
    return (const Boolean) _vsense;
}

void SdaiRectangular_trimmed_surface::vsense_( const Boolean x ) {
    _vsense.put (x);
}

void init_SdaiRectangular_trimmed_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_rectangular_trimmed_surface->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "u1 <> u2\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rectangular_trimmed_surface->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "v1 <> v2\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rectangular_trimmed_surface->_where_rules->Append( wr );
        str.clear();
        str.append( "wr3: (" );
    str.append( "( ( 'CONFIG_CONTROL_DESIGN.ELEMENTARY_SURFACE' IN TYPEOF( basis_surface ) ) AND ( NOT ( 'CONFIG_CONTROL_DESIGN.PLANE' IN TYPEOF( \n" );
    str.append( "      basis_surface ) ) ) ) OR ( 'CONFIG_CONTROL_DESIGN.SURFACE_OF_REVOLUTION' IN TYPEOF( basis_surface ) ) OR ( usense = ( u2 > \n" );
    str.append( "      u1 ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rectangular_trimmed_surface->_where_rules->Append( wr );
        str.clear();
        str.append( "wr4: (" );
    str.append( "( 'CONFIG_CONTROL_DESIGN.SPHERICAL_SURFACE' IN TYPEOF( basis_surface ) ) OR ( 'CONFIG_CONTROL_DESIGN.TOROIDAL_SURFACE' IN \n" );
    str.append( "      TYPEOF( basis_surface ) ) OR ( vsense = ( v2 > v1 ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rectangular_trimmed_surface->_where_rules->Append( wr );
    config_control_design::e_rectangular_trimmed_surface->AddSupertype(config_control_design::e_bounded_surface);
    config_control_design::e_bounded_surface->AddSubtype(config_control_design::e_rectangular_trimmed_surface);
    config_control_design::a_326basis_surface =
      new AttrDescriptor( "basis_surface", config_control_design::e_surface, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_rectangular_trimmed_surface);
        config_control_design::e_rectangular_trimmed_surface->AddExplicitAttr (config_control_design::a_326basis_surface);
        config_control_design::a_327u1 =
          new AttrDescriptor("u1",config_control_design::t_parameter_value,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rectangular_trimmed_surface);
        config_control_design::e_rectangular_trimmed_surface->AddExplicitAttr (config_control_design::a_327u1);
        config_control_design::a_328u2 =
          new AttrDescriptor("u2",config_control_design::t_parameter_value,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rectangular_trimmed_surface);
        config_control_design::e_rectangular_trimmed_surface->AddExplicitAttr (config_control_design::a_328u2);
        config_control_design::a_329v1 =
          new AttrDescriptor("v1",config_control_design::t_parameter_value,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rectangular_trimmed_surface);
        config_control_design::e_rectangular_trimmed_surface->AddExplicitAttr (config_control_design::a_329v1);
        config_control_design::a_330v2 =
          new AttrDescriptor("v2",config_control_design::t_parameter_value,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rectangular_trimmed_surface);
        config_control_design::e_rectangular_trimmed_surface->AddExplicitAttr (config_control_design::a_330v2);
        config_control_design::a_331usense =
          new AttrDescriptor("usense",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rectangular_trimmed_surface);
        config_control_design::e_rectangular_trimmed_surface->AddExplicitAttr (config_control_design::a_331usense);
        config_control_design::a_332vsense =
          new AttrDescriptor("vsense",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rectangular_trimmed_surface);
        config_control_design::e_rectangular_trimmed_surface->AddExplicitAttr (config_control_design::a_332vsense);
        reg.AddEntity( *config_control_design::e_rectangular_trimmed_surface );
}

#endif
