#ifndef  ENTITY_SDAIREPRESENTATION_ITEM_CC
#define  ENTITY_SDAIREPRESENTATION_ITEM_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRepresentation_item.h"

EntityDescriptor * config_control_design::e_representation_item = 0;
AttrDescriptor * config_control_design::a_11name = 0;

SdaiRepresentation_item::SdaiRepresentation_item() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_representation_item;
    STEPattribute * a = new STEPattribute( * config_control_design::a_11name, & _name );
    a->set_null();
    attributes.push( a );
}

SdaiRepresentation_item::SdaiRepresentation_item ( SdaiRepresentation_item & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRepresentation_item::~SdaiRepresentation_item() {
}

SdaiRepresentation_item::SdaiRepresentation_item( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_representation_item;
    STEPattribute * a = new STEPattribute( * config_control_design::a_11name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiRepresentation_item::name_() {
    return _name;
}

const SdaiLabel SdaiRepresentation_item::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiRepresentation_item::name_( const SdaiLabel x ) {
    _name = x;
}

void init_SdaiRepresentation_item( Registry& reg ) {
    std::string str;

    config_control_design::e_representation_item->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( using_representations( SELF ) ) > 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_representation_item->_where_rules->Append( wr );
        config_control_design::a_11name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_representation_item);
        config_control_design::e_representation_item->AddExplicitAttr (config_control_design::a_11name);
        reg.AddEntity( *config_control_design::e_representation_item );
}

#endif
