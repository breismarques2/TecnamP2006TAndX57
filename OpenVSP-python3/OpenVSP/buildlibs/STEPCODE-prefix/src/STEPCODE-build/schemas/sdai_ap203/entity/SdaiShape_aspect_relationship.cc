#ifndef  ENTITY_SDAISHAPE_ASPECT_RELATIONSHIP_CC
#define  ENTITY_SDAISHAPE_ASPECT_RELATIONSHIP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiShape_aspect_relationship.h"

EntityDescriptor * config_control_design::e_shape_aspect_relationship = 0;
AttrDescriptor * config_control_design::a_92name = 0;
AttrDescriptor * config_control_design::a_93description = 0;
AttrDescriptor * config_control_design::a_94relating_shape_aspect = 0;
AttrDescriptor * config_control_design::a_95related_shape_aspect = 0;

SdaiShape_aspect_relationship::SdaiShape_aspect_relationship() : _relating_shape_aspect( 0 ), _related_shape_aspect( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_shape_aspect_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_92name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_93description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_94relating_shape_aspect, ( SDAI_Application_instance_ptr * ) & _relating_shape_aspect );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_95related_shape_aspect, ( SDAI_Application_instance_ptr * ) & _related_shape_aspect );
    a->set_null();
    attributes.push( a );
}

SdaiShape_aspect_relationship::SdaiShape_aspect_relationship ( SdaiShape_aspect_relationship & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiShape_aspect_relationship::~SdaiShape_aspect_relationship() {
}

SdaiShape_aspect_relationship::SdaiShape_aspect_relationship( SDAI_Application_instance * se, bool addAttrs ) : _relating_shape_aspect( 0 ), _related_shape_aspect( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_shape_aspect_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_92name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_93description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_94relating_shape_aspect, ( SDAI_Application_instance_ptr * ) &_relating_shape_aspect );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_95related_shape_aspect, ( SDAI_Application_instance_ptr * ) &_related_shape_aspect );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiShape_aspect_relationship::name_() {
    return _name;
}

const SdaiLabel SdaiShape_aspect_relationship::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiShape_aspect_relationship::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiShape_aspect_relationship::description_() {
    return _description;
}

const SdaiText SdaiShape_aspect_relationship::description_() const {
    return (const SdaiText) _description;
}

void SdaiShape_aspect_relationship::description_( const SdaiText x ) {
    _description = x;
}

SdaiShape_aspect_ptr SdaiShape_aspect_relationship::relating_shape_aspect_() {
    if( !_relating_shape_aspect ) {
        _relating_shape_aspect = new SdaiShape_aspect;
    }
    return (SdaiShape_aspect_ptr) _relating_shape_aspect;
}

SdaiShape_aspect_ptr_c SdaiShape_aspect_relationship::relating_shape_aspect_() const {
    return (SdaiShape_aspect_ptr) _relating_shape_aspect;
}

void SdaiShape_aspect_relationship::relating_shape_aspect_( const SdaiShape_aspect_ptr x ) {
    _relating_shape_aspect = x;
}

SdaiShape_aspect_ptr SdaiShape_aspect_relationship::related_shape_aspect_() {
    if( !_related_shape_aspect ) {
        _related_shape_aspect = new SdaiShape_aspect;
    }
    return (SdaiShape_aspect_ptr) _related_shape_aspect;
}

SdaiShape_aspect_ptr_c SdaiShape_aspect_relationship::related_shape_aspect_() const {
    return (SdaiShape_aspect_ptr) _related_shape_aspect;
}

void SdaiShape_aspect_relationship::related_shape_aspect_( const SdaiShape_aspect_ptr x ) {
    _related_shape_aspect = x;
}

void init_SdaiShape_aspect_relationship( Registry& reg ) {
    std::string str;

        config_control_design::a_92name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_shape_aspect_relationship);
        config_control_design::e_shape_aspect_relationship->AddExplicitAttr (config_control_design::a_92name);
        config_control_design::a_93description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_shape_aspect_relationship);
        config_control_design::e_shape_aspect_relationship->AddExplicitAttr (config_control_design::a_93description);
    config_control_design::a_94relating_shape_aspect =
      new AttrDescriptor( "relating_shape_aspect", config_control_design::e_shape_aspect, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_shape_aspect_relationship);
        config_control_design::e_shape_aspect_relationship->AddExplicitAttr (config_control_design::a_94relating_shape_aspect);
    config_control_design::a_95related_shape_aspect =
      new AttrDescriptor( "related_shape_aspect", config_control_design::e_shape_aspect, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_shape_aspect_relationship);
        config_control_design::e_shape_aspect_relationship->AddExplicitAttr (config_control_design::a_95related_shape_aspect);
        reg.AddEntity( *config_control_design::e_shape_aspect_relationship );
}

#endif
