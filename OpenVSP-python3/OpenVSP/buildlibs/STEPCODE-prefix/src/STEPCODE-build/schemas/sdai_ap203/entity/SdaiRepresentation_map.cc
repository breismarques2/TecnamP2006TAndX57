#ifndef  ENTITY_SDAIREPRESENTATION_MAP_CC
#define  ENTITY_SDAIREPRESENTATION_MAP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRepresentation_map.h"

EntityDescriptor * config_control_design::e_representation_map = 0;
AttrDescriptor * config_control_design::a_393mapping_origin = 0;
AttrDescriptor * config_control_design::a_394mapped_representation = 0;
Inverse_attribute * config_control_design::a_395Imap_usage = 0;

SdaiRepresentation_map::SdaiRepresentation_map() : _mapping_origin( 0 ), _mapped_representation( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_representation_map;
    STEPattribute * a = new STEPattribute( * config_control_design::a_393mapping_origin, ( SDAI_Application_instance_ptr * ) & _mapping_origin );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_394mapped_representation, ( SDAI_Application_instance_ptr * ) & _mapped_representation );
    a->set_null();
    attributes.push( a );
}

SdaiRepresentation_map::SdaiRepresentation_map ( SdaiRepresentation_map & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRepresentation_map::~SdaiRepresentation_map() {
}

SdaiRepresentation_map::SdaiRepresentation_map( SDAI_Application_instance * se, bool addAttrs ) : _mapping_origin( 0 ), _mapped_representation( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_representation_map;
    STEPattribute * a = new STEPattribute( * config_control_design::a_393mapping_origin, ( SDAI_Application_instance_ptr * ) &_mapping_origin );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_394mapped_representation, ( SDAI_Application_instance_ptr * ) &_mapped_representation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiRepresentation_item_ptr SdaiRepresentation_map::mapping_origin_() {
    if( !_mapping_origin ) {
        _mapping_origin = new SdaiRepresentation_item;
    }
    return (SdaiRepresentation_item_ptr) _mapping_origin;
}

SdaiRepresentation_item_ptr_c SdaiRepresentation_map::mapping_origin_() const {
    return (SdaiRepresentation_item_ptr) _mapping_origin;
}

void SdaiRepresentation_map::mapping_origin_( const SdaiRepresentation_item_ptr x ) {
    _mapping_origin = x;
}

SdaiRepresentation_ptr SdaiRepresentation_map::mapped_representation_() {
    if( !_mapped_representation ) {
        _mapped_representation = new SdaiRepresentation;
    }
    return (SdaiRepresentation_ptr) _mapped_representation;
}

SdaiRepresentation_ptr_c SdaiRepresentation_map::mapped_representation_() const {
    return (SdaiRepresentation_ptr) _mapped_representation;
}

void SdaiRepresentation_map::mapped_representation_( const SdaiRepresentation_ptr x ) {
    _mapped_representation = x;
}

EntityAggregate_ptr SdaiRepresentation_map::map_usage_() {
    iAstruct ias = getInvAttr( config_control_design::a_395Imap_usage );
    if( !ias.a ) {
        ias.a = new EntityAggregate;
        setInvAttr( config_control_design::a_395Imap_usage, ias );
    }
    return ias.a;
}

EntityAggregate_ptr_c SdaiRepresentation_map::map_usage_() const {
    return getInvAttr( config_control_design::a_395Imap_usage ).a;
}

void SdaiRepresentation_map::map_usage_( const EntityAggregate_ptr x ) {
    iAstruct ias;
    ias.a = x;
    setInvAttr( config_control_design::a_395Imap_usage, ias );
}

void init_SdaiRepresentation_map( Registry& reg ) {
    std::string str;

    config_control_design::e_representation_map->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "item_in_context( SELF.mapping_origin, SELF.mapped_representation.context_of_items )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_representation_map->_where_rules->Append( wr );
    config_control_design::a_393mapping_origin =
      new AttrDescriptor( "mapping_origin", config_control_design::e_representation_item, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_representation_map);
        config_control_design::e_representation_map->AddExplicitAttr (config_control_design::a_393mapping_origin);
    config_control_design::a_394mapped_representation =
      new AttrDescriptor( "mapped_representation", config_control_design::e_representation, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_representation_map);
        config_control_design::e_representation_map->AddExplicitAttr (config_control_design::a_394mapped_representation);
        SetTypeDescriptor * t_71 = new SetTypeDescriptor;
        t_71->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_71->SetBound1( 1 );
        t_71->SetBound2( 2147483647 );
        t_71->FundamentalType(SET_TYPE);
        t_71->Description("SET [1:?] OF mapped_item");
        t_71->OriginatingSchema(config_control_design::schema);
        t_71->ReferentType(config_control_design::e_mapped_item);
        config_control_design::schema->AddUnnamedType(t_71);
        config_control_design::a_395Imap_usage =
          new Inverse_attribute("map_usage",t_71,LFalse,LFalse,
          *config_control_design::e_representation_map);
        config_control_design::e_representation_map->AddInverseAttr (config_control_design::a_395Imap_usage);
        config_control_design::a_395Imap_usage->inverted_attr_id_("mapping_source");
        config_control_design::a_395Imap_usage->inverted_entity_id_("mapped_item");
// inverse entity 3 mapped_item
        reg.AddEntity( *config_control_design::e_representation_map );
        config_control_design::schema->AddEntityWInverse( config_control_design::e_representation_map );
}

#endif
