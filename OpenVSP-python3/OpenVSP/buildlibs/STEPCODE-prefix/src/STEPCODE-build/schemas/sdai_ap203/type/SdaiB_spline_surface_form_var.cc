#ifndef  TYPE_SDAIB_SPLINE_SURFACE_FORM_VAR_CC
#define  TYPE_SDAIB_SPLINE_SURFACE_FORM_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiB_spline_surface_form_var.h"

const char *
SdaiB_spline_surface_form_var::element_at (int n) const  {
  switch (n)  {
  case B_spline_surface_form__ruled_surf:  return "RULED_SURF";
  case B_spline_surface_form__quadric_surf:  return "QUADRIC_SURF";
  case B_spline_surface_form__conical_surf:  return "CONICAL_SURF";
  case B_spline_surface_form__surf_of_revolution:  return "SURF_OF_REVOLUTION";
  case B_spline_surface_form__plane_surf:  return "PLANE_SURF";
  case B_spline_surface_form__spherical_surf:  return "SPHERICAL_SURF";
  case B_spline_surface_form__surf_of_linear_extrusion:  return "SURF_OF_LINEAR_EXTRUSION";
  case B_spline_surface_form__cylindrical_surf:  return "CYLINDRICAL_SURF";
  case B_spline_surface_form__generalised_cone:  return "GENERALISED_CONE";
  case B_spline_surface_form__unspecified:  return "UNSPECIFIED";
  case B_spline_surface_form__toroidal_surf:  return "TOROIDAL_SURF";
  case B_spline_surface_form_unset        :
  default                :  return "UNSET";
  }
}

SdaiB_spline_surface_form_var::SdaiB_spline_surface_form_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiB_spline_surface_form_var::operator B_spline_surface_form () const {
  switch (v) {
        case B_spline_surface_form__ruled_surf        :  return B_spline_surface_form__ruled_surf;
        case B_spline_surface_form__quadric_surf        :  return B_spline_surface_form__quadric_surf;
        case B_spline_surface_form__conical_surf        :  return B_spline_surface_form__conical_surf;
        case B_spline_surface_form__surf_of_revolution        :  return B_spline_surface_form__surf_of_revolution;
        case B_spline_surface_form__plane_surf        :  return B_spline_surface_form__plane_surf;
        case B_spline_surface_form__spherical_surf        :  return B_spline_surface_form__spherical_surf;
        case B_spline_surface_form__surf_of_linear_extrusion        :  return B_spline_surface_form__surf_of_linear_extrusion;
        case B_spline_surface_form__cylindrical_surf        :  return B_spline_surface_form__cylindrical_surf;
        case B_spline_surface_form__generalised_cone        :  return B_spline_surface_form__generalised_cone;
        case B_spline_surface_form__unspecified        :  return B_spline_surface_form__unspecified;
        case B_spline_surface_form__toroidal_surf        :  return B_spline_surface_form__toroidal_surf;
        case B_spline_surface_form_unset        :
        default                :  return B_spline_surface_form_unset;
  }
}

SDAI_Enum *
create_SdaiB_spline_surface_form_var ()
{
    return new SdaiB_spline_surface_form_var( "", config_control_design::t_b_spline_surface_form );
}


SdaiB_spline_surface_form_var_agg::SdaiB_spline_surface_form_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiB_spline_surface_form_var_agg::~SdaiB_spline_surface_form_var_agg()
{
}

STEPaggregate *
create_SdaiB_spline_surface_form_var_agg ()
{
    return new SdaiB_spline_surface_form_var_agg( config_control_design::t_b_spline_surface_form );
}

void init_SdaiB_spline_surface_form_var( Registry& reg ) {
    std::string str;
        config_control_design::t_b_spline_surface_form = new EnumTypeDescriptor (
                  "B_Spline_Surface_Form",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (plane_surf, cylindrical_surf, conical_surf, spherical_surf, toroidal_surf, surf_of_revolution, ruled_surf, generalised_cone, quadric_surf, surf_of_linear_extrusion, unspecified)",        // Description
                  (EnumCreator) create_SdaiB_spline_surface_form_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_b_spline_surface_form);
    reg.AddType (*config_control_design::t_b_spline_surface_form);
}

#endif
