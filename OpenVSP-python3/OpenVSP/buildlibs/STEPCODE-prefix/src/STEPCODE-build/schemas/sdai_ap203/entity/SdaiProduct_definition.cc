#ifndef  ENTITY_SDAIPRODUCT_DEFINITION_CC
#define  ENTITY_SDAIPRODUCT_DEFINITION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiProduct_definition.h"

EntityDescriptor * config_control_design::e_product_definition = 0;
AttrDescriptor * config_control_design::a_178id = 0;
AttrDescriptor * config_control_design::a_179description = 0;
AttrDescriptor * config_control_design::a_180formation = 0;
AttrDescriptor * config_control_design::a_181frame_of_reference = 0;

SdaiProduct_definition::SdaiProduct_definition() : _formation( 0 ), _frame_of_reference( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_product_definition;
    STEPattribute * a = new STEPattribute( * config_control_design::a_178id, & _id );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_179description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_180formation, ( SDAI_Application_instance_ptr * ) & _formation );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_181frame_of_reference, ( SDAI_Application_instance_ptr * ) & _frame_of_reference );
    a->set_null();
    attributes.push( a );
}

SdaiProduct_definition::SdaiProduct_definition ( SdaiProduct_definition & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiProduct_definition::~SdaiProduct_definition() {
}

SdaiProduct_definition::SdaiProduct_definition( SDAI_Application_instance * se, bool addAttrs ) : _formation( 0 ), _frame_of_reference( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_product_definition;
    STEPattribute * a = new STEPattribute( * config_control_design::a_178id,  &_id );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_179description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_180formation, ( SDAI_Application_instance_ptr * ) &_formation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_181frame_of_reference, ( SDAI_Application_instance_ptr * ) &_frame_of_reference );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiProduct_definition::id_() {
    return _id;
}

const SdaiIdentifier SdaiProduct_definition::id_() const {
    return (const SdaiIdentifier) _id;
}

void SdaiProduct_definition::id_( const SdaiIdentifier x ) {
    _id = x;
}

SdaiText SdaiProduct_definition::description_() {
    return _description;
}

const SdaiText SdaiProduct_definition::description_() const {
    return (const SdaiText) _description;
}

void SdaiProduct_definition::description_( const SdaiText x ) {
    _description = x;
}

SdaiProduct_definition_formation_ptr SdaiProduct_definition::formation_() {
    if( !_formation ) {
        _formation = new SdaiProduct_definition_formation;
    }
    return (SdaiProduct_definition_formation_ptr) _formation;
}

SdaiProduct_definition_formation_ptr_c SdaiProduct_definition::formation_() const {
    return (SdaiProduct_definition_formation_ptr) _formation;
}

void SdaiProduct_definition::formation_( const SdaiProduct_definition_formation_ptr x ) {
    _formation = x;
}

SdaiProduct_definition_context_ptr SdaiProduct_definition::frame_of_reference_() {
    if( !_frame_of_reference ) {
        _frame_of_reference = new SdaiProduct_definition_context;
    }
    return (SdaiProduct_definition_context_ptr) _frame_of_reference;
}

SdaiProduct_definition_context_ptr_c SdaiProduct_definition::frame_of_reference_() const {
    return (SdaiProduct_definition_context_ptr) _frame_of_reference;
}

void SdaiProduct_definition::frame_of_reference_( const SdaiProduct_definition_context_ptr x ) {
    _frame_of_reference = x;
}

void init_SdaiProduct_definition( Registry& reg ) {
    std::string str;

        config_control_design::a_178id =
          new AttrDescriptor("id",config_control_design::t_identifier,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_definition);
        config_control_design::e_product_definition->AddExplicitAttr (config_control_design::a_178id);
        config_control_design::a_179description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_definition);
        config_control_design::e_product_definition->AddExplicitAttr (config_control_design::a_179description);
    config_control_design::a_180formation =
      new AttrDescriptor( "formation", config_control_design::e_product_definition_formation, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_product_definition);
        config_control_design::e_product_definition->AddExplicitAttr (config_control_design::a_180formation);
    config_control_design::a_181frame_of_reference =
      new AttrDescriptor( "frame_of_reference", config_control_design::e_product_definition_context, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_product_definition);
        config_control_design::e_product_definition->AddExplicitAttr (config_control_design::a_181frame_of_reference);
        reg.AddEntity( *config_control_design::e_product_definition );
}

#endif
