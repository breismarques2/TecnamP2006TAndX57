#ifndef  ENTITY_SDAICARTESIAN_TRANSFORMATION_OPERATOR_3D_CC
#define  ENTITY_SDAICARTESIAN_TRANSFORMATION_OPERATOR_3D_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCartesian_transformation_operator_3d.h"

EntityDescriptor * config_control_design::e_cartesian_transformation_operator_3d = 0;
AttrDescriptor * config_control_design::a_149axis3 = 0;
Derived_attribute * config_control_design::a_150Du = 0;

SdaiCartesian_transformation_operator_3d::SdaiCartesian_transformation_operator_3d(): SdaiCartesian_transformation_operator(), _axis3( 0 ) {
        /*  parent: SdaiCartesian_transformation_operator  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_cartesian_transformation_operator_3d;
    STEPattribute * a = new STEPattribute( * config_control_design::a_149axis3, ( SDAI_Application_instance_ptr * ) & _axis3 );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "scl", "cartesian_transformation_operator" );
    MakeDerived( "u", "cartesian_transformation_operator_3d" );
}

SdaiCartesian_transformation_operator_3d::SdaiCartesian_transformation_operator_3d ( SdaiCartesian_transformation_operator_3d & e ) : SdaiCartesian_transformation_operator() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCartesian_transformation_operator_3d::~SdaiCartesian_transformation_operator_3d() {
}

SdaiCartesian_transformation_operator_3d::SdaiCartesian_transformation_operator_3d( SDAI_Application_instance * se, bool addAttrs ) : SdaiCartesian_transformation_operator( se, addAttrs ), _axis3( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiCartesian_transformation_operator */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_cartesian_transformation_operator_3d;
    STEPattribute * a = new STEPattribute( * config_control_design::a_149axis3, ( SDAI_Application_instance_ptr * ) &_axis3 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "scl", "cartesian_transformation_operator" );
    MakeDerived( "u", "cartesian_transformation_operator_3d" );
}


SdaiDirection_ptr SdaiCartesian_transformation_operator_3d::axis3_() {
    if( !_axis3 ) {
        _axis3 = new SdaiDirection;
    }
    return (SdaiDirection_ptr) _axis3;
}

SdaiDirection_ptr_c SdaiCartesian_transformation_operator_3d::axis3_() const {
    return (SdaiDirection_ptr) _axis3;
}

void SdaiCartesian_transformation_operator_3d::axis3_( const SdaiDirection_ptr x ) {
    _axis3 = x;
}

void init_SdaiCartesian_transformation_operator_3d( Registry& reg ) {
    std::string str;

    config_control_design::e_cartesian_transformation_operator_3d->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SELF\\geometric_representation_item.dim = 3\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_cartesian_transformation_operator_3d->_where_rules->Append( wr );
    config_control_design::e_cartesian_transformation_operator_3d->AddSupertype(config_control_design::e_cartesian_transformation_operator);
    config_control_design::e_cartesian_transformation_operator->AddSubtype(config_control_design::e_cartesian_transformation_operator_3d);
    config_control_design::a_149axis3 =
      new AttrDescriptor( "axis3", config_control_design::e_direction, LTrue,
       LFalse, AttrType_Explicit, *config_control_design::e_cartesian_transformation_operator_3d);
        config_control_design::e_cartesian_transformation_operator_3d->AddExplicitAttr (config_control_design::a_149axis3);
        ListTypeDescriptor * t_27 = new ListTypeDescriptor;
        t_27->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_27->SetBound1( 3 );
        t_27->SetBound2( 3 );
        t_27->FundamentalType(LIST_TYPE);
        t_27->Description("LIST [3:3] OF direction");
        t_27->OriginatingSchema(config_control_design::schema);
        t_27->ReferentType(config_control_design::e_direction);
        config_control_design::schema->AddUnnamedType(t_27);
        config_control_design::a_150Du =
          new Derived_attribute("u",t_27,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_cartesian_transformation_operator_3d);
        config_control_design::e_cartesian_transformation_operator_3d->AddExplicitAttr (config_control_design::a_150Du);
        config_control_design::a_150Du->initializer_("base_axis( 3, SELF\\cartesian_transformation_operator.axis1, SELF\\cartesian_transformation_operator.axis2, axis3 )");
        reg.AddEntity( *config_control_design::e_cartesian_transformation_operator_3d );
}

#endif
