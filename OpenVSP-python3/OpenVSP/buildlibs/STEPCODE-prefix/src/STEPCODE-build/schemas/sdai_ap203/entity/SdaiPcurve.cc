#ifndef  ENTITY_SDAIPCURVE_CC
#define  ENTITY_SDAIPCURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPcurve.h"

EntityDescriptor * config_control_design::e_pcurve = 0;
AttrDescriptor * config_control_design::a_297basis_surface = 0;
AttrDescriptor * config_control_design::a_298reference_to_curve = 0;

SdaiPcurve::SdaiPcurve(): SdaiCurve(), _basis_surface( 0 ), _reference_to_curve( 0 ) {
        /*  parent: SdaiCurve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_pcurve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_297basis_surface, ( SDAI_Application_instance_ptr * ) & _basis_surface );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_298reference_to_curve, ( SDAI_Application_instance_ptr * ) & _reference_to_curve );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiPcurve::SdaiPcurve ( SdaiPcurve & e ) : SdaiCurve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPcurve::~SdaiPcurve() {
}

SdaiPcurve::SdaiPcurve( SDAI_Application_instance * se, bool addAttrs ) : SdaiCurve( se, addAttrs ), _basis_surface( 0 ), _reference_to_curve( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiCurve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_pcurve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_297basis_surface, ( SDAI_Application_instance_ptr * ) &_basis_surface );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_298reference_to_curve, ( SDAI_Application_instance_ptr * ) &_reference_to_curve );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiSurface_ptr SdaiPcurve::basis_surface_() {
    if( !_basis_surface ) {
        _basis_surface = new SdaiSurface;
    }
    return (SdaiSurface_ptr) _basis_surface;
}

SdaiSurface_ptr_c SdaiPcurve::basis_surface_() const {
    return (SdaiSurface_ptr) _basis_surface;
}

void SdaiPcurve::basis_surface_( const SdaiSurface_ptr x ) {
    _basis_surface = x;
}

SdaiDefinitional_representation_ptr SdaiPcurve::reference_to_curve_() {
    if( !_reference_to_curve ) {
        _reference_to_curve = new SdaiDefinitional_representation;
    }
    return (SdaiDefinitional_representation_ptr) _reference_to_curve;
}

SdaiDefinitional_representation_ptr_c SdaiPcurve::reference_to_curve_() const {
    return (SdaiDefinitional_representation_ptr) _reference_to_curve;
}

void SdaiPcurve::reference_to_curve_( const SdaiDefinitional_representation_ptr x ) {
    _reference_to_curve = x;
}

void init_SdaiPcurve( Registry& reg ) {
    std::string str;

    config_control_design::e_pcurve->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( reference_to_curve\\representation.items ) = 1\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_pcurve->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( " 'CONFIG_CONTROL_DESIGN.CURVE' IN TYPEOF( reference_to_curve\\representation.items[1] )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_pcurve->_where_rules->Append( wr );
        str.clear();
        str.append( "wr3: (" );
    str.append( "reference_to_curve\\representation.items[1]\\geometric_representation_item.dim = 2\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_pcurve->_where_rules->Append( wr );
    config_control_design::e_pcurve->AddSupertype(config_control_design::e_curve);
    config_control_design::e_curve->AddSubtype(config_control_design::e_pcurve);
    config_control_design::a_297basis_surface =
      new AttrDescriptor( "basis_surface", config_control_design::e_surface, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_pcurve);
        config_control_design::e_pcurve->AddExplicitAttr (config_control_design::a_297basis_surface);
    config_control_design::a_298reference_to_curve =
      new AttrDescriptor( "reference_to_curve", config_control_design::e_definitional_representation, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_pcurve);
        config_control_design::e_pcurve->AddExplicitAttr (config_control_design::a_298reference_to_curve);
        reg.AddEntity( *config_control_design::e_pcurve );
}

#endif
