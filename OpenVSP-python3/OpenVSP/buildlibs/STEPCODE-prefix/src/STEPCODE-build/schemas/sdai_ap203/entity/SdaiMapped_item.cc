#ifndef  ENTITY_SDAIMAPPED_ITEM_CC
#define  ENTITY_SDAIMAPPED_ITEM_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiMapped_item.h"

EntityDescriptor * config_control_design::e_mapped_item = 0;
AttrDescriptor * config_control_design::a_242mapping_source = 0;
AttrDescriptor * config_control_design::a_243mapping_target = 0;

SdaiMapped_item::SdaiMapped_item(): SdaiRepresentation_item(), _mapping_source( 0 ), _mapping_target( 0 ) {
        /*  parent: SdaiRepresentation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_mapped_item;
    STEPattribute * a = new STEPattribute( * config_control_design::a_242mapping_source, ( SDAI_Application_instance_ptr * ) & _mapping_source );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_243mapping_target, ( SDAI_Application_instance_ptr * ) & _mapping_target );
    a->set_null();
    attributes.push( a );
}

SdaiMapped_item::SdaiMapped_item ( SdaiMapped_item & e ) : SdaiRepresentation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiMapped_item::~SdaiMapped_item() {
}

SdaiMapped_item::SdaiMapped_item( SDAI_Application_instance * se, bool addAttrs ) : SdaiRepresentation_item( se, addAttrs ), _mapping_source( 0 ), _mapping_target( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiRepresentation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_mapped_item;
    STEPattribute * a = new STEPattribute( * config_control_design::a_242mapping_source, ( SDAI_Application_instance_ptr * ) &_mapping_source );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_243mapping_target, ( SDAI_Application_instance_ptr * ) &_mapping_target );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiRepresentation_map_ptr SdaiMapped_item::mapping_source_() {
    if( !_mapping_source ) {
        _mapping_source = new SdaiRepresentation_map;
    }
    return (SdaiRepresentation_map_ptr) _mapping_source;
}

SdaiRepresentation_map_ptr_c SdaiMapped_item::mapping_source_() const {
    return (SdaiRepresentation_map_ptr) _mapping_source;
}

void SdaiMapped_item::mapping_source_( const SdaiRepresentation_map_ptr x ) {
    _mapping_source = x;
}

SdaiRepresentation_item_ptr SdaiMapped_item::mapping_target_() {
    if( !_mapping_target ) {
        _mapping_target = new SdaiRepresentation_item;
    }
    return (SdaiRepresentation_item_ptr) _mapping_target;
}

SdaiRepresentation_item_ptr_c SdaiMapped_item::mapping_target_() const {
    return (SdaiRepresentation_item_ptr) _mapping_target;
}

void SdaiMapped_item::mapping_target_( const SdaiRepresentation_item_ptr x ) {
    _mapping_target = x;
}

void init_SdaiMapped_item( Registry& reg ) {
    std::string str;

    config_control_design::e_mapped_item->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "acyclic_mapped_representation( using_representations( SELF ), [SELF] )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_mapped_item->_where_rules->Append( wr );
    config_control_design::e_mapped_item->AddSupertype(config_control_design::e_representation_item);
    config_control_design::e_representation_item->AddSubtype(config_control_design::e_mapped_item);
    config_control_design::a_242mapping_source =
      new AttrDescriptor( "mapping_source", config_control_design::e_representation_map, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_mapped_item);
        config_control_design::e_mapped_item->AddExplicitAttr (config_control_design::a_242mapping_source);
    config_control_design::a_243mapping_target =
      new AttrDescriptor( "mapping_target", config_control_design::e_representation_item, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_mapped_item);
        config_control_design::e_mapped_item->AddExplicitAttr (config_control_design::a_243mapping_target);
        reg.AddEntity( *config_control_design::e_mapped_item );
}

#endif
