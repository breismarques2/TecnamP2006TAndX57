#ifndef  ENTITY_SDAIB_SPLINE_CURVE_CC
#define  ENTITY_SDAIB_SPLINE_CURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiB_spline_curve.h"

EntityDescriptor * config_control_design::e_b_spline_curve = 0;
AttrDescriptor * config_control_design::a_16degree = 0;
AttrDescriptor * config_control_design::a_17control_points_list = 0;
AttrDescriptor * config_control_design::a_18curve_form = 0;
AttrDescriptor * config_control_design::a_19closed_curve = 0;
AttrDescriptor * config_control_design::a_20self_intersect = 0;
Derived_attribute * config_control_design::a_21Dupper_index_on_control_points = 0;
Derived_attribute * config_control_design::a_22Dcontrol_points = 0;

SdaiB_spline_curve::SdaiB_spline_curve(): SdaiBounded_curve(), _control_points_list( 0 ) {
        /*  parent: SdaiBounded_curve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_b_spline_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_16degree, & _degree );
    a->set_null();
    attributes.push( a );
    _control_points_list = new EntityAggregate;
    a = new STEPattribute( * config_control_design::a_17control_points_list, _control_points_list );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_18curve_form, & _curve_form );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_19closed_curve, & _closed_curve );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_20self_intersect, & _self_intersect );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "upper_index_on_control_points", "b_spline_curve" );
    MakeDerived( "control_points", "b_spline_curve" );
}

SdaiB_spline_curve::SdaiB_spline_curve ( SdaiB_spline_curve & e ) : SdaiBounded_curve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiB_spline_curve::~SdaiB_spline_curve() {
    delete _control_points_list;
}

SdaiB_spline_curve::SdaiB_spline_curve( SDAI_Application_instance * se, bool addAttrs ) : SdaiBounded_curve( se, addAttrs ), _control_points_list( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiBounded_curve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_b_spline_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_16degree,  &_degree );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _control_points_list = new EntityAggregate;
    a = new STEPattribute( * config_control_design::a_17control_points_list,  _control_points_list );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_18curve_form,  &_curve_form );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_19closed_curve,  &_closed_curve );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_20self_intersect,  &_self_intersect );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "upper_index_on_control_points", "b_spline_curve" );
    MakeDerived( "control_points", "b_spline_curve" );
}


SDAI_Integer SdaiB_spline_curve::degree_() const {
    return (const SDAI_Integer) _degree;
}

void SdaiB_spline_curve::degree_( const SDAI_Integer x ) {
    _degree = x;
}

EntityAggregate_ptr SdaiB_spline_curve::control_points_list_() {
    if( !_control_points_list ) {
        _control_points_list = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _control_points_list;
}

EntityAggregate_ptr_c SdaiB_spline_curve::control_points_list_() const {
    return ( EntityAggregate_ptr ) _control_points_list;
}

void SdaiB_spline_curve::control_points_list_( const EntityAggregate_ptr x ) {
    if( !_control_points_list ) {
        _control_points_list = new EntityAggregate;
    }
    _control_points_list->ShallowCopy( * x );
}

SdaiB_spline_curve_form_var SdaiB_spline_curve::curve_form_() {
    return (B_spline_curve_form) _curve_form;
}

const SdaiB_spline_curve_form_var SdaiB_spline_curve::curve_form_() const {
    return (const B_spline_curve_form) _curve_form;
}

void SdaiB_spline_curve::curve_form_( const SdaiB_spline_curve_form_var x ) {
    _curve_form.put( x );
}

Logical SdaiB_spline_curve::closed_curve_() const {
    return (const Logical) _closed_curve;
}

void SdaiB_spline_curve::closed_curve_( const Logical x ) {
    _closed_curve.put (x);
}

Logical SdaiB_spline_curve::self_intersect_() const {
    return (const Logical) _self_intersect;
}

void SdaiB_spline_curve::self_intersect_( const Logical x ) {
    _self_intersect.put (x);
}

void init_SdaiB_spline_curve( Registry& reg ) {
    std::string str;

    config_control_design::e_b_spline_curve->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "( 'CONFIG_CONTROL_DESIGN.UNIFORM_CURVE' IN TYPEOF( SELF ) ) OR ( 'CONFIG_CONTROL_DESIGN.QUASI_UNIFORM_CURVE' IN TYPEOF( SELF ) ) \n" );
    str.append( "      OR ( 'CONFIG_CONTROL_DESIGN.BEZIER_CURVE' IN TYPEOF( SELF ) ) OR ( 'CONFIG_CONTROL_DESIGN.B_SPLINE_CURVE_WITH_KNOTS' IN \n" );
    str.append( "      TYPEOF( SELF ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_b_spline_curve->_where_rules->Append( wr );
    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( uniform_curve, b_spline_curve_with_knots, quasi_uniform_curve, bezier_curve ) ANDOR rational_b_spline_curve\n" );
    str.append( ")" );
    config_control_design::e_b_spline_curve->AddSupertype_Stmt( str );
    config_control_design::e_b_spline_curve->AddSupertype(config_control_design::e_bounded_curve);
    config_control_design::e_bounded_curve->AddSubtype(config_control_design::e_b_spline_curve);
        config_control_design::a_16degree =
          new AttrDescriptor("degree",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_curve);
        config_control_design::e_b_spline_curve->AddExplicitAttr (config_control_design::a_16degree);
        ListTypeDescriptor * t_2 = new ListTypeDescriptor;
        t_2->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_2->SetBound1( 2 );
        t_2->SetBound2( 2147483647 );
        t_2->FundamentalType(LIST_TYPE);
        t_2->Description("LIST [2:?] OF cartesian_point");
        t_2->OriginatingSchema(config_control_design::schema);
        t_2->ReferentType(config_control_design::e_cartesian_point);
        config_control_design::schema->AddUnnamedType(t_2);
        config_control_design::a_17control_points_list =
          new AttrDescriptor("control_points_list",t_2,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_curve);
        config_control_design::e_b_spline_curve->AddExplicitAttr (config_control_design::a_17control_points_list);
        config_control_design::a_18curve_form =
          new AttrDescriptor("curve_form",config_control_design::t_b_spline_curve_form,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_curve);
        config_control_design::e_b_spline_curve->AddExplicitAttr (config_control_design::a_18curve_form);
        config_control_design::a_19closed_curve =
          new AttrDescriptor("closed_curve",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_curve);
        config_control_design::e_b_spline_curve->AddExplicitAttr (config_control_design::a_19closed_curve);
        config_control_design::a_20self_intersect =
          new AttrDescriptor("self_intersect",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_curve);
        config_control_design::e_b_spline_curve->AddExplicitAttr (config_control_design::a_20self_intersect);
        config_control_design::a_21Dupper_index_on_control_points =
          new Derived_attribute("upper_index_on_control_points",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_b_spline_curve);
        config_control_design::e_b_spline_curve->AddExplicitAttr (config_control_design::a_21Dupper_index_on_control_points);
        config_control_design::a_21Dupper_index_on_control_points->initializer_("SIZEOF( control_points_list ) - 1");
        ArrayTypeDescriptor * t_3 = new ArrayTypeDescriptor;
        t_3->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_3->SetBound1( 0 );
        t_3->SetBound2( -1962471776 );
        t_3->FundamentalType(ARRAY_TYPE);
        t_3->Description("ARRAY [0:upper_index_on_control_points] OF cartesian_point");
        t_3->OriginatingSchema(config_control_design::schema);
        t_3->ReferentType(config_control_design::e_cartesian_point);
        config_control_design::schema->AddUnnamedType(t_3);
        config_control_design::a_22Dcontrol_points =
          new Derived_attribute("control_points",t_3,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_b_spline_curve);
        config_control_design::e_b_spline_curve->AddExplicitAttr (config_control_design::a_22Dcontrol_points);
        config_control_design::a_22Dcontrol_points->initializer_("list_to_array( control_points_list, 0, upper_index_on_control_points )");
        reg.AddEntity( *config_control_design::e_b_spline_curve );
}

#endif
