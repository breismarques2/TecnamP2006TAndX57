#ifndef  ENTITY_SDAIDEGENERATE_TOROIDAL_SURFACE_CC
#define  ENTITY_SDAIDEGENERATE_TOROIDAL_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDegenerate_toroidal_surface.h"

EntityDescriptor * config_control_design::e_degenerate_toroidal_surface = 0;
AttrDescriptor * config_control_design::a_177select_outer = 0;

SdaiDegenerate_toroidal_surface::SdaiDegenerate_toroidal_surface(): SdaiToroidal_surface() {
        /*  parent: SdaiToroidal_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_degenerate_toroidal_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_177select_outer, & _select_outer );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiDegenerate_toroidal_surface::SdaiDegenerate_toroidal_surface ( SdaiDegenerate_toroidal_surface & e ) : SdaiToroidal_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDegenerate_toroidal_surface::~SdaiDegenerate_toroidal_surface() {
}

SdaiDegenerate_toroidal_surface::SdaiDegenerate_toroidal_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiToroidal_surface( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiToroidal_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_degenerate_toroidal_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_177select_outer,  &_select_outer );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


Boolean SdaiDegenerate_toroidal_surface::select_outer_() const {
    return (const Boolean) _select_outer;
}

void SdaiDegenerate_toroidal_surface::select_outer_( const Boolean x ) {
    _select_outer.put (x);
}

void init_SdaiDegenerate_toroidal_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_degenerate_toroidal_surface->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "major_radius < minor_radius\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_degenerate_toroidal_surface->_where_rules->Append( wr );
    config_control_design::e_degenerate_toroidal_surface->AddSupertype(config_control_design::e_toroidal_surface);
    config_control_design::e_toroidal_surface->AddSubtype(config_control_design::e_degenerate_toroidal_surface);
        config_control_design::a_177select_outer =
          new AttrDescriptor("select_outer",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_degenerate_toroidal_surface);
        config_control_design::e_degenerate_toroidal_surface->AddExplicitAttr (config_control_design::a_177select_outer);
        reg.AddEntity( *config_control_design::e_degenerate_toroidal_surface );
}

#endif
