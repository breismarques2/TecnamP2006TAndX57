#ifndef  ENTITY_SDAICARTESIAN_POINT_CC
#define  ENTITY_SDAICARTESIAN_POINT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCartesian_point.h"

EntityDescriptor * config_control_design::e_cartesian_point = 0;
AttrDescriptor * config_control_design::a_267coordinates = 0;

SdaiCartesian_point::SdaiCartesian_point(): SdaiPoint(), _coordinates( 0 ) {
        /*  parent: SdaiPoint  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_cartesian_point;
    _coordinates = new RealAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_267coordinates, _coordinates );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiCartesian_point::SdaiCartesian_point ( SdaiCartesian_point & e ) : SdaiPoint() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCartesian_point::~SdaiCartesian_point() {
    delete _coordinates;
}

SdaiCartesian_point::SdaiCartesian_point( SDAI_Application_instance * se, bool addAttrs ) : SdaiPoint( se, addAttrs ), _coordinates( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiPoint */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_cartesian_point;
    _coordinates = new RealAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_267coordinates,  _coordinates );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


RealAggregate_ptr SdaiCartesian_point::coordinates_() {
    if( !_coordinates ) {
        _coordinates = new RealAggregate;
    }
    return ( RealAggregate_ptr ) _coordinates;
}

RealAggregate_ptr_c SdaiCartesian_point::coordinates_() const {
    return ( RealAggregate_ptr ) _coordinates;
}

void SdaiCartesian_point::coordinates_( const RealAggregate_ptr x ) {
    if( !_coordinates ) {
        _coordinates = new RealAggregate;
    }
    _coordinates->ShallowCopy( * x );
}

void init_SdaiCartesian_point( Registry& reg ) {
    std::string str;

    config_control_design::e_cartesian_point->AddSupertype(config_control_design::e_point);
    config_control_design::e_point->AddSubtype(config_control_design::e_cartesian_point);
        ListTypeDescriptor * t_48 = new ListTypeDescriptor;
        t_48->AssignAggrCreator((AggregateCreator) create_RealAggregate);        // Creator function
        t_48->SetBound1( 1 );
        t_48->SetBound2( 3 );
        t_48->FundamentalType(LIST_TYPE);
        t_48->Description("LIST [1:3] OF length_measure");
        t_48->OriginatingSchema(config_control_design::schema);
        t_48->ReferentType(config_control_design::t_length_measure);
        config_control_design::schema->AddUnnamedType(t_48);
        config_control_design::a_267coordinates =
          new AttrDescriptor("coordinates",t_48,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_cartesian_point);
        config_control_design::e_cartesian_point->AddExplicitAttr (config_control_design::a_267coordinates);
        reg.AddEntity( *config_control_design::e_cartesian_point );
}

#endif
