#ifndef  ENTITY_SDAIVECTOR_CC
#define  ENTITY_SDAIVECTOR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiVector.h"

EntityDescriptor * config_control_design::e_vector = 0;
AttrDescriptor * config_control_design::a_250orientation = 0;
AttrDescriptor * config_control_design::a_251magnitude = 0;

SdaiVector::SdaiVector(): SdaiGeometric_representation_item(), _orientation( 0 ) {
        /*  parent: SdaiGeometric_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_vector;
    STEPattribute * a = new STEPattribute( * config_control_design::a_250orientation, ( SDAI_Application_instance_ptr * ) & _orientation );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_251magnitude, & _magnitude );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiVector::SdaiVector ( SdaiVector & e ) : SdaiGeometric_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiVector::~SdaiVector() {
}

SdaiVector::SdaiVector( SDAI_Application_instance * se, bool addAttrs ) : SdaiGeometric_representation_item( se, addAttrs ), _orientation( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiGeometric_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_vector;
    STEPattribute * a = new STEPattribute( * config_control_design::a_250orientation, ( SDAI_Application_instance_ptr * ) &_orientation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_251magnitude,  &_magnitude );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiDirection_ptr SdaiVector::orientation_() {
    if( !_orientation ) {
        _orientation = new SdaiDirection;
    }
    return (SdaiDirection_ptr) _orientation;
}

SdaiDirection_ptr_c SdaiVector::orientation_() const {
    return (SdaiDirection_ptr) _orientation;
}

void SdaiVector::orientation_( const SdaiDirection_ptr x ) {
    _orientation = x;
}

SdaiLength_measure SdaiVector::magnitude_() const {
    return (SdaiLength_measure) _magnitude;
}

void SdaiVector::magnitude_( const SdaiLength_measure x ) {
    _magnitude = x;
}

void init_SdaiVector( Registry& reg ) {
    std::string str;

    config_control_design::e_vector->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "magnitude >= 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_vector->_where_rules->Append( wr );
    config_control_design::e_vector->AddSupertype(config_control_design::e_geometric_representation_item);
    config_control_design::e_geometric_representation_item->AddSubtype(config_control_design::e_vector);
    config_control_design::a_250orientation =
      new AttrDescriptor( "orientation", config_control_design::e_direction, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_vector);
        config_control_design::e_vector->AddExplicitAttr (config_control_design::a_250orientation);
        config_control_design::a_251magnitude =
          new AttrDescriptor("magnitude",config_control_design::t_length_measure,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_vector);
        config_control_design::e_vector->AddExplicitAttr (config_control_design::a_251magnitude);
        reg.AddEntity( *config_control_design::e_vector );
}

#endif
