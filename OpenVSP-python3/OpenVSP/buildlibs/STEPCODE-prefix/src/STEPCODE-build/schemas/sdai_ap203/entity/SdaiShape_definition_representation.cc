#ifndef  ENTITY_SDAISHAPE_DEFINITION_REPRESENTATION_CC
#define  ENTITY_SDAISHAPE_DEFINITION_REPRESENTATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiShape_definition_representation.h"

EntityDescriptor * config_control_design::e_shape_definition_representation = 0;

SdaiShape_definition_representation::SdaiShape_definition_representation(): SdaiProperty_definition_representation() {
        /*  parent: SdaiProperty_definition_representation  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_shape_definition_representation;
}

SdaiShape_definition_representation::SdaiShape_definition_representation ( SdaiShape_definition_representation & e ) : SdaiProperty_definition_representation() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiShape_definition_representation::~SdaiShape_definition_representation() {
}

SdaiShape_definition_representation::SdaiShape_definition_representation( SDAI_Application_instance * se, bool addAttrs ) : SdaiProperty_definition_representation( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiProperty_definition_representation */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_shape_definition_representation;
}


void init_SdaiShape_definition_representation( Registry& reg ) {
    std::string str;

    config_control_design::e_shape_definition_representation->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "( 'CONFIG_CONTROL_DESIGN.SHAPE_DEFINITION' IN TYPEOF( SELF.definition.definition ) ) OR ( 'CONFIG_CONTROL_DESIGN.'\n" );
    str.append( "      + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( SELF.definition ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_shape_definition_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( " 'CONFIG_CONTROL_DESIGN.SHAPE_REPRESENTATION' IN TYPEOF( SELF.used_representation )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_shape_definition_representation->_where_rules->Append( wr );
    config_control_design::e_shape_definition_representation->AddSupertype(config_control_design::e_property_definition_representation);
    config_control_design::e_property_definition_representation->AddSubtype(config_control_design::e_shape_definition_representation);
        reg.AddEntity( *config_control_design::e_shape_definition_representation );
}

#endif
