#ifndef  ENTITY_SDAIPOINT_ON_SURFACE_CC
#define  ENTITY_SDAIPOINT_ON_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPoint_on_surface.h"

EntityDescriptor * config_control_design::e_point_on_surface = 0;
AttrDescriptor * config_control_design::a_189basis_surface = 0;
AttrDescriptor * config_control_design::a_190point_parameter_u = 0;
AttrDescriptor * config_control_design::a_191point_parameter_v = 0;

SdaiPoint_on_surface::SdaiPoint_on_surface(): SdaiPoint(), _basis_surface( 0 ) {
        /*  parent: SdaiPoint  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_point_on_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_189basis_surface, ( SDAI_Application_instance_ptr * ) & _basis_surface );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_190point_parameter_u, & _point_parameter_u );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_191point_parameter_v, & _point_parameter_v );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiPoint_on_surface::SdaiPoint_on_surface ( SdaiPoint_on_surface & e ) : SdaiPoint() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPoint_on_surface::~SdaiPoint_on_surface() {
}

SdaiPoint_on_surface::SdaiPoint_on_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiPoint( se, addAttrs ), _basis_surface( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiPoint */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_point_on_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_189basis_surface, ( SDAI_Application_instance_ptr * ) &_basis_surface );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_190point_parameter_u,  &_point_parameter_u );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_191point_parameter_v,  &_point_parameter_v );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiSurface_ptr SdaiPoint_on_surface::basis_surface_() {
    if( !_basis_surface ) {
        _basis_surface = new SdaiSurface;
    }
    return (SdaiSurface_ptr) _basis_surface;
}

SdaiSurface_ptr_c SdaiPoint_on_surface::basis_surface_() const {
    return (SdaiSurface_ptr) _basis_surface;
}

void SdaiPoint_on_surface::basis_surface_( const SdaiSurface_ptr x ) {
    _basis_surface = x;
}

SdaiParameter_value SdaiPoint_on_surface::point_parameter_u_() const {
    return (SdaiParameter_value) _point_parameter_u;
}

void SdaiPoint_on_surface::point_parameter_u_( const SdaiParameter_value x ) {
    _point_parameter_u = x;
}

SdaiParameter_value SdaiPoint_on_surface::point_parameter_v_() const {
    return (SdaiParameter_value) _point_parameter_v;
}

void SdaiPoint_on_surface::point_parameter_v_( const SdaiParameter_value x ) {
    _point_parameter_v = x;
}

void init_SdaiPoint_on_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_point_on_surface->AddSupertype(config_control_design::e_point);
    config_control_design::e_point->AddSubtype(config_control_design::e_point_on_surface);
    config_control_design::a_189basis_surface =
      new AttrDescriptor( "basis_surface", config_control_design::e_surface, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_point_on_surface);
        config_control_design::e_point_on_surface->AddExplicitAttr (config_control_design::a_189basis_surface);
        config_control_design::a_190point_parameter_u =
          new AttrDescriptor("point_parameter_u",config_control_design::t_parameter_value,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_point_on_surface);
        config_control_design::e_point_on_surface->AddExplicitAttr (config_control_design::a_190point_parameter_u);
        config_control_design::a_191point_parameter_v =
          new AttrDescriptor("point_parameter_v",config_control_design::t_parameter_value,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_point_on_surface);
        config_control_design::e_point_on_surface->AddExplicitAttr (config_control_design::a_191point_parameter_v);
        reg.AddEntity( *config_control_design::e_point_on_surface );
}

#endif
