#ifndef  ENTITY_SDAIITEM_DEFINED_TRANSFORMATION_CC
#define  ENTITY_SDAIITEM_DEFINED_TRANSFORMATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiItem_defined_transformation.h"

EntityDescriptor * config_control_design::e_item_defined_transformation = 0;
AttrDescriptor * config_control_design::a_44name = 0;
AttrDescriptor * config_control_design::a_45description = 0;
AttrDescriptor * config_control_design::a_46transform_item_1 = 0;
AttrDescriptor * config_control_design::a_47transform_item_2 = 0;

SdaiItem_defined_transformation::SdaiItem_defined_transformation() : _transform_item_1( 0 ), _transform_item_2( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_item_defined_transformation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_44name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_45description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_46transform_item_1, ( SDAI_Application_instance_ptr * ) & _transform_item_1 );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_47transform_item_2, ( SDAI_Application_instance_ptr * ) & _transform_item_2 );
    a->set_null();
    attributes.push( a );
}

SdaiItem_defined_transformation::SdaiItem_defined_transformation ( SdaiItem_defined_transformation & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiItem_defined_transformation::~SdaiItem_defined_transformation() {
}

SdaiItem_defined_transformation::SdaiItem_defined_transformation( SDAI_Application_instance * se, bool addAttrs ) : _transform_item_1( 0 ), _transform_item_2( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_item_defined_transformation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_44name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_45description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_46transform_item_1, ( SDAI_Application_instance_ptr * ) &_transform_item_1 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_47transform_item_2, ( SDAI_Application_instance_ptr * ) &_transform_item_2 );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiItem_defined_transformation::name_() {
    return _name;
}

const SdaiLabel SdaiItem_defined_transformation::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiItem_defined_transformation::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiItem_defined_transformation::description_() {
    return _description;
}

const SdaiText SdaiItem_defined_transformation::description_() const {
    return (const SdaiText) _description;
}

void SdaiItem_defined_transformation::description_( const SdaiText x ) {
    _description = x;
}

SdaiRepresentation_item_ptr SdaiItem_defined_transformation::transform_item_1_() {
    if( !_transform_item_1 ) {
        _transform_item_1 = new SdaiRepresentation_item;
    }
    return (SdaiRepresentation_item_ptr) _transform_item_1;
}

SdaiRepresentation_item_ptr_c SdaiItem_defined_transformation::transform_item_1_() const {
    return (SdaiRepresentation_item_ptr) _transform_item_1;
}

void SdaiItem_defined_transformation::transform_item_1_( const SdaiRepresentation_item_ptr x ) {
    _transform_item_1 = x;
}

SdaiRepresentation_item_ptr SdaiItem_defined_transformation::transform_item_2_() {
    if( !_transform_item_2 ) {
        _transform_item_2 = new SdaiRepresentation_item;
    }
    return (SdaiRepresentation_item_ptr) _transform_item_2;
}

SdaiRepresentation_item_ptr_c SdaiItem_defined_transformation::transform_item_2_() const {
    return (SdaiRepresentation_item_ptr) _transform_item_2;
}

void SdaiItem_defined_transformation::transform_item_2_( const SdaiRepresentation_item_ptr x ) {
    _transform_item_2 = x;
}

void init_SdaiItem_defined_transformation( Registry& reg ) {
    std::string str;

        config_control_design::a_44name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_item_defined_transformation);
        config_control_design::e_item_defined_transformation->AddExplicitAttr (config_control_design::a_44name);
        config_control_design::a_45description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_item_defined_transformation);
        config_control_design::e_item_defined_transformation->AddExplicitAttr (config_control_design::a_45description);
    config_control_design::a_46transform_item_1 =
      new AttrDescriptor( "transform_item_1", config_control_design::e_representation_item, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_item_defined_transformation);
        config_control_design::e_item_defined_transformation->AddExplicitAttr (config_control_design::a_46transform_item_1);
    config_control_design::a_47transform_item_2 =
      new AttrDescriptor( "transform_item_2", config_control_design::e_representation_item, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_item_defined_transformation);
        config_control_design::e_item_defined_transformation->AddExplicitAttr (config_control_design::a_47transform_item_2);
        reg.AddEntity( *config_control_design::e_item_defined_transformation );
}

#endif
