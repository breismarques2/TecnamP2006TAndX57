#ifndef  TYPE_SDAIPREFERRED_SURFACE_CURVE_REPRESENTATION_VAR_CC
#define  TYPE_SDAIPREFERRED_SURFACE_CURVE_REPRESENTATION_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiPreferred_surface_curve_representation_var.h"

const char *
SdaiPreferred_surface_curve_representation_var::element_at (int n) const  {
  switch (n)  {
  case Preferred_surface_curve_representation__curve_3d:  return "CURVE_3D";
  case Preferred_surface_curve_representation__pcurve_s2:  return "PCURVE_S2";
  case Preferred_surface_curve_representation__pcurve_s1:  return "PCURVE_S1";
  case Preferred_surface_curve_representation_unset        :
  default                :  return "UNSET";
  }
}

SdaiPreferred_surface_curve_representation_var::SdaiPreferred_surface_curve_representation_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiPreferred_surface_curve_representation_var::operator Preferred_surface_curve_representation () const {
  switch (v) {
        case Preferred_surface_curve_representation__curve_3d        :  return Preferred_surface_curve_representation__curve_3d;
        case Preferred_surface_curve_representation__pcurve_s2        :  return Preferred_surface_curve_representation__pcurve_s2;
        case Preferred_surface_curve_representation__pcurve_s1        :  return Preferred_surface_curve_representation__pcurve_s1;
        case Preferred_surface_curve_representation_unset        :
        default                :  return Preferred_surface_curve_representation_unset;
  }
}

SDAI_Enum *
create_SdaiPreferred_surface_curve_representation_var ()
{
    return new SdaiPreferred_surface_curve_representation_var( "", config_control_design::t_preferred_surface_curve_representation );
}


SdaiPreferred_surface_curve_representation_var_agg::SdaiPreferred_surface_curve_representation_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiPreferred_surface_curve_representation_var_agg::~SdaiPreferred_surface_curve_representation_var_agg()
{
}

STEPaggregate *
create_SdaiPreferred_surface_curve_representation_var_agg ()
{
    return new SdaiPreferred_surface_curve_representation_var_agg( config_control_design::t_preferred_surface_curve_representation );
}

void init_SdaiPreferred_surface_curve_representation_var( Registry& reg ) {
    std::string str;
        config_control_design::t_preferred_surface_curve_representation = new EnumTypeDescriptor (
                  "Preferred_Surface_Curve_Representation",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (curve_3d, pcurve_s1, pcurve_s2)",        // Description
                  (EnumCreator) create_SdaiPreferred_surface_curve_representation_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_preferred_surface_curve_representation);
    reg.AddType (*config_control_design::t_preferred_surface_curve_representation);
}

#endif
