#ifndef  TYPE_SDAITRIMMING_SELECT_CC
#define  TYPE_SDAITRIMMING_SELECT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiTrimming_select.h"


//////////  SELECT TYPE trimming_select

const TypeDescriptor * 
SdaiTrimming_select::AssignEntity (SDAI_Application_instance * se)
{
  (void)se;
  //  CARTESIAN_POINT
  if (se -> IsA (config_control_design::e_cartesian_point))
  {  
    _app_inst = (SdaiCartesian_point_ptr) se;
    return SetUnderlyingType (config_control_design::e_cartesian_point);
  }
  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
  std::cerr << se -> EntityName () << std::endl;
#endif
  return 0;
}

SDAI_Select * 
SdaiTrimming_select::NewSelect ()
{
    SdaiTrimming_select * tmp = new SdaiTrimming_select();
    return tmp;
}


// STEP Part 21

void
SdaiTrimming_select::STEPwrite_content (ostream& out, const char * currSch) const {
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::e_cartesian_point) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::t_parameter_value) {
        WriteReal(_real,out);
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
}

BASE_TYPE
SdaiTrimming_select::ValueType() const {
    if (CurrentUnderlyingType() == config_control_design::e_cartesian_point)
        return sdaiINSTANCE;
    if (CurrentUnderlyingType() == config_control_design::t_parameter_value)
        return sdaiREAL;
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return (BASE_TYPE)0;
}

void
SdaiTrimming_select::STEPwrite_verbose (ostream& out, const char *currSch) const
{
    const TypeDescriptor *td = CurrentUnderlyingType();
    std::string tmp;

    if ( td ) {
        // If we have a legal underlying type, get its name acc
        // to the current schema.
        StrToUpper( td->Name(currSch), tmp );
    }
    if (td == config_control_design::e_cartesian_point) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    if (td == config_control_design::t_parameter_value) {
        out << tmp << "(";
        WriteReal(_real,out);
        out << ")";
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return;
}

Severity
SdaiTrimming_select::STEPread_content (istream& in, InstMgrBase * instances,
            const char *utype, int addFileId, const char *currSch)
{
  (void)instances;
  (void)utype;
  (void)addFileId;
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::e_cartesian_point) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }
    if (CurrentUnderlyingType () == config_control_design::t_parameter_value) {
        ReadReal (_real, in, &_error, "),");
        return severity ();
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
    return severity ();
}

Severity
SdaiTrimming_select::StrToVal_content (const char * str, InstMgrBase * instances)
{
  (void)str;
  (void)instances;
  switch (base_type)  {
  default:  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
std::cerr << str << "  " << instances << std::endl;
#endif
    return SEVERITY_WARNING;
  }
#ifdef __GNUG__

  return SEVERITY_NULL;
#endif
}

// STEP Part 22:  SDAI

    //  part 0
SdaiTrimming_select::SdaiTrimming_select( const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript)
{
#ifdef SC_LOGGING
    if( *logStream )
    {
    *logStream << "DAVE ERR entering SdaiTrimming_select constructor." << std::endl;
    }
#endif
   nullify();
#ifdef SC_LOGGING
    if( *logStream )
    {
//    *logStream << "DAVE ERR exiting SdaiTrimming_select constructor." << std::endl;
    }
#endif
}

    //  part 1
SdaiTrimming_select::SdaiTrimming_select( const SdaiCartesian_point_ptr& o,
                                          const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_cartesian_point)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiTrimming_select constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiTrimming_select constructor." << std::endl; }
#endif
}

SdaiTrimming_select::SdaiTrimming_select( const SdaiParameter_value& o,
                                          const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::t_parameter_value)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiTrimming_select constructor." << std::endl; }
#endif
   _real = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiTrimming_select constructor." << std::endl; }
#endif
}

SdaiTrimming_select::~SdaiTrimming_select() {
}

SdaiTrimming_select_agg::SdaiTrimming_select_agg( SelectTypeDescriptor *s)
  : SelectAggregate(), sel_type(s)
{
}

SdaiTrimming_select_agg::~SdaiTrimming_select_agg() { }


    //  part 2
SdaiTrimming_select::operator SdaiCartesian_point_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_cartesian_point )
      return ((SdaiCartesian_point_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}

SdaiTrimming_select::operator SdaiParameter_value()
{
   if( CurrentUnderlyingType () == config_control_design::t_parameter_value )
      return  _real;

   severity( SEVERITY_WARNING );
   Error( "Underlying type is not SdaiParameter_value" );

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return 0;
}


    //  part 3

RealAggregate_ptr SdaiTrimming_select::coordinates_() {
  if( CurrentUnderlyingType () == config_control_design::e_cartesian_point ) 
    //  CARTESIAN_POINT
    return ((SdaiCartesian_point_ptr) _app_inst) ->coordinates_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


RealAggregate_ptr_c SdaiTrimming_select::coordinates_() const {
  if( CurrentUnderlyingType () == config_control_design::e_cartesian_point ) 
    //  CARTESIAN_POINT
    return ((const SdaiCartesian_point_ptr) _app_inst) ->coordinates_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiTrimming_select::coordinates_( const RealAggregate_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_cartesian_point ) 
    //  CARTESIAN_POINT
    {  ((SdaiCartesian_point_ptr) _app_inst) ->coordinates_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiLabel SdaiTrimming_select::name_() {
  if( CurrentUnderlyingType () == config_control_design::e_cartesian_point ) 
    //  CARTESIAN_POINT
    return ((SdaiCartesian_point_ptr) _app_inst) ->name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


const SdaiLabel SdaiTrimming_select::name_() const {
  if( CurrentUnderlyingType () == config_control_design::e_cartesian_point ) 
    //  CARTESIAN_POINT
    return ((const SdaiCartesian_point_ptr) _app_inst) ->name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiTrimming_select::name_( const SdaiLabel x ) {
  if( CurrentUnderlyingType () == config_control_design::e_cartesian_point ) 
    //  CARTESIAN_POINT
    {  ((SdaiCartesian_point_ptr) _app_inst) ->name_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

    //  part 4
SdaiTrimming_select& SdaiTrimming_select::operator =( const SdaiCartesian_point_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_cartesian_point );
   return *this;
}

SdaiTrimming_select& SdaiTrimming_select::operator =( const SdaiParameter_value& o )
{
   nullify ();
   _real = o;
   SetUnderlyingType( config_control_design::t_parameter_value );
   return *this;
}


#ifndef COMPILER_DEFINES_OPERATOR_EQ

SdaiTrimming_select& SdaiTrimming_select::operator =( const SdaiTrimming_select_ptr& o ) {
    SDAI_Select::operator=( *o );
    if ( o -> CurrentUnderlyingType() == config_control_design::e_cartesian_point ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::t_parameter_value ) {
        _real =  o -> _real;
        return *this;
    }
    return *this;
}

SDAI_Select& SdaiTrimming_select::operator =( const SDAI_Select& o ) {
    SDAI_Select::operator=( o );
    if ( o.CurrentUnderlyingType() == config_control_design::e_cartesian_point ) {
        _app_inst = ( ( SdaiTrimming_select& ) o )._app_inst;
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::t_parameter_value ) {
        _real = ( ( SdaiTrimming_select& ) o )._real;
        return *this;
    }
   return *this;
}

#endif //ndef COMPILER_DEFINES_OPERATOR_EQ

    //  part 5
Logical SdaiTrimming_select::IsCartesian_point() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_cartesian_point )
      return LTrue;
   return LFalse;
}

Logical SdaiTrimming_select::IsParameter_value() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::t_parameter_value )
      return LTrue;
   return LFalse;
}

//////////  END SELECT TYPE SdaiTrimming_select


void init_SdaiTrimming_select( Registry& reg ) {
    std::string str;
        config_control_design::t_trimming_select = new SelectTypeDescriptor (
                  ~(0),        //unique elements,
                  "Trimming_Select",        // Name
                  sdaiSELECT,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "SELECT (Cartesian_Point, Parameter_Value)",        // Description
                  (SelectCreator) create_SdaiTrimming_select);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_trimming_select);
    config_control_design::t_trimming_select -> Elements ().AddNode (config_control_design::e_cartesian_point);
    config_control_design::t_trimming_select -> Elements ().AddNode (config_control_design::t_parameter_value);
    reg.AddType (*config_control_design::t_trimming_select);
}

#endif
