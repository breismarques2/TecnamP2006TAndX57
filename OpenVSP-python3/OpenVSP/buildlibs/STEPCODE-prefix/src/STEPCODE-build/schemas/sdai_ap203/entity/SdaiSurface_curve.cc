#ifndef  ENTITY_SDAISURFACE_CURVE_CC
#define  ENTITY_SDAISURFACE_CURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiSurface_curve.h"

EntityDescriptor * config_control_design::e_surface_curve = 0;
AttrDescriptor * config_control_design::a_167curve_3d = 0;
AttrDescriptor * config_control_design::a_168associated_geometry = 0;
AttrDescriptor * config_control_design::a_169master_representation = 0;
Derived_attribute * config_control_design::a_170Dbasis_surface = 0;

SdaiSurface_curve::SdaiSurface_curve(): SdaiCurve(), _curve_3d( 0 ), _associated_geometry( 0 ) {
        /*  parent: SdaiCurve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_surface_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_167curve_3d, ( SDAI_Application_instance_ptr * ) & _curve_3d );
    a->set_null();
    attributes.push( a );
    _associated_geometry = new SdaiPcurve_or_surface_agg;
    a = new STEPattribute( * config_control_design::a_168associated_geometry, _associated_geometry );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_169master_representation, & _master_representation );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "basis_surface", "surface_curve" );
}

SdaiSurface_curve::SdaiSurface_curve ( SdaiSurface_curve & e ) : SdaiCurve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiSurface_curve::~SdaiSurface_curve() {
    delete _associated_geometry;
}

SdaiSurface_curve::SdaiSurface_curve( SDAI_Application_instance * se, bool addAttrs ) : SdaiCurve( se, addAttrs ), _curve_3d( 0 ), _associated_geometry( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiCurve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_surface_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_167curve_3d, ( SDAI_Application_instance_ptr * ) &_curve_3d );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _associated_geometry = new SdaiPcurve_or_surface_agg;
    a = new STEPattribute( * config_control_design::a_168associated_geometry,  _associated_geometry );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_169master_representation,  &_master_representation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "basis_surface", "surface_curve" );
}


SdaiCurve_ptr SdaiSurface_curve::curve_3d_() {
    if( !_curve_3d ) {
        _curve_3d = new SdaiCurve;
    }
    return (SdaiCurve_ptr) _curve_3d;
}

SdaiCurve_ptr_c SdaiSurface_curve::curve_3d_() const {
    return (SdaiCurve_ptr) _curve_3d;
}

void SdaiSurface_curve::curve_3d_( const SdaiCurve_ptr x ) {
    _curve_3d = x;
}

SdaiPcurve_or_surface_agg_ptr SdaiSurface_curve::associated_geometry_() {
    if( !_associated_geometry ) {
        _associated_geometry = new SdaiPcurve_or_surface_agg;
    }
    return ( SdaiPcurve_or_surface_agg_ptr ) _associated_geometry;
}

SdaiPcurve_or_surface_agg_ptr_c SdaiSurface_curve::associated_geometry_() const {
    return ( SdaiPcurve_or_surface_agg_ptr ) _associated_geometry;
}

void SdaiSurface_curve::associated_geometry_( const SdaiPcurve_or_surface_agg_ptr x ) {
    if( !_associated_geometry ) {
        _associated_geometry = new SdaiPcurve_or_surface_agg;
    }
    _associated_geometry->ShallowCopy( * x );
}

SdaiPreferred_surface_curve_representation_var SdaiSurface_curve::master_representation_() {
    return (Preferred_surface_curve_representation) _master_representation;
}

const SdaiPreferred_surface_curve_representation_var SdaiSurface_curve::master_representation_() const {
    return (const Preferred_surface_curve_representation) _master_representation;
}

void SdaiSurface_curve::master_representation_( const SdaiPreferred_surface_curve_representation_var x ) {
    _master_representation.put( x );
}

void init_SdaiSurface_curve( Registry& reg ) {
    std::string str;

    config_control_design::e_surface_curve->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "curve_3d.dim = 3\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_surface_curve->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "( 'CONFIG_CONTROL_DESIGN.PCURVE' IN TYPEOF( associated_geometry[1] ) ) OR ( master_representation <> pcurve_s1 )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_surface_curve->_where_rules->Append( wr );
        str.clear();
        str.append( "wr3: (" );
    str.append( "( 'CONFIG_CONTROL_DESIGN.PCURVE' IN TYPEOF( associated_geometry[2] ) ) OR ( master_representation <> pcurve_s2 )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_surface_curve->_where_rules->Append( wr );
        str.clear();
        str.append( "wr4: (" );
    str.append( "NOT ( 'CONFIG_CONTROL_DESIGN.PCURVE' IN TYPEOF( curve_3d ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_surface_curve->_where_rules->Append( wr );
    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( intersection_curve, seam_curve ) ANDOR bounded_surface_curve\n" );
    str.append( ")" );
    config_control_design::e_surface_curve->AddSupertype_Stmt( str );
    config_control_design::e_surface_curve->AddSupertype(config_control_design::e_curve);
    config_control_design::e_curve->AddSubtype(config_control_design::e_surface_curve);
    config_control_design::a_167curve_3d =
      new AttrDescriptor( "curve_3d", config_control_design::e_curve, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_surface_curve);
        config_control_design::e_surface_curve->AddExplicitAttr (config_control_design::a_167curve_3d);
        ListTypeDescriptor * t_32 = new ListTypeDescriptor;
        t_32->AssignAggrCreator((AggregateCreator) create_SdaiPcurve_or_surface_agg);        // Creator function
        t_32->SetBound1( 1 );
        t_32->SetBound2( 2 );
        t_32->FundamentalType(LIST_TYPE);
        t_32->Description("LIST [1:2] OF pcurve_or_surface");
        t_32->OriginatingSchema(config_control_design::schema);
        t_32->ReferentType(config_control_design::t_pcurve_or_surface);
        config_control_design::schema->AddUnnamedType(t_32);
        config_control_design::a_168associated_geometry =
          new AttrDescriptor("associated_geometry",t_32,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_surface_curve);
        config_control_design::e_surface_curve->AddExplicitAttr (config_control_design::a_168associated_geometry);
        config_control_design::a_169master_representation =
          new AttrDescriptor("master_representation",config_control_design::t_preferred_surface_curve_representation,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_surface_curve);
        config_control_design::e_surface_curve->AddExplicitAttr (config_control_design::a_169master_representation);
        SetTypeDescriptor * t_33 = new SetTypeDescriptor;
        t_33->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_33->SetBound1( 1 );
        t_33->SetBound2( 2 );
        t_33->FundamentalType(SET_TYPE);
        t_33->Description("SET [1:2] OF surface");
        t_33->OriginatingSchema(config_control_design::schema);
        t_33->ReferentType(config_control_design::e_surface);
        config_control_design::schema->AddUnnamedType(t_33);
        config_control_design::a_170Dbasis_surface =
          new Derived_attribute("basis_surface",t_33,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_surface_curve);
        config_control_design::e_surface_curve->AddExplicitAttr (config_control_design::a_170Dbasis_surface);
        config_control_design::a_170Dbasis_surface->initializer_("get_basis_surface( SELF )");
        reg.AddEntity( *config_control_design::e_surface_curve );
}

#endif
