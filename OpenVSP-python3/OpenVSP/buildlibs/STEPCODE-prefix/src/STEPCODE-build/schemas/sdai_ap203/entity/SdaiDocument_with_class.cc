#ifndef  ENTITY_SDAIDOCUMENT_WITH_CLASS_CC
#define  ENTITY_SDAIDOCUMENT_WITH_CLASS_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDocument_with_class.h"

EntityDescriptor * config_control_design::e_document_with_class = 0;
AttrDescriptor * config_control_design::a_39class = 0;

SdaiDocument_with_class::SdaiDocument_with_class(): SdaiDocument() {
        /*  parent: SdaiDocument  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_document_with_class;
    STEPattribute * a = new STEPattribute( * config_control_design::a_39class, & _class );
    a->set_null();
    attributes.push( a );
}

SdaiDocument_with_class::SdaiDocument_with_class ( SdaiDocument_with_class & e ) : SdaiDocument() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDocument_with_class::~SdaiDocument_with_class() {
}

SdaiDocument_with_class::SdaiDocument_with_class( SDAI_Application_instance * se, bool addAttrs ) : SdaiDocument( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiDocument */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_document_with_class;
    STEPattribute * a = new STEPattribute( * config_control_design::a_39class,  &_class );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiDocument_with_class::class_() {
    return _class;
}

const SdaiIdentifier SdaiDocument_with_class::class_() const {
    return (const SdaiIdentifier) _class;
}

void SdaiDocument_with_class::class_( const SdaiIdentifier x ) {
    _class = x;
}

void init_SdaiDocument_with_class( Registry& reg ) {
    std::string str;

    config_control_design::e_document_with_class->AddSupertype(config_control_design::e_document);
    config_control_design::e_document->AddSubtype(config_control_design::e_document_with_class);
        config_control_design::a_39class =
          new AttrDescriptor("class",config_control_design::t_identifier,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_document_with_class);
        config_control_design::e_document_with_class->AddExplicitAttr (config_control_design::a_39class);
        reg.AddEntity( *config_control_design::e_document_with_class );
}

#endif
