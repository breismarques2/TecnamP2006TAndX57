#ifndef  ENTITY_SDAIACTION_CC
#define  ENTITY_SDAIACTION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAction.h"

EntityDescriptor * config_control_design::e_action = 0;
AttrDescriptor * config_control_design::a_231name = 0;
AttrDescriptor * config_control_design::a_232description = 0;
AttrDescriptor * config_control_design::a_233chosen_method = 0;

SdaiAction::SdaiAction() : _chosen_method( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_action;
    STEPattribute * a = new STEPattribute( * config_control_design::a_231name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_232description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_233chosen_method, ( SDAI_Application_instance_ptr * ) & _chosen_method );
    a->set_null();
    attributes.push( a );
}

SdaiAction::SdaiAction ( SdaiAction & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAction::~SdaiAction() {
}

SdaiAction::SdaiAction( SDAI_Application_instance * se, bool addAttrs ) : _chosen_method( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_action;
    STEPattribute * a = new STEPattribute( * config_control_design::a_231name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_232description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_233chosen_method, ( SDAI_Application_instance_ptr * ) &_chosen_method );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiAction::name_() {
    return _name;
}

const SdaiLabel SdaiAction::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiAction::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiAction::description_() {
    return _description;
}

const SdaiText SdaiAction::description_() const {
    return (const SdaiText) _description;
}

void SdaiAction::description_( const SdaiText x ) {
    _description = x;
}

SdaiAction_method_ptr SdaiAction::chosen_method_() {
    if( !_chosen_method ) {
        _chosen_method = new SdaiAction_method;
    }
    return (SdaiAction_method_ptr) _chosen_method;
}

SdaiAction_method_ptr_c SdaiAction::chosen_method_() const {
    return (SdaiAction_method_ptr) _chosen_method;
}

void SdaiAction::chosen_method_( const SdaiAction_method_ptr x ) {
    _chosen_method = x;
}

void init_SdaiAction( Registry& reg ) {
    std::string str;

        config_control_design::a_231name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action);
        config_control_design::e_action->AddExplicitAttr (config_control_design::a_231name);
        config_control_design::a_232description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_action);
        config_control_design::e_action->AddExplicitAttr (config_control_design::a_232description);
    config_control_design::a_233chosen_method =
      new AttrDescriptor( "chosen_method", config_control_design::e_action_method, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_action);
        config_control_design::e_action->AddExplicitAttr (config_control_design::a_233chosen_method);
        reg.AddEntity( *config_control_design::e_action );
}

#endif
