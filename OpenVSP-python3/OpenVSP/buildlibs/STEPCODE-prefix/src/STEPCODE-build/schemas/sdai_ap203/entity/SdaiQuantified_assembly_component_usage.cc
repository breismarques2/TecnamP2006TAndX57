#ifndef  ENTITY_SDAIQUANTIFIED_ASSEMBLY_COMPONENT_USAGE_CC
#define  ENTITY_SDAIQUANTIFIED_ASSEMBLY_COMPONENT_USAGE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiQuantified_assembly_component_usage.h"

EntityDescriptor * config_control_design::e_quantified_assembly_component_usage = 0;
AttrDescriptor * config_control_design::a_259quantity = 0;

SdaiQuantified_assembly_component_usage::SdaiQuantified_assembly_component_usage(): SdaiAssembly_component_usage(), _quantity( 0 ) {
        /*  parent: SdaiAssembly_component_usage  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_quantified_assembly_component_usage;
    STEPattribute * a = new STEPattribute( * config_control_design::a_259quantity, ( SDAI_Application_instance_ptr * ) & _quantity );
    a->set_null();
    attributes.push( a );
}

SdaiQuantified_assembly_component_usage::SdaiQuantified_assembly_component_usage ( SdaiQuantified_assembly_component_usage & e ) : SdaiAssembly_component_usage() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiQuantified_assembly_component_usage::~SdaiQuantified_assembly_component_usage() {
}

SdaiQuantified_assembly_component_usage::SdaiQuantified_assembly_component_usage( SDAI_Application_instance * se, bool addAttrs ) : SdaiAssembly_component_usage( se, addAttrs ), _quantity( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiAssembly_component_usage */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_quantified_assembly_component_usage;
    STEPattribute * a = new STEPattribute( * config_control_design::a_259quantity, ( SDAI_Application_instance_ptr * ) &_quantity );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiMeasure_with_unit_ptr SdaiQuantified_assembly_component_usage::quantity_() {
    if( !_quantity ) {
        _quantity = new SdaiMeasure_with_unit;
    }
    return (SdaiMeasure_with_unit_ptr) _quantity;
}

SdaiMeasure_with_unit_ptr_c SdaiQuantified_assembly_component_usage::quantity_() const {
    return (SdaiMeasure_with_unit_ptr) _quantity;
}

void SdaiQuantified_assembly_component_usage::quantity_( const SdaiMeasure_with_unit_ptr x ) {
    _quantity = x;
}

void init_SdaiQuantified_assembly_component_usage( Registry& reg ) {
    std::string str;

    config_control_design::e_quantified_assembly_component_usage->AddSupertype(config_control_design::e_assembly_component_usage);
    config_control_design::e_assembly_component_usage->AddSubtype(config_control_design::e_quantified_assembly_component_usage);
    config_control_design::a_259quantity =
      new AttrDescriptor( "quantity", config_control_design::e_measure_with_unit, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_quantified_assembly_component_usage);
        config_control_design::e_quantified_assembly_component_usage->AddExplicitAttr (config_control_design::a_259quantity);
        reg.AddEntity( *config_control_design::e_quantified_assembly_component_usage );
}

#endif
