#ifndef  ENTITY_SDAIRECTANGULAR_COMPOSITE_SURFACE_CC
#define  ENTITY_SDAIRECTANGULAR_COMPOSITE_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRectangular_composite_surface.h"

EntityDescriptor * config_control_design::e_rectangular_composite_surface = 0;
AttrDescriptor * config_control_design::a_50segments = 0;
Derived_attribute * config_control_design::a_51Dn_u = 0;
Derived_attribute * config_control_design::a_52Dn_v = 0;

SdaiRectangular_composite_surface::SdaiRectangular_composite_surface(): SdaiBounded_surface(), _segments( 0 ) {
        /*  parent: SdaiBounded_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_rectangular_composite_surface;
    _segments = new GenericAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_50segments, _segments );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "n_u", "rectangular_composite_surface" );
    MakeDerived( "n_v", "rectangular_composite_surface" );
}

SdaiRectangular_composite_surface::SdaiRectangular_composite_surface ( SdaiRectangular_composite_surface & e ) : SdaiBounded_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRectangular_composite_surface::~SdaiRectangular_composite_surface() {
    delete _segments;
}

SdaiRectangular_composite_surface::SdaiRectangular_composite_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiBounded_surface( se, addAttrs ), _segments( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiBounded_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_rectangular_composite_surface;
    _segments = new GenericAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_50segments,  _segments );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "n_u", "rectangular_composite_surface" );
    MakeDerived( "n_v", "rectangular_composite_surface" );
}


GenericAggregate_ptr SdaiRectangular_composite_surface::segments_() {
    if( !_segments ) {
        _segments = new GenericAggregate;
    }
    return ( GenericAggregate_ptr ) _segments;
}

GenericAggregate_ptr_c SdaiRectangular_composite_surface::segments_() const {
    return ( GenericAggregate_ptr ) _segments;
}

void SdaiRectangular_composite_surface::segments_( const GenericAggregate_ptr x ) {
    if( !_segments ) {
        _segments = new GenericAggregate;
    }
    _segments->ShallowCopy( * x );
}

void init_SdaiRectangular_composite_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_rectangular_composite_surface->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "[] = QUERY ( s <* segments | ( n_v <> SIZEOF( s ) ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rectangular_composite_surface->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "constraints_rectangular_composite_surface( SELF )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_rectangular_composite_surface->_where_rules->Append( wr );
    config_control_design::e_rectangular_composite_surface->AddSupertype(config_control_design::e_bounded_surface);
    config_control_design::e_bounded_surface->AddSubtype(config_control_design::e_rectangular_composite_surface);
        ListTypeDescriptor * t_4 = new ListTypeDescriptor;
        t_4->AssignAggrCreator((AggregateCreator) create_GenericAggregate);        // Creator function
        t_4->SetBound1( 1 );
        t_4->SetBound2( 2147483647 );
        t_4->FundamentalType(LIST_TYPE);
        t_4->Description("LIST [1:?] OF LIST [1:?] OF surface_patch");
        t_4->OriginatingSchema(config_control_design::schema);
        ListTypeDescriptor * t_5 = new ListTypeDescriptor;
        t_5->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_5->SetBound1( 1 );
        t_5->SetBound2( 2147483647 );
        t_5->FundamentalType(LIST_TYPE);
        t_5->Description("LIST [1:?] OF surface_patch");
        t_5->OriginatingSchema(config_control_design::schema);
        t_5->ReferentType(config_control_design::e_surface_patch);
        config_control_design::schema->AddUnnamedType(t_5);
        t_4->ReferentType(t_5);
        config_control_design::schema->AddUnnamedType(t_4);
        config_control_design::a_50segments =
          new AttrDescriptor("segments",t_4,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_rectangular_composite_surface);
        config_control_design::e_rectangular_composite_surface->AddExplicitAttr (config_control_design::a_50segments);
        config_control_design::a_51Dn_u =
          new Derived_attribute("n_u",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_rectangular_composite_surface);
        config_control_design::e_rectangular_composite_surface->AddExplicitAttr (config_control_design::a_51Dn_u);
        config_control_design::a_51Dn_u->initializer_("SIZEOF( segments )");
        config_control_design::a_52Dn_v =
          new Derived_attribute("n_v",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_rectangular_composite_surface);
        config_control_design::e_rectangular_composite_surface->AddExplicitAttr (config_control_design::a_52Dn_v);
        config_control_design::a_52Dn_v->initializer_("SIZEOF( segments[1] )");
        reg.AddEntity( *config_control_design::e_rectangular_composite_surface );
}

#endif
