#ifndef  ENTITY_SDAIREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION_CC
#define  ENTITY_SDAIREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRepresentation_relationship_with_transformation.h"

EntityDescriptor * config_control_design::e_representation_relationship_with_transformation = 0;
AttrDescriptor * config_control_design::a_292transformation_operator = 0;

SdaiRepresentation_relationship_with_transformation::SdaiRepresentation_relationship_with_transformation(): SdaiRepresentation_relationship() {
        /*  parent: SdaiRepresentation_relationship  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_representation_relationship_with_transformation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_292transformation_operator, & _transformation_operator );
    a->set_null();
    attributes.push( a );
}

SdaiRepresentation_relationship_with_transformation::SdaiRepresentation_relationship_with_transformation ( SdaiRepresentation_relationship_with_transformation & e ) : SdaiRepresentation_relationship() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRepresentation_relationship_with_transformation::~SdaiRepresentation_relationship_with_transformation() {
}

SdaiRepresentation_relationship_with_transformation::SdaiRepresentation_relationship_with_transformation( SDAI_Application_instance * se, bool addAttrs ) : SdaiRepresentation_relationship( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiRepresentation_relationship */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_representation_relationship_with_transformation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_292transformation_operator,  &_transformation_operator );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiTransformation_ptr SdaiRepresentation_relationship_with_transformation::transformation_operator_()  {
    return &_transformation_operator;
}

SdaiTransformation_ptr_c SdaiRepresentation_relationship_with_transformation::transformation_operator_() const {
    return (const SdaiTransformation_ptr) &_transformation_operator;
}

void SdaiRepresentation_relationship_with_transformation::transformation_operator_( const SdaiTransformation_ptr x )  {
    _transformation_operator = x;
}

void init_SdaiRepresentation_relationship_with_transformation( Registry& reg ) {
    std::string str;

    config_control_design::e_representation_relationship_with_transformation->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SELF\\representation_relationship.rep_1.context_of_items :<>: SELF\\representation_relationship.rep_2.context_of_items\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_representation_relationship_with_transformation->_where_rules->Append( wr );
    config_control_design::e_representation_relationship_with_transformation->AddSupertype(config_control_design::e_representation_relationship);
    config_control_design::e_representation_relationship->AddSubtype(config_control_design::e_representation_relationship_with_transformation);
        config_control_design::a_292transformation_operator =
          new AttrDescriptor("transformation_operator",config_control_design::t_transformation,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_representation_relationship_with_transformation);
        config_control_design::e_representation_relationship_with_transformation->AddExplicitAttr (config_control_design::a_292transformation_operator);
        reg.AddEntity( *config_control_design::e_representation_relationship_with_transformation );
}

#endif
