#ifndef  TYPE_SDAIGEOMETRIC_SET_SELECT_CC
#define  TYPE_SDAIGEOMETRIC_SET_SELECT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiGeometric_set_select.h"


//////////  SELECT TYPE geometric_set_select

const TypeDescriptor * 
SdaiGeometric_set_select::AssignEntity (SDAI_Application_instance * se)
{
  (void)se;
  //  POINT
  if (se -> IsA (config_control_design::e_point))
  {  
    _app_inst = (SdaiPoint_ptr) se;
    return SetUnderlyingType (config_control_design::e_point);
  }
  //  CURVE
  if (se -> IsA (config_control_design::e_curve))
  {  
    _app_inst = (SdaiCurve_ptr) se;
    return SetUnderlyingType (config_control_design::e_curve);
  }
  //  SURFACE
  if (se -> IsA (config_control_design::e_surface))
  {  
    _app_inst = (SdaiSurface_ptr) se;
    return SetUnderlyingType (config_control_design::e_surface);
  }
  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
  std::cerr << se -> EntityName () << std::endl;
#endif
  return 0;
}

SDAI_Select * 
SdaiGeometric_set_select::NewSelect ()
{
    SdaiGeometric_set_select * tmp = new SdaiGeometric_set_select();
    return tmp;
}


// STEP Part 21

void
SdaiGeometric_set_select::STEPwrite_content (ostream& out, const char * currSch) const {
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::e_point) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::e_curve) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::e_surface) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
}

BASE_TYPE
SdaiGeometric_set_select::ValueType() const {
    if (CurrentUnderlyingType() == config_control_design::e_point)
        return sdaiINSTANCE;
    if (CurrentUnderlyingType() == config_control_design::e_curve)
        return sdaiINSTANCE;
    if (CurrentUnderlyingType() == config_control_design::e_surface)
        return sdaiINSTANCE;
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return (BASE_TYPE)0;
}

void
SdaiGeometric_set_select::STEPwrite_verbose (ostream& out, const char *currSch) const
{
    const TypeDescriptor *td = CurrentUnderlyingType();
    std::string tmp;

    if ( td ) {
        // If we have a legal underlying type, get its name acc
        // to the current schema.
        StrToUpper( td->Name(currSch), tmp );
    }
    if (td == config_control_design::e_point) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    if (td == config_control_design::e_curve) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    if (td == config_control_design::e_surface) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return;
}

Severity
SdaiGeometric_set_select::STEPread_content (istream& in, InstMgrBase * instances,
            const char *utype, int addFileId, const char *currSch)
{
  (void)instances;
  (void)utype;
  (void)addFileId;
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::e_point) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }
    if (CurrentUnderlyingType () == config_control_design::e_curve) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }
    if (CurrentUnderlyingType () == config_control_design::e_surface) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
    return severity ();
}

Severity
SdaiGeometric_set_select::StrToVal_content (const char * str, InstMgrBase * instances)
{
  (void)str;
  (void)instances;
  switch (base_type)  {
  default:  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
std::cerr << str << "  " << instances << std::endl;
#endif
    return SEVERITY_WARNING;
  }
#ifdef __GNUG__

  return SEVERITY_NULL;
#endif
}

// STEP Part 22:  SDAI

    //  part 0
SdaiGeometric_set_select::SdaiGeometric_set_select( const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript)
{
#ifdef SC_LOGGING
    if( *logStream )
    {
    *logStream << "DAVE ERR entering SdaiGeometric_set_select constructor." << std::endl;
    }
#endif
   nullify();
#ifdef SC_LOGGING
    if( *logStream )
    {
//    *logStream << "DAVE ERR exiting SdaiGeometric_set_select constructor." << std::endl;
    }
#endif
}

    //  part 1
SdaiGeometric_set_select::SdaiGeometric_set_select( const SdaiPoint_ptr& o,
                                                    const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_point)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiGeometric_set_select constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiGeometric_set_select constructor." << std::endl; }
#endif
}

SdaiGeometric_set_select::SdaiGeometric_set_select( const SdaiCurve_ptr& o,
                                                    const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_curve)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiGeometric_set_select constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiGeometric_set_select constructor." << std::endl; }
#endif
}

SdaiGeometric_set_select::SdaiGeometric_set_select( const SdaiSurface_ptr& o,
                                                    const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_surface)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiGeometric_set_select constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiGeometric_set_select constructor." << std::endl; }
#endif
}

SdaiGeometric_set_select::~SdaiGeometric_set_select() {
}

SdaiGeometric_set_select_agg::SdaiGeometric_set_select_agg( SelectTypeDescriptor *s)
  : SelectAggregate(), sel_type(s)
{
}

SdaiGeometric_set_select_agg::~SdaiGeometric_set_select_agg() { }


    //  part 2
SdaiGeometric_set_select::operator SdaiPoint_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_point )
      return ((SdaiPoint_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}

SdaiGeometric_set_select::operator SdaiCurve_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_curve )
      return ((SdaiCurve_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}

SdaiGeometric_set_select::operator SdaiSurface_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_surface )
      return ((SdaiSurface_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}


    //  part 3

SdaiLabel SdaiGeometric_set_select::name_() {
  if( CurrentUnderlyingType () == config_control_design::e_point ) 
    //  POINT
    return ((SdaiPoint_ptr) _app_inst) ->name_();
  if( CurrentUnderlyingType () == config_control_design::e_curve ) 
    //  CURVE
    return ((SdaiCurve_ptr) _app_inst) ->name_();
  if( CurrentUnderlyingType () == config_control_design::e_surface ) 
    //  SURFACE
    return ((SdaiSurface_ptr) _app_inst) ->name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


const SdaiLabel SdaiGeometric_set_select::name_() const {
  if( CurrentUnderlyingType () == config_control_design::e_point ) 
    //  POINT
    return ((const SdaiPoint_ptr) _app_inst) ->name_();
  if( CurrentUnderlyingType () == config_control_design::e_curve ) 
    //  CURVE
    return ((const SdaiCurve_ptr) _app_inst) ->name_();
  if( CurrentUnderlyingType () == config_control_design::e_surface ) 
    //  SURFACE
    return ((const SdaiSurface_ptr) _app_inst) ->name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiGeometric_set_select::name_( const SdaiLabel x ) {
  if( CurrentUnderlyingType () == config_control_design::e_point ) 
    //  POINT
    {  ((SdaiPoint_ptr) _app_inst) ->name_( x );
      return;
    }
  if( CurrentUnderlyingType () == config_control_design::e_curve ) 
    //  CURVE
    {  ((SdaiCurve_ptr) _app_inst) ->name_( x );
      return;
    }
  if( CurrentUnderlyingType () == config_control_design::e_surface ) 
    //  SURFACE
    {  ((SdaiSurface_ptr) _app_inst) ->name_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

    //  part 4
SdaiGeometric_set_select& SdaiGeometric_set_select::operator =( const SdaiPoint_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_point );
   return *this;
}

SdaiGeometric_set_select& SdaiGeometric_set_select::operator =( const SdaiCurve_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_curve );
   return *this;
}

SdaiGeometric_set_select& SdaiGeometric_set_select::operator =( const SdaiSurface_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_surface );
   return *this;
}


#ifndef COMPILER_DEFINES_OPERATOR_EQ

SdaiGeometric_set_select& SdaiGeometric_set_select::operator =( const SdaiGeometric_set_select_ptr& o ) {
    SDAI_Select::operator=( *o );
    if ( o -> CurrentUnderlyingType() == config_control_design::e_point ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::e_curve ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::e_surface ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    return *this;
}

SDAI_Select& SdaiGeometric_set_select::operator =( const SDAI_Select& o ) {
    SDAI_Select::operator=( o );
    if ( o.CurrentUnderlyingType() == config_control_design::e_point ) {
        _app_inst = ( ( SdaiGeometric_set_select& ) o )._app_inst;
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::e_curve ) {
        _app_inst = ( ( SdaiGeometric_set_select& ) o )._app_inst;
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::e_surface ) {
        _app_inst = ( ( SdaiGeometric_set_select& ) o )._app_inst;
        return *this;
    }
   return *this;
}

#endif //ndef COMPILER_DEFINES_OPERATOR_EQ

    //  part 5
Logical SdaiGeometric_set_select::IsPoint() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_point )
      return LTrue;
   return LFalse;
}

Logical SdaiGeometric_set_select::IsCurve() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_curve )
      return LTrue;
   return LFalse;
}

Logical SdaiGeometric_set_select::IsSurface() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_surface )
      return LTrue;
   return LFalse;
}

//////////  END SELECT TYPE SdaiGeometric_set_select


void init_SdaiGeometric_set_select( Registry& reg ) {
    std::string str;
        config_control_design::t_geometric_set_select = new SelectTypeDescriptor (
                  ~(sdaiINSTANCE),        //unique elements,
                  "Geometric_Set_Select",        // Name
                  sdaiSELECT,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "SELECT (Point, Curve, Surface)",        // Description
                  (SelectCreator) create_SdaiGeometric_set_select);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_geometric_set_select);
    config_control_design::t_geometric_set_select -> Elements ().AddNode (config_control_design::e_point);
    config_control_design::t_geometric_set_select -> Elements ().AddNode (config_control_design::e_curve);
    config_control_design::t_geometric_set_select -> Elements ().AddNode (config_control_design::e_surface);
    reg.AddType (*config_control_design::t_geometric_set_select);
}

#endif
