#ifndef  ENTITY_SDAISURFACE_PATCH_CC
#define  ENTITY_SDAISURFACE_PATCH_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiSurface_patch.h"

EntityDescriptor * config_control_design::e_surface_patch = 0;
AttrDescriptor * config_control_design::a_120parent_surface = 0;
AttrDescriptor * config_control_design::a_121u_transition = 0;
AttrDescriptor * config_control_design::a_122v_transition = 0;
AttrDescriptor * config_control_design::a_123u_sense = 0;
AttrDescriptor * config_control_design::a_124v_sense = 0;
Inverse_attribute * config_control_design::a_125Iusing_surfaces = 0;

SdaiSurface_patch::SdaiSurface_patch(): SdaiFounded_item(), _parent_surface( 0 ) {
        /*  parent: SdaiFounded_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_surface_patch;
    STEPattribute * a = new STEPattribute( * config_control_design::a_120parent_surface, ( SDAI_Application_instance_ptr * ) & _parent_surface );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_121u_transition, & _u_transition );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_122v_transition, & _v_transition );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_123u_sense, & _u_sense );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_124v_sense, & _v_sense );
    a->set_null();
    attributes.push( a );
}

SdaiSurface_patch::SdaiSurface_patch ( SdaiSurface_patch & e ) : SdaiFounded_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiSurface_patch::~SdaiSurface_patch() {
}

SdaiSurface_patch::SdaiSurface_patch( SDAI_Application_instance * se, bool addAttrs ) : SdaiFounded_item( se, addAttrs ), _parent_surface( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiFounded_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_surface_patch;
    STEPattribute * a = new STEPattribute( * config_control_design::a_120parent_surface, ( SDAI_Application_instance_ptr * ) &_parent_surface );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_121u_transition,  &_u_transition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_122v_transition,  &_v_transition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_123u_sense,  &_u_sense );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_124v_sense,  &_v_sense );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiBounded_surface_ptr SdaiSurface_patch::parent_surface_() {
    if( !_parent_surface ) {
        _parent_surface = new SdaiBounded_surface;
    }
    return (SdaiBounded_surface_ptr) _parent_surface;
}

SdaiBounded_surface_ptr_c SdaiSurface_patch::parent_surface_() const {
    return (SdaiBounded_surface_ptr) _parent_surface;
}

void SdaiSurface_patch::parent_surface_( const SdaiBounded_surface_ptr x ) {
    _parent_surface = x;
}

SdaiTransition_code_var SdaiSurface_patch::u_transition_() {
    return (Transition_code) _u_transition;
}

const SdaiTransition_code_var SdaiSurface_patch::u_transition_() const {
    return (const Transition_code) _u_transition;
}

void SdaiSurface_patch::u_transition_( const SdaiTransition_code_var x ) {
    _u_transition.put( x );
}

SdaiTransition_code_var SdaiSurface_patch::v_transition_() {
    return (Transition_code) _v_transition;
}

const SdaiTransition_code_var SdaiSurface_patch::v_transition_() const {
    return (const Transition_code) _v_transition;
}

void SdaiSurface_patch::v_transition_( const SdaiTransition_code_var x ) {
    _v_transition.put( x );
}

Boolean SdaiSurface_patch::u_sense_() const {
    return (const Boolean) _u_sense;
}

void SdaiSurface_patch::u_sense_( const Boolean x ) {
    _u_sense.put (x);
}

Boolean SdaiSurface_patch::v_sense_() const {
    return (const Boolean) _v_sense;
}

void SdaiSurface_patch::v_sense_( const Boolean x ) {
    _v_sense.put (x);
}

EntityAggregate_ptr SdaiSurface_patch::using_surfaces_() {
    iAstruct ias = getInvAttr( config_control_design::a_125Iusing_surfaces );
    if( !ias.a ) {
        ias.a = new EntityAggregate;
        setInvAttr( config_control_design::a_125Iusing_surfaces, ias );
    }
    return ias.a;
}

EntityAggregate_ptr_c SdaiSurface_patch::using_surfaces_() const {
    return getInvAttr( config_control_design::a_125Iusing_surfaces ).a;
}

void SdaiSurface_patch::using_surfaces_( const EntityAggregate_ptr x ) {
    iAstruct ias;
    ias.a = x;
    setInvAttr( config_control_design::a_125Iusing_surfaces, ias );
}

void init_SdaiSurface_patch( Registry& reg ) {
    std::string str;

    config_control_design::e_surface_patch->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "NOT ( 'CONFIG_CONTROL_DESIGN.CURVE_BOUNDED_SURFACE' IN TYPEOF( parent_surface ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_surface_patch->_where_rules->Append( wr );
    config_control_design::e_surface_patch->AddSupertype(config_control_design::e_founded_item);
    config_control_design::e_founded_item->AddSubtype(config_control_design::e_surface_patch);
    config_control_design::a_120parent_surface =
      new AttrDescriptor( "parent_surface", config_control_design::e_bounded_surface, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_surface_patch);
        config_control_design::e_surface_patch->AddExplicitAttr (config_control_design::a_120parent_surface);
        config_control_design::a_121u_transition =
          new AttrDescriptor("u_transition",config_control_design::t_transition_code,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_surface_patch);
        config_control_design::e_surface_patch->AddExplicitAttr (config_control_design::a_121u_transition);
        config_control_design::a_122v_transition =
          new AttrDescriptor("v_transition",config_control_design::t_transition_code,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_surface_patch);
        config_control_design::e_surface_patch->AddExplicitAttr (config_control_design::a_122v_transition);
        config_control_design::a_123u_sense =
          new AttrDescriptor("u_sense",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_surface_patch);
        config_control_design::e_surface_patch->AddExplicitAttr (config_control_design::a_123u_sense);
        config_control_design::a_124v_sense =
          new AttrDescriptor("v_sense",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_surface_patch);
        config_control_design::e_surface_patch->AddExplicitAttr (config_control_design::a_124v_sense);
        BagTypeDescriptor * t_23 = new BagTypeDescriptor;
        t_23->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_23->SetBound1( 1 );
        t_23->SetBound2( 2147483647 );
        t_23->FundamentalType(BAG_TYPE);
        t_23->Description("BAG [1:?] OF rectangular_composite_surface");
        t_23->OriginatingSchema(config_control_design::schema);
        t_23->ReferentType(config_control_design::e_rectangular_composite_surface);
        config_control_design::schema->AddUnnamedType(t_23);
        config_control_design::a_125Iusing_surfaces =
          new Inverse_attribute("using_surfaces",t_23,LFalse,LFalse,
          *config_control_design::e_surface_patch);
        config_control_design::e_surface_patch->AddInverseAttr (config_control_design::a_125Iusing_surfaces);
        config_control_design::a_125Iusing_surfaces->inverted_attr_id_("segments");
        config_control_design::a_125Iusing_surfaces->inverted_entity_id_("rectangular_composite_surface");
// inverse entity 3 rectangular_composite_surface
        reg.AddEntity( *config_control_design::e_surface_patch );
        config_control_design::schema->AddEntityWInverse( config_control_design::e_surface_patch );
}

#endif
