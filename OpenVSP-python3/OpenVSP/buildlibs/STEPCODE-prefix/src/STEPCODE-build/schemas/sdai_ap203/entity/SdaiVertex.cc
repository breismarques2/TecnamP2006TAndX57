#ifndef  ENTITY_SDAIVERTEX_CC
#define  ENTITY_SDAIVERTEX_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiVertex.h"

EntityDescriptor * config_control_design::e_vertex = 0;

SdaiVertex::SdaiVertex(): SdaiTopological_representation_item() {
        /*  parent: SdaiTopological_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_vertex;
}

SdaiVertex::SdaiVertex ( SdaiVertex & e ) : SdaiTopological_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiVertex::~SdaiVertex() {
}

SdaiVertex::SdaiVertex( SDAI_Application_instance * se, bool addAttrs ) : SdaiTopological_representation_item( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiTopological_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_vertex;
}


void init_SdaiVertex( Registry& reg ) {
    std::string str;

    config_control_design::e_vertex->AddSupertype(config_control_design::e_topological_representation_item);
    config_control_design::e_topological_representation_item->AddSubtype(config_control_design::e_vertex);
        reg.AddEntity( *config_control_design::e_vertex );
}

#endif
