#ifndef  TYPE_SDAICHARACTERIZED_DEFINITION_CC
#define  TYPE_SDAICHARACTERIZED_DEFINITION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiCharacterized_definition.h"


//////////  SELECT TYPE characterized_definition

const TypeDescriptor * 
SdaiCharacterized_definition::AssignEntity (SDAI_Application_instance * se)
{
  (void)se;
    //  CHARACTERIZED_PRODUCT_DEFINITION
    if( config_control_design::t_characterized_product_definition->CanBe( se->getEDesc() ) ) {
        _sdaicharacterized_product_definition.AssignEntity (se);
        return SetUnderlyingType (config_control_design::t_characterized_product_definition);
    }
    //  SHAPE_DEFINITION
    if( config_control_design::t_shape_definition->CanBe( se->getEDesc() ) ) {
        _sdaishape_definition.AssignEntity (se);
        return SetUnderlyingType (config_control_design::t_shape_definition);
    }
  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
  std::cerr << se -> EntityName () << std::endl;
#endif
  return 0;
}

SDAI_Select * 
SdaiCharacterized_definition::NewSelect ()
{
    SdaiCharacterized_definition * tmp = new SdaiCharacterized_definition();
    return tmp;
}


// STEP Part 21

void
SdaiCharacterized_definition::STEPwrite_content (ostream& out, const char * currSch) const {
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::t_characterized_product_definition) {
        _sdaicharacterized_product_definition.STEPwrite (out, currSch);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::t_shape_definition) {
        _sdaishape_definition.STEPwrite (out, currSch);
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
}

BASE_TYPE
SdaiCharacterized_definition::ValueType() const {
    if (CurrentUnderlyingType() == config_control_design::t_characterized_product_definition)
        return _sdaicharacterized_product_definition.ValueType();
    if (CurrentUnderlyingType() == config_control_design::t_shape_definition)
        return _sdaishape_definition.ValueType();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return (BASE_TYPE)0;
}

void
SdaiCharacterized_definition::STEPwrite_verbose (ostream& out, const char *currSch) const
{
    const TypeDescriptor *td = CurrentUnderlyingType();
    std::string tmp;

    if ( td ) {
        // If we have a legal underlying type, get its name acc
        // to the current schema.
        StrToUpper( td->Name(currSch), tmp );
    }
    if (td == config_control_design::t_characterized_product_definition) {
        out << tmp << "(";
        _sdaicharacterized_product_definition.STEPwrite_verbose (out, currSch);
        out << ")";
        return;
    }
    if (td == config_control_design::t_shape_definition) {
        out << tmp << "(";
        _sdaishape_definition.STEPwrite_verbose (out, currSch);
        out << ")";
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return;
}

Severity
SdaiCharacterized_definition::STEPread_content (istream& in, InstMgrBase * instances,
            const char *utype, int addFileId, const char *currSch)
{
  (void)instances;
  (void)utype;
  (void)addFileId;
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::t_characterized_product_definition) {
        _sdaicharacterized_product_definition.STEPread (in, &_error, instances, utype, addFileId, currSch);
        return severity ();
    }
    if (CurrentUnderlyingType () == config_control_design::t_shape_definition) {
        _sdaishape_definition.STEPread (in, &_error, instances, utype, addFileId, currSch);
        return severity ();
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
    return severity ();
}

Severity
SdaiCharacterized_definition::StrToVal_content (const char * str, InstMgrBase * instances)
{
  (void)str;
  (void)instances;
  switch (base_type)  {
  default:  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
std::cerr << str << "  " << instances << std::endl;
#endif
    return SEVERITY_WARNING;
  }
#ifdef __GNUG__

  return SEVERITY_NULL;
#endif
}

// STEP Part 22:  SDAI

    //  part 0
SdaiCharacterized_definition::SdaiCharacterized_definition( const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript),
    _sdaicharacterized_product_definition (config_control_design::t_characterized_product_definition),
    _sdaishape_definition (config_control_design::t_shape_definition)
{
#ifdef SC_LOGGING
    if( *logStream )
    {
    *logStream << "DAVE ERR entering SdaiCharacterized_definition constructor." << std::endl;
    }
#endif
   nullify();
#ifdef SC_LOGGING
    if( *logStream )
    {
//    *logStream << "DAVE ERR exiting SdaiCharacterized_definition constructor." << std::endl;
    }
#endif
}

    //  part 1
SdaiCharacterized_definition::SdaiCharacterized_definition( const SdaiCharacterized_product_definition_ptr& o,
                                                            const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::t_characterized_product_definition),
    _sdaicharacterized_product_definition (config_control_design::t_characterized_product_definition),
    _sdaishape_definition (config_control_design::t_shape_definition)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiCharacterized_definition constructor." << std::endl; }
#endif
   _sdaicharacterized_product_definition = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiCharacterized_definition constructor." << std::endl; }
#endif
}

SdaiCharacterized_definition::SdaiCharacterized_definition( const SdaiShape_definition_ptr& o,
                                                            const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::t_shape_definition),
    _sdaicharacterized_product_definition (config_control_design::t_characterized_product_definition),
    _sdaishape_definition (config_control_design::t_shape_definition)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiCharacterized_definition constructor." << std::endl; }
#endif
   _sdaishape_definition = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiCharacterized_definition constructor." << std::endl; }
#endif
}

SdaiCharacterized_definition::~SdaiCharacterized_definition() {
}

SdaiCharacterized_definition_agg::SdaiCharacterized_definition_agg( SelectTypeDescriptor *s)
  : SelectAggregate(), sel_type(s)
{
}

SdaiCharacterized_definition_agg::~SdaiCharacterized_definition_agg() { }


    //  part 2
SdaiCharacterized_definition::operator SdaiCharacterized_product_definition_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::t_characterized_product_definition )
      return & _sdaicharacterized_product_definition;

   severity( SEVERITY_WARNING );
   Error( "Underlying type is not SdaiCharacterized_product_definition_ptr" );

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return 0;
}

SdaiCharacterized_definition::operator SdaiShape_definition_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::t_shape_definition )
      return & _sdaishape_definition;

   severity( SEVERITY_WARNING );
   Error( "Underlying type is not SdaiShape_definition_ptr" );

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return 0;
}


    //  part 3

    //  part 4
SdaiCharacterized_definition& SdaiCharacterized_definition::operator =( const SdaiCharacterized_product_definition_ptr& o )
{
   nullify ();
   _sdaicharacterized_product_definition = o;
   SetUnderlyingType( config_control_design::t_characterized_product_definition );
   return *this;
}

SdaiCharacterized_definition& SdaiCharacterized_definition::operator =( const SdaiShape_definition_ptr& o )
{
   nullify ();
   _sdaishape_definition = o;
   SetUnderlyingType( config_control_design::t_shape_definition );
   return *this;
}


#ifndef COMPILER_DEFINES_OPERATOR_EQ

SdaiCharacterized_definition& SdaiCharacterized_definition::operator =( const SdaiCharacterized_definition_ptr& o ) {
    SDAI_Select::operator=( *o );
    if ( o -> CurrentUnderlyingType() == config_control_design::t_characterized_product_definition ) {
        _sdaicharacterized_product_definition =  &( o -> _sdaicharacterized_product_definition );
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::t_shape_definition ) {
        _sdaishape_definition =  &( o -> _sdaishape_definition );
        return *this;
    }
    return *this;
}

SDAI_Select& SdaiCharacterized_definition::operator =( const SDAI_Select& o ) {
    SDAI_Select::operator=( o );
    if ( o.CurrentUnderlyingType() == config_control_design::t_characterized_product_definition ) {
        _sdaicharacterized_product_definition = &( ( ( SdaiCharacterized_definition& ) o )._sdaicharacterized_product_definition );
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::t_shape_definition ) {
        _sdaishape_definition = &( ( ( SdaiCharacterized_definition& ) o )._sdaishape_definition );
        return *this;
    }
   return *this;
}

#endif //ndef COMPILER_DEFINES_OPERATOR_EQ

    //  part 5
Logical SdaiCharacterized_definition::IsCharacterized_product_definition() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::t_characterized_product_definition )
      return LTrue;
   return LFalse;
}

Logical SdaiCharacterized_definition::IsShape_definition() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::t_shape_definition )
      return LTrue;
   return LFalse;
}

//////////  END SELECT TYPE SdaiCharacterized_definition


void init_SdaiCharacterized_definition( Registry& reg ) {
    std::string str;
        config_control_design::t_characterized_definition = new SelectTypeDescriptor (
                  ~(sdaiINSTANCE),        //unique elements,
                  "Characterized_Definition",        // Name
                  sdaiSELECT,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "SELECT (Characterized_Product_Definition, Shape_Definition)",        // Description
                  (SelectCreator) create_SdaiCharacterized_definition);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_characterized_definition);
    config_control_design::t_characterized_definition -> Elements ().AddNode (config_control_design::t_characterized_product_definition);
    config_control_design::t_characterized_definition -> Elements ().AddNode (config_control_design::t_shape_definition);
    reg.AddType (*config_control_design::t_characterized_definition);
}

#endif
