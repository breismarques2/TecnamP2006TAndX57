#ifndef  TYPE_SDAIPERSON_ORGANIZATION_ITEM_H
#define  TYPE_SDAIPERSON_ORGANIZATION_ITEM_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiPerson_organization_item
class SC_SCHEMA_EXPORT SdaiPerson_organization_item  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   CHANGE    --  sdaiINSTANCE
    //   START_WORK    --  sdaiINSTANCE
    //   CHANGE_REQUEST    --  sdaiINSTANCE
    //   START_REQUEST    --  sdaiINSTANCE
    //   CONFIGURATION_ITEM    --  sdaiINSTANCE
    //   PRODUCT    --  sdaiINSTANCE
    //   PRODUCT_DEFINITION_FORMATION    --  sdaiINSTANCE
    //   PRODUCT_DEFINITION    --  sdaiINSTANCE
    //   CONTRACT    --  sdaiINSTANCE
    //   SECURITY_CLASSIFICATION    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiPerson_organization_item( const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    //  part 1
    SdaiPerson_organization_item( const SdaiChange_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiStart_work_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiChange_request_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiStart_request_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiConfiguration_item_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiProduct_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiProduct_definition_formation_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiProduct_definition_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiContract_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    SdaiPerson_organization_item( const SdaiSecurity_classification_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    virtual ~SdaiPerson_organization_item();

    //  part 2
    operator SdaiChange_ptr();
    operator SdaiStart_work_ptr();
    operator SdaiChange_request_ptr();
    operator SdaiStart_request_ptr();
    operator SdaiConfiguration_item_ptr();
    operator SdaiProduct_ptr();
    operator SdaiProduct_definition_formation_ptr();
    operator SdaiProduct_definition_ptr();
    operator SdaiContract_ptr();
    operator SdaiSecurity_classification_ptr();

    //  part 3
        SdaiSecurity_classification_level_ptr_c security_level_() const;
        SdaiSecurity_classification_level_ptr   security_level_();
        void security_level_( const SdaiSecurity_classification_level_ptr x );

        SdaiContract_type_ptr_c kind_() const;
        SdaiContract_type_ptr   kind_();
        void kind_( const SdaiContract_type_ptr x );

        SdaiProduct_definition_formation_ptr_c formation_() const;
        SdaiProduct_definition_formation_ptr   formation_();
        void formation_( const SdaiProduct_definition_formation_ptr x );

        SdaiProduct_ptr_c of_product_() const;
        SdaiProduct_ptr   of_product_();
        void of_product_( const SdaiProduct_ptr x );

        EntityAggregate_ptr_c frame_of_reference_() const;
        EntityAggregate_ptr   frame_of_reference_();
        void frame_of_reference_( const EntityAggregate_ptr x );

  const SdaiLabel   purpose_() const;
        SdaiLabel   purpose_();
        void purpose_( const SdaiLabel x );

        SdaiProduct_concept_ptr_c item_concept_() const;
        SdaiProduct_concept_ptr   item_concept_();
        void item_concept_( const SdaiProduct_concept_ptr x );

  const SdaiText   description_() const;
        SdaiText   description_();
        void description_( const SdaiText x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );

  const SdaiIdentifier   id_() const;
        SdaiIdentifier   id_();
        void id_( const SdaiIdentifier x );

        SdaiVersioned_action_request_ptr_c assigned_action_request_() const;
        SdaiVersioned_action_request_ptr   assigned_action_request_();
        void assigned_action_request_( const SdaiVersioned_action_request_ptr x );

        SdaiWork_item_agg_ptr_c items_() const;
        SdaiWork_item_agg_ptr   items_();
        void items_( const SdaiWork_item_agg_ptr x );

        SdaiAction_ptr_c assigned_action_() const;
        SdaiAction_ptr   assigned_action_();
        void assigned_action_( const SdaiAction_ptr x );


    //  part 4
    SdaiPerson_organization_item& operator =( const SdaiChange_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiStart_work_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiChange_request_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiStart_request_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiConfiguration_item_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiProduct_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiProduct_definition_formation_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiProduct_definition_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiContract_ptr& );
    SdaiPerson_organization_item& operator =( const SdaiSecurity_classification_ptr& );
    // not in SDAI
    SdaiPerson_organization_item& ShallowCopy ( const SdaiPerson_organization_item& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiPerson_organization_item& operator =( SdaiPerson_organization_item * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsChange() const;
    Logical IsStart_work() const;
    Logical IsChange_request() const;
    Logical IsStart_request() const;
    Logical IsConfiguration_item() const;
    Logical IsProduct() const;
    Logical IsProduct_definition_formation() const;
    Logical IsProduct_definition() const;
    Logical IsContract() const;
    Logical IsSecurity_classification() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiPerson_organization_item () { return new SdaiPerson_organization_item; }
typedef SdaiPerson_organization_item * SdaiPerson_organization_itemH;
typedef SdaiPerson_organization_item_ptr SdaiPerson_organization_item_var;


class SdaiPerson_organization_item_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiPerson_organization_item_agg( SelectTypeDescriptor * =config_control_design::t_person_organization_item );
    ~SdaiPerson_organization_item_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiPerson_organization_item( sel_type )); }
};
inline STEPaggregate * create_SdaiPerson_organization_item_agg () { return new SdaiPerson_organization_item_agg; }
typedef SdaiPerson_organization_item_agg_ptr SdaiPerson_organization_item_agg_var;

/////  END SELECT TYPE person_organization_item

void init_SdaiPerson_organization_item(Registry& reg);

#endif
