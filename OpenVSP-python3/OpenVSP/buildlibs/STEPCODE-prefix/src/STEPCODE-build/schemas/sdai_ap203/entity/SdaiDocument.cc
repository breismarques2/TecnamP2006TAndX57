#ifndef  ENTITY_SDAIDOCUMENT_CC
#define  ENTITY_SDAIDOCUMENT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDocument.h"

EntityDescriptor * config_control_design::e_document = 0;
AttrDescriptor * config_control_design::a_35id = 0;
AttrDescriptor * config_control_design::a_36name = 0;
AttrDescriptor * config_control_design::a_37description = 0;
AttrDescriptor * config_control_design::a_38kind = 0;

SdaiDocument::SdaiDocument() : _kind( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_document;
    STEPattribute * a = new STEPattribute( * config_control_design::a_35id, & _id );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_36name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_37description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_38kind, ( SDAI_Application_instance_ptr * ) & _kind );
    a->set_null();
    attributes.push( a );
}

SdaiDocument::SdaiDocument ( SdaiDocument & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDocument::~SdaiDocument() {
}

SdaiDocument::SdaiDocument( SDAI_Application_instance * se, bool addAttrs ) : _kind( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_document;
    STEPattribute * a = new STEPattribute( * config_control_design::a_35id,  &_id );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_36name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_37description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_38kind, ( SDAI_Application_instance_ptr * ) &_kind );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiDocument::id_() {
    return _id;
}

const SdaiIdentifier SdaiDocument::id_() const {
    return (const SdaiIdentifier) _id;
}

void SdaiDocument::id_( const SdaiIdentifier x ) {
    _id = x;
}

SdaiLabel SdaiDocument::name_() {
    return _name;
}

const SdaiLabel SdaiDocument::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiDocument::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiDocument::description_() {
    return _description;
}

const SdaiText SdaiDocument::description_() const {
    return (const SdaiText) _description;
}

void SdaiDocument::description_( const SdaiText x ) {
    _description = x;
}

SdaiDocument_type_ptr SdaiDocument::kind_() {
    if( !_kind ) {
        _kind = new SdaiDocument_type;
    }
    return (SdaiDocument_type_ptr) _kind;
}

SdaiDocument_type_ptr_c SdaiDocument::kind_() const {
    return (SdaiDocument_type_ptr) _kind;
}

void SdaiDocument::kind_( const SdaiDocument_type_ptr x ) {
    _kind = x;
}

void init_SdaiDocument( Registry& reg ) {
    std::string str;

        config_control_design::e_document->_uniqueness_rules = new Uniqueness_rule__set;
        Uniqueness_rule * ur;
        str.clear();
    str.append( "UR1 : " );
    str.append( "id\n" );
    ur = new Uniqueness_rule( str.c_str() );
    config_control_design::e_document->_uniqueness_rules->Append(ur);
        config_control_design::a_35id =
          new AttrDescriptor("id",config_control_design::t_identifier,
          LFalse,LTrue, AttrType_Explicit,
          *config_control_design::e_document);
        config_control_design::e_document->AddExplicitAttr (config_control_design::a_35id);
        config_control_design::a_36name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_document);
        config_control_design::e_document->AddExplicitAttr (config_control_design::a_36name);
        config_control_design::a_37description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_document);
        config_control_design::e_document->AddExplicitAttr (config_control_design::a_37description);
    config_control_design::a_38kind =
      new AttrDescriptor( "kind", config_control_design::e_document_type, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_document);
        config_control_design::e_document->AddExplicitAttr (config_control_design::a_38kind);
        reg.AddEntity( *config_control_design::e_document );
}

#endif
