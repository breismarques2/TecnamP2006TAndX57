#ifndef  ENTITY_SDAICURVE_BOUNDED_SURFACE_CC
#define  ENTITY_SDAICURVE_BOUNDED_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCurve_bounded_surface.h"

EntityDescriptor * config_control_design::e_curve_bounded_surface = 0;
AttrDescriptor * config_control_design::a_337basis_surface = 0;
AttrDescriptor * config_control_design::a_338boundaries = 0;
AttrDescriptor * config_control_design::a_339implicit_outer = 0;

SdaiCurve_bounded_surface::SdaiCurve_bounded_surface(): SdaiBounded_surface(), _basis_surface( 0 ), _boundaries( 0 ) {
        /*  parent: SdaiBounded_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_curve_bounded_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_337basis_surface, ( SDAI_Application_instance_ptr * ) & _basis_surface );
    a->set_null();
    attributes.push( a );
    _boundaries = new EntityAggregate;
    a = new STEPattribute( * config_control_design::a_338boundaries, _boundaries );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_339implicit_outer, & _implicit_outer );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiCurve_bounded_surface::SdaiCurve_bounded_surface ( SdaiCurve_bounded_surface & e ) : SdaiBounded_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCurve_bounded_surface::~SdaiCurve_bounded_surface() {
    delete _boundaries;
}

SdaiCurve_bounded_surface::SdaiCurve_bounded_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiBounded_surface( se, addAttrs ), _basis_surface( 0 ), _boundaries( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiBounded_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_curve_bounded_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_337basis_surface, ( SDAI_Application_instance_ptr * ) &_basis_surface );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _boundaries = new EntityAggregate;
    a = new STEPattribute( * config_control_design::a_338boundaries,  _boundaries );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_339implicit_outer,  &_implicit_outer );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiSurface_ptr SdaiCurve_bounded_surface::basis_surface_() {
    if( !_basis_surface ) {
        _basis_surface = new SdaiSurface;
    }
    return (SdaiSurface_ptr) _basis_surface;
}

SdaiSurface_ptr_c SdaiCurve_bounded_surface::basis_surface_() const {
    return (SdaiSurface_ptr) _basis_surface;
}

void SdaiCurve_bounded_surface::basis_surface_( const SdaiSurface_ptr x ) {
    _basis_surface = x;
}

EntityAggregate_ptr SdaiCurve_bounded_surface::boundaries_() {
    if( !_boundaries ) {
        _boundaries = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _boundaries;
}

EntityAggregate_ptr_c SdaiCurve_bounded_surface::boundaries_() const {
    return ( EntityAggregate_ptr ) _boundaries;
}

void SdaiCurve_bounded_surface::boundaries_( const EntityAggregate_ptr x ) {
    if( !_boundaries ) {
        _boundaries = new EntityAggregate;
    }
    _boundaries->ShallowCopy( * x );
}

Boolean SdaiCurve_bounded_surface::implicit_outer_() const {
    return (const Boolean) _implicit_outer;
}

void SdaiCurve_bounded_surface::implicit_outer_( const Boolean x ) {
    _implicit_outer.put (x);
}

void init_SdaiCurve_bounded_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_curve_bounded_surface->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "NOT ( implicit_outer AND ( 'CONFIG_CONTROL_DESIGN.OUTER_BOUNDARY_CURVE' IN TYPEOF( boundaries ) ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_curve_bounded_surface->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "( NOT implicit_outer ) OR ( 'CONFIG_CONTROL_DESIGN.BOUNDED_SURFACE' IN TYPEOF( basis_surface ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_curve_bounded_surface->_where_rules->Append( wr );
        str.clear();
        str.append( "wr3: (" );
    str.append( "SIZEOF( QUERY ( temp <* boundaries | ( 'CONFIG_CONTROL_DESIGN.OUTER_BOUNDARY_CURVE' IN TYPEOF( temp ) ) ) ) <= 1\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_curve_bounded_surface->_where_rules->Append( wr );
        str.clear();
        str.append( "wr4: (" );
    str.append( "SIZEOF( QUERY ( temp <* boundaries | ( temp\\composite_curve_on_surface.basis_surface[1] <> SELF.basis_surface ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_curve_bounded_surface->_where_rules->Append( wr );
    config_control_design::e_curve_bounded_surface->AddSupertype(config_control_design::e_bounded_surface);
    config_control_design::e_bounded_surface->AddSubtype(config_control_design::e_curve_bounded_surface);
    config_control_design::a_337basis_surface =
      new AttrDescriptor( "basis_surface", config_control_design::e_surface, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_curve_bounded_surface);
        config_control_design::e_curve_bounded_surface->AddExplicitAttr (config_control_design::a_337basis_surface);
        SetTypeDescriptor * t_62 = new SetTypeDescriptor;
        t_62->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_62->SetBound1( 1 );
        t_62->SetBound2( 2147483647 );
        t_62->FundamentalType(SET_TYPE);
        t_62->Description("SET [1:?] OF boundary_curve");
        t_62->OriginatingSchema(config_control_design::schema);
        t_62->ReferentType(config_control_design::e_boundary_curve);
        config_control_design::schema->AddUnnamedType(t_62);
        config_control_design::a_338boundaries =
          new AttrDescriptor("boundaries",t_62,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_curve_bounded_surface);
        config_control_design::e_curve_bounded_surface->AddExplicitAttr (config_control_design::a_338boundaries);
        config_control_design::a_339implicit_outer =
          new AttrDescriptor("implicit_outer",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_curve_bounded_surface);
        config_control_design::e_curve_bounded_surface->AddExplicitAttr (config_control_design::a_339implicit_outer);
        reg.AddEntity( *config_control_design::e_curve_bounded_surface );
}

#endif
