#ifndef  ENTITY_SDAIPROPERTY_DEFINITION_CC
#define  ENTITY_SDAIPROPERTY_DEFINITION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiProperty_definition.h"

EntityDescriptor * config_control_design::e_property_definition = 0;
AttrDescriptor * config_control_design::a_174name = 0;
AttrDescriptor * config_control_design::a_175description = 0;
AttrDescriptor * config_control_design::a_176definition = 0;

SdaiProperty_definition::SdaiProperty_definition() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_property_definition;
    STEPattribute * a = new STEPattribute( * config_control_design::a_174name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_175description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_176definition, & _definition );
    a->set_null();
    attributes.push( a );
}

SdaiProperty_definition::SdaiProperty_definition ( SdaiProperty_definition & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiProperty_definition::~SdaiProperty_definition() {
}

SdaiProperty_definition::SdaiProperty_definition( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_property_definition;
    STEPattribute * a = new STEPattribute( * config_control_design::a_174name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_175description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_176definition,  &_definition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiProperty_definition::name_() {
    return _name;
}

const SdaiLabel SdaiProperty_definition::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiProperty_definition::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiProperty_definition::description_() {
    return _description;
}

const SdaiText SdaiProperty_definition::description_() const {
    return (const SdaiText) _description;
}

void SdaiProperty_definition::description_( const SdaiText x ) {
    _description = x;
}

SdaiCharacterized_definition_ptr SdaiProperty_definition::definition_()  {
    return &_definition;
}

SdaiCharacterized_definition_ptr_c SdaiProperty_definition::definition_() const {
    return (const SdaiCharacterized_definition_ptr) &_definition;
}

void SdaiProperty_definition::definition_( const SdaiCharacterized_definition_ptr x )  {
    _definition = x;
}

void init_SdaiProperty_definition( Registry& reg ) {
    std::string str;

        config_control_design::a_174name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_property_definition);
        config_control_design::e_property_definition->AddExplicitAttr (config_control_design::a_174name);
        config_control_design::a_175description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_property_definition);
        config_control_design::e_property_definition->AddExplicitAttr (config_control_design::a_175description);
        config_control_design::a_176definition =
          new AttrDescriptor("definition",config_control_design::t_characterized_definition,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_property_definition);
        config_control_design::e_property_definition->AddExplicitAttr (config_control_design::a_176definition);
        reg.AddEntity( *config_control_design::e_property_definition );
}

#endif
