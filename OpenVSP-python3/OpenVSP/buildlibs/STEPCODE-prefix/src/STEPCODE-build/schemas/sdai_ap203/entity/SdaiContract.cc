#ifndef  ENTITY_SDAICONTRACT_CC
#define  ENTITY_SDAICONTRACT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiContract.h"

EntityDescriptor * config_control_design::e_contract = 0;
AttrDescriptor * config_control_design::a_305name = 0;
AttrDescriptor * config_control_design::a_306purpose = 0;
AttrDescriptor * config_control_design::a_307kind = 0;

SdaiContract::SdaiContract() : _kind( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_contract;
    STEPattribute * a = new STEPattribute( * config_control_design::a_305name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_306purpose, & _purpose );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_307kind, ( SDAI_Application_instance_ptr * ) & _kind );
    a->set_null();
    attributes.push( a );
}

SdaiContract::SdaiContract ( SdaiContract & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiContract::~SdaiContract() {
}

SdaiContract::SdaiContract( SDAI_Application_instance * se, bool addAttrs ) : _kind( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_contract;
    STEPattribute * a = new STEPattribute( * config_control_design::a_305name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_306purpose,  &_purpose );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_307kind, ( SDAI_Application_instance_ptr * ) &_kind );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiContract::name_() {
    return _name;
}

const SdaiLabel SdaiContract::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiContract::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiContract::purpose_() {
    return _purpose;
}

const SdaiText SdaiContract::purpose_() const {
    return (const SdaiText) _purpose;
}

void SdaiContract::purpose_( const SdaiText x ) {
    _purpose = x;
}

SdaiContract_type_ptr SdaiContract::kind_() {
    if( !_kind ) {
        _kind = new SdaiContract_type;
    }
    return (SdaiContract_type_ptr) _kind;
}

SdaiContract_type_ptr_c SdaiContract::kind_() const {
    return (SdaiContract_type_ptr) _kind;
}

void SdaiContract::kind_( const SdaiContract_type_ptr x ) {
    _kind = x;
}

void init_SdaiContract( Registry& reg ) {
    std::string str;

        config_control_design::a_305name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_contract);
        config_control_design::e_contract->AddExplicitAttr (config_control_design::a_305name);
        config_control_design::a_306purpose =
          new AttrDescriptor("purpose",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_contract);
        config_control_design::e_contract->AddExplicitAttr (config_control_design::a_306purpose);
    config_control_design::a_307kind =
      new AttrDescriptor( "kind", config_control_design::e_contract_type, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_contract);
        config_control_design::e_contract->AddExplicitAttr (config_control_design::a_307kind);
        reg.AddEntity( *config_control_design::e_contract );
}

#endif
