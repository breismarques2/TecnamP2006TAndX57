#ifndef  ENTITY_SDAIDOCUMENT_RELATIONSHIP_CC
#define  ENTITY_SDAIDOCUMENT_RELATIONSHIP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDocument_relationship.h"

EntityDescriptor * config_control_design::e_document_relationship = 0;
AttrDescriptor * config_control_design::a_314name = 0;
AttrDescriptor * config_control_design::a_315description = 0;
AttrDescriptor * config_control_design::a_316relating_document = 0;
AttrDescriptor * config_control_design::a_317related_document = 0;

SdaiDocument_relationship::SdaiDocument_relationship() : _relating_document( 0 ), _related_document( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_document_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_314name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_315description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_316relating_document, ( SDAI_Application_instance_ptr * ) & _relating_document );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_317related_document, ( SDAI_Application_instance_ptr * ) & _related_document );
    a->set_null();
    attributes.push( a );
}

SdaiDocument_relationship::SdaiDocument_relationship ( SdaiDocument_relationship & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDocument_relationship::~SdaiDocument_relationship() {
}

SdaiDocument_relationship::SdaiDocument_relationship( SDAI_Application_instance * se, bool addAttrs ) : _relating_document( 0 ), _related_document( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_document_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_314name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_315description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_316relating_document, ( SDAI_Application_instance_ptr * ) &_relating_document );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_317related_document, ( SDAI_Application_instance_ptr * ) &_related_document );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiDocument_relationship::name_() {
    return _name;
}

const SdaiLabel SdaiDocument_relationship::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiDocument_relationship::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiDocument_relationship::description_() {
    return _description;
}

const SdaiText SdaiDocument_relationship::description_() const {
    return (const SdaiText) _description;
}

void SdaiDocument_relationship::description_( const SdaiText x ) {
    _description = x;
}

SdaiDocument_ptr SdaiDocument_relationship::relating_document_() {
    if( !_relating_document ) {
        _relating_document = new SdaiDocument;
    }
    return (SdaiDocument_ptr) _relating_document;
}

SdaiDocument_ptr_c SdaiDocument_relationship::relating_document_() const {
    return (SdaiDocument_ptr) _relating_document;
}

void SdaiDocument_relationship::relating_document_( const SdaiDocument_ptr x ) {
    _relating_document = x;
}

SdaiDocument_ptr SdaiDocument_relationship::related_document_() {
    if( !_related_document ) {
        _related_document = new SdaiDocument;
    }
    return (SdaiDocument_ptr) _related_document;
}

SdaiDocument_ptr_c SdaiDocument_relationship::related_document_() const {
    return (SdaiDocument_ptr) _related_document;
}

void SdaiDocument_relationship::related_document_( const SdaiDocument_ptr x ) {
    _related_document = x;
}

void init_SdaiDocument_relationship( Registry& reg ) {
    std::string str;

        config_control_design::a_314name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_document_relationship);
        config_control_design::e_document_relationship->AddExplicitAttr (config_control_design::a_314name);
        config_control_design::a_315description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_document_relationship);
        config_control_design::e_document_relationship->AddExplicitAttr (config_control_design::a_315description);
    config_control_design::a_316relating_document =
      new AttrDescriptor( "relating_document", config_control_design::e_document, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_document_relationship);
        config_control_design::e_document_relationship->AddExplicitAttr (config_control_design::a_316relating_document);
    config_control_design::a_317related_document =
      new AttrDescriptor( "related_document", config_control_design::e_document, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_document_relationship);
        config_control_design::e_document_relationship->AddExplicitAttr (config_control_design::a_317related_document);
        reg.AddEntity( *config_control_design::e_document_relationship );
}

#endif
