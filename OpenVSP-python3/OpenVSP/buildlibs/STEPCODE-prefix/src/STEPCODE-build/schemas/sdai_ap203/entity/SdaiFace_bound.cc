#ifndef  ENTITY_SDAIFACE_BOUND_CC
#define  ENTITY_SDAIFACE_BOUND_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiFace_bound.h"

EntityDescriptor * config_control_design::e_face_bound = 0;
AttrDescriptor * config_control_design::a_290bound = 0;
AttrDescriptor * config_control_design::a_291orientation = 0;

SdaiFace_bound::SdaiFace_bound(): SdaiTopological_representation_item(), _bound( 0 ) {
        /*  parent: SdaiTopological_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_face_bound;
    STEPattribute * a = new STEPattribute( * config_control_design::a_290bound, ( SDAI_Application_instance_ptr * ) & _bound );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_291orientation, & _orientation );
    a->set_null();
    attributes.push( a );
}

SdaiFace_bound::SdaiFace_bound ( SdaiFace_bound & e ) : SdaiTopological_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiFace_bound::~SdaiFace_bound() {
}

SdaiFace_bound::SdaiFace_bound( SDAI_Application_instance * se, bool addAttrs ) : SdaiTopological_representation_item( se, addAttrs ), _bound( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiTopological_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_face_bound;
    STEPattribute * a = new STEPattribute( * config_control_design::a_290bound, ( SDAI_Application_instance_ptr * ) &_bound );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_291orientation,  &_orientation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLoop_ptr SdaiFace_bound::bound_() {
    if( !_bound ) {
        _bound = new SdaiLoop;
    }
    return (SdaiLoop_ptr) _bound;
}

SdaiLoop_ptr_c SdaiFace_bound::bound_() const {
    return (SdaiLoop_ptr) _bound;
}

void SdaiFace_bound::bound_( const SdaiLoop_ptr x ) {
    _bound = x;
}

Boolean SdaiFace_bound::orientation_() const {
    return (const Boolean) _orientation;
}

void SdaiFace_bound::orientation_( const Boolean x ) {
    _orientation.put (x);
}

void init_SdaiFace_bound( Registry& reg ) {
    std::string str;

    config_control_design::e_face_bound->AddSupertype(config_control_design::e_topological_representation_item);
    config_control_design::e_topological_representation_item->AddSubtype(config_control_design::e_face_bound);
    config_control_design::a_290bound =
      new AttrDescriptor( "bound", config_control_design::e_loop, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_face_bound);
        config_control_design::e_face_bound->AddExplicitAttr (config_control_design::a_290bound);
        config_control_design::a_291orientation =
          new AttrDescriptor("orientation",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_face_bound);
        config_control_design::e_face_bound->AddExplicitAttr (config_control_design::a_291orientation);
        reg.AddEntity( *config_control_design::e_face_bound );
}

#endif
