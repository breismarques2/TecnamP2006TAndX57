#ifndef  TYPE_SDAIAXIS2_PLACEMENT_H
#define  TYPE_SDAIAXIS2_PLACEMENT_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiAxis2_placement
class SC_SCHEMA_EXPORT SdaiAxis2_placement  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   AXIS2_PLACEMENT_2D    --  sdaiINSTANCE
    //   AXIS2_PLACEMENT_3D    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiAxis2_placement( const SelectTypeDescriptor * =config_control_design::t_axis2_placement );
    //  part 1
    SdaiAxis2_placement( const SdaiAxis2_placement_2d_ptr&,
                         const SelectTypeDescriptor * =config_control_design::t_axis2_placement );
    SdaiAxis2_placement( const SdaiAxis2_placement_3d_ptr&,
                         const SelectTypeDescriptor * =config_control_design::t_axis2_placement );
    virtual ~SdaiAxis2_placement();

    //  part 2
    operator SdaiAxis2_placement_2d_ptr();
    operator SdaiAxis2_placement_3d_ptr();

    //  part 3
        SdaiDirection_ptr_c axis_() const;
        SdaiDirection_ptr   axis_();
        void axis_( const SdaiDirection_ptr x );

        SdaiDirection_ptr_c ref_direction_() const;
        SdaiDirection_ptr   ref_direction_();
        void ref_direction_( const SdaiDirection_ptr x );

        SdaiCartesian_point_ptr_c location_() const;
        SdaiCartesian_point_ptr   location_();
        void location_( const SdaiCartesian_point_ptr x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiAxis2_placement& operator =( const SdaiAxis2_placement_2d_ptr& );
    SdaiAxis2_placement& operator =( const SdaiAxis2_placement_3d_ptr& );
    // not in SDAI
    SdaiAxis2_placement& ShallowCopy ( const SdaiAxis2_placement& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiAxis2_placement& operator =( SdaiAxis2_placement * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsAxis2_placement_2d() const;
    Logical IsAxis2_placement_3d() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiAxis2_placement () { return new SdaiAxis2_placement; }
typedef SdaiAxis2_placement * SdaiAxis2_placementH;
typedef SdaiAxis2_placement_ptr SdaiAxis2_placement_var;


class SdaiAxis2_placement_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiAxis2_placement_agg( SelectTypeDescriptor * =config_control_design::t_axis2_placement );
    ~SdaiAxis2_placement_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiAxis2_placement( sel_type )); }
};
inline STEPaggregate * create_SdaiAxis2_placement_agg () { return new SdaiAxis2_placement_agg; }
typedef SdaiAxis2_placement_agg_ptr SdaiAxis2_placement_agg_var;

/////  END SELECT TYPE axis2_placement

void init_SdaiAxis2_placement(Registry& reg);

#endif
