#ifndef  ENTITY_SDAIPOINT_ON_CURVE_CC
#define  ENTITY_SDAIPOINT_ON_CURVE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPoint_on_curve.h"

EntityDescriptor * config_control_design::e_point_on_curve = 0;
AttrDescriptor * config_control_design::a_415basis_curve = 0;
AttrDescriptor * config_control_design::a_416point_parameter = 0;

SdaiPoint_on_curve::SdaiPoint_on_curve(): SdaiPoint(), _basis_curve( 0 ) {
        /*  parent: SdaiPoint  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_point_on_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_415basis_curve, ( SDAI_Application_instance_ptr * ) & _basis_curve );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_416point_parameter, & _point_parameter );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiPoint_on_curve::SdaiPoint_on_curve ( SdaiPoint_on_curve & e ) : SdaiPoint() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPoint_on_curve::~SdaiPoint_on_curve() {
}

SdaiPoint_on_curve::SdaiPoint_on_curve( SDAI_Application_instance * se, bool addAttrs ) : SdaiPoint( se, addAttrs ), _basis_curve( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiPoint */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_point_on_curve;
    STEPattribute * a = new STEPattribute( * config_control_design::a_415basis_curve, ( SDAI_Application_instance_ptr * ) &_basis_curve );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_416point_parameter,  &_point_parameter );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiCurve_ptr SdaiPoint_on_curve::basis_curve_() {
    if( !_basis_curve ) {
        _basis_curve = new SdaiCurve;
    }
    return (SdaiCurve_ptr) _basis_curve;
}

SdaiCurve_ptr_c SdaiPoint_on_curve::basis_curve_() const {
    return (SdaiCurve_ptr) _basis_curve;
}

void SdaiPoint_on_curve::basis_curve_( const SdaiCurve_ptr x ) {
    _basis_curve = x;
}

SdaiParameter_value SdaiPoint_on_curve::point_parameter_() const {
    return (SdaiParameter_value) _point_parameter;
}

void SdaiPoint_on_curve::point_parameter_( const SdaiParameter_value x ) {
    _point_parameter = x;
}

void init_SdaiPoint_on_curve( Registry& reg ) {
    std::string str;

    config_control_design::e_point_on_curve->AddSupertype(config_control_design::e_point);
    config_control_design::e_point->AddSubtype(config_control_design::e_point_on_curve);
    config_control_design::a_415basis_curve =
      new AttrDescriptor( "basis_curve", config_control_design::e_curve, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_point_on_curve);
        config_control_design::e_point_on_curve->AddExplicitAttr (config_control_design::a_415basis_curve);
        config_control_design::a_416point_parameter =
          new AttrDescriptor("point_parameter",config_control_design::t_parameter_value,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_point_on_curve);
        config_control_design::e_point_on_curve->AddExplicitAttr (config_control_design::a_416point_parameter);
        reg.AddEntity( *config_control_design::e_point_on_curve );
}

#endif
