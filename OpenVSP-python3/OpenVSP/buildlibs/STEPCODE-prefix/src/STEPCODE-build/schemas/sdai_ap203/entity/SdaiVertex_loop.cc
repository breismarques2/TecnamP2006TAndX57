#ifndef  ENTITY_SDAIVERTEX_LOOP_CC
#define  ENTITY_SDAIVERTEX_LOOP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiVertex_loop.h"

EntityDescriptor * config_control_design::e_vertex_loop = 0;
AttrDescriptor * config_control_design::a_282loop_vertex = 0;

SdaiVertex_loop::SdaiVertex_loop(): SdaiLoop(), _loop_vertex( 0 ) {
        /*  parent: SdaiLoop  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_vertex_loop;
    STEPattribute * a = new STEPattribute( * config_control_design::a_282loop_vertex, ( SDAI_Application_instance_ptr * ) & _loop_vertex );
    a->set_null();
    attributes.push( a );
}

SdaiVertex_loop::SdaiVertex_loop ( SdaiVertex_loop & e ) : SdaiLoop() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiVertex_loop::~SdaiVertex_loop() {
}

SdaiVertex_loop::SdaiVertex_loop( SDAI_Application_instance * se, bool addAttrs ) : SdaiLoop( se, addAttrs ), _loop_vertex( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiLoop */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_vertex_loop;
    STEPattribute * a = new STEPattribute( * config_control_design::a_282loop_vertex, ( SDAI_Application_instance_ptr * ) &_loop_vertex );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiVertex_ptr SdaiVertex_loop::loop_vertex_() {
    if( !_loop_vertex ) {
        _loop_vertex = new SdaiVertex;
    }
    return (SdaiVertex_ptr) _loop_vertex;
}

SdaiVertex_ptr_c SdaiVertex_loop::loop_vertex_() const {
    return (SdaiVertex_ptr) _loop_vertex;
}

void SdaiVertex_loop::loop_vertex_( const SdaiVertex_ptr x ) {
    _loop_vertex = x;
}

void init_SdaiVertex_loop( Registry& reg ) {
    std::string str;

    config_control_design::e_vertex_loop->AddSupertype(config_control_design::e_loop);
    config_control_design::e_loop->AddSubtype(config_control_design::e_vertex_loop);
    config_control_design::a_282loop_vertex =
      new AttrDescriptor( "loop_vertex", config_control_design::e_vertex, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_vertex_loop);
        config_control_design::e_vertex_loop->AddExplicitAttr (config_control_design::a_282loop_vertex);
        reg.AddEntity( *config_control_design::e_vertex_loop );
}

#endif
