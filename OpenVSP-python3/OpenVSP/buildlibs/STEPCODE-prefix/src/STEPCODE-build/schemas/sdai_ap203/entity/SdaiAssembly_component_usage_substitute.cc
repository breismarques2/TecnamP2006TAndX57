#ifndef  ENTITY_SDAIASSEMBLY_COMPONENT_USAGE_SUBSTITUTE_CC
#define  ENTITY_SDAIASSEMBLY_COMPONENT_USAGE_SUBSTITUTE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAssembly_component_usage_substitute.h"

EntityDescriptor * config_control_design::e_assembly_component_usage_substitute = 0;
AttrDescriptor * config_control_design::a_40name = 0;
AttrDescriptor * config_control_design::a_41definition = 0;
AttrDescriptor * config_control_design::a_42base = 0;
AttrDescriptor * config_control_design::a_43substitute = 0;

SdaiAssembly_component_usage_substitute::SdaiAssembly_component_usage_substitute() : _base( 0 ), _substitute( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_assembly_component_usage_substitute;
    STEPattribute * a = new STEPattribute( * config_control_design::a_40name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_41definition, & _definition );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_42base, ( SDAI_Application_instance_ptr * ) & _base );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_43substitute, ( SDAI_Application_instance_ptr * ) & _substitute );
    a->set_null();
    attributes.push( a );
}

SdaiAssembly_component_usage_substitute::SdaiAssembly_component_usage_substitute ( SdaiAssembly_component_usage_substitute & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAssembly_component_usage_substitute::~SdaiAssembly_component_usage_substitute() {
}

SdaiAssembly_component_usage_substitute::SdaiAssembly_component_usage_substitute( SDAI_Application_instance * se, bool addAttrs ) : _base( 0 ), _substitute( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_assembly_component_usage_substitute;
    STEPattribute * a = new STEPattribute( * config_control_design::a_40name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_41definition,  &_definition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_42base, ( SDAI_Application_instance_ptr * ) &_base );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_43substitute, ( SDAI_Application_instance_ptr * ) &_substitute );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiAssembly_component_usage_substitute::name_() {
    return _name;
}

const SdaiLabel SdaiAssembly_component_usage_substitute::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiAssembly_component_usage_substitute::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiAssembly_component_usage_substitute::definition_() {
    return _definition;
}

const SdaiText SdaiAssembly_component_usage_substitute::definition_() const {
    return (const SdaiText) _definition;
}

void SdaiAssembly_component_usage_substitute::definition_( const SdaiText x ) {
    _definition = x;
}

SdaiAssembly_component_usage_ptr SdaiAssembly_component_usage_substitute::base_() {
    if( !_base ) {
        _base = new SdaiAssembly_component_usage;
    }
    return (SdaiAssembly_component_usage_ptr) _base;
}

SdaiAssembly_component_usage_ptr_c SdaiAssembly_component_usage_substitute::base_() const {
    return (SdaiAssembly_component_usage_ptr) _base;
}

void SdaiAssembly_component_usage_substitute::base_( const SdaiAssembly_component_usage_ptr x ) {
    _base = x;
}

SdaiAssembly_component_usage_ptr SdaiAssembly_component_usage_substitute::substitute_() {
    if( !_substitute ) {
        _substitute = new SdaiAssembly_component_usage;
    }
    return (SdaiAssembly_component_usage_ptr) _substitute;
}

SdaiAssembly_component_usage_ptr_c SdaiAssembly_component_usage_substitute::substitute_() const {
    return (SdaiAssembly_component_usage_ptr) _substitute;
}

void SdaiAssembly_component_usage_substitute::substitute_( const SdaiAssembly_component_usage_ptr x ) {
    _substitute = x;
}

void init_SdaiAssembly_component_usage_substitute( Registry& reg ) {
    std::string str;

    config_control_design::e_assembly_component_usage_substitute->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "base.relating_product_definition :=: substitute.relating_product_definition\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_assembly_component_usage_substitute->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "base :<>: substitute\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_assembly_component_usage_substitute->_where_rules->Append( wr );
        config_control_design::e_assembly_component_usage_substitute->_uniqueness_rules = new Uniqueness_rule__set;
        Uniqueness_rule * ur;
        str.clear();
    str.append( "UR1 : " );
    str.append( "base\n" );
    str.append( ", " );
    str.append( "substitute\n" );
    ur = new Uniqueness_rule( str.c_str() );
    config_control_design::e_assembly_component_usage_substitute->_uniqueness_rules->Append(ur);
        config_control_design::a_40name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_assembly_component_usage_substitute);
        config_control_design::e_assembly_component_usage_substitute->AddExplicitAttr (config_control_design::a_40name);
        config_control_design::a_41definition =
          new AttrDescriptor("definition",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_assembly_component_usage_substitute);
        config_control_design::e_assembly_component_usage_substitute->AddExplicitAttr (config_control_design::a_41definition);
    config_control_design::a_42base =
      new AttrDescriptor( "base", config_control_design::e_assembly_component_usage, LFalse,
       LTrue, AttrType_Explicit, *config_control_design::e_assembly_component_usage_substitute);
        config_control_design::e_assembly_component_usage_substitute->AddExplicitAttr (config_control_design::a_42base);
    config_control_design::a_43substitute =
      new AttrDescriptor( "substitute", config_control_design::e_assembly_component_usage, LFalse,
       LTrue, AttrType_Explicit, *config_control_design::e_assembly_component_usage_substitute);
        config_control_design::e_assembly_component_usage_substitute->AddExplicitAttr (config_control_design::a_43substitute);
        reg.AddEntity( *config_control_design::e_assembly_component_usage_substitute );
}

#endif
