#ifndef  ENTITY_SDAIADVANCED_FACE_CC
#define  ENTITY_SDAIADVANCED_FACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAdvanced_face.h"

EntityDescriptor * config_control_design::e_advanced_face = 0;

SdaiAdvanced_face::SdaiAdvanced_face(): SdaiFace_surface() {
        /*  parent: SdaiFace_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_advanced_face;
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiAdvanced_face::SdaiAdvanced_face ( SdaiAdvanced_face & e ) : SdaiFace_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAdvanced_face::~SdaiAdvanced_face() {
}

SdaiAdvanced_face::SdaiAdvanced_face( SDAI_Application_instance * se, bool addAttrs ) : SdaiFace_surface( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiFace_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_advanced_face;
    MakeDerived( "dim", "geometric_representation_item" );
}


void init_SdaiAdvanced_face( Registry& reg ) {
    std::string str;

    config_control_design::e_advanced_face->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( [ 'CONFIG_CONTROL_DESIGN.ELEMENTARY_SURFACE', 'CONFIG_CONTROL_DESIGN.B_SPLINE_SURFACE', 'CONFIG_CONTROL_DESIGN.'\n" );
    str.append( "      + 'SWEPT_SURFACE' ] * TYPEOF( face_geometry ) ) = 1\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe <* elp_fbnds.bound\\path.edge_list | ( NOT ( 'CONFIG_CONTROL_DESIGN.EDGE_CURVE' IN TYPEOF( oe\\\n" );
    str.append( "      oriented_edge.edge_element ) ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr3: (" );
    str.append( "SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe <* elp_fbnds.bound\\path.edge_list | ( NOT ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.LINE', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.CONIC' , 'CONFIG_CONTROL_DESIGN.POLYLINE', 'CONFIG_CONTROL_DESIGN.SURFACE_CURVE', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.B_SPLINE_CURVE' ] * TYPEOF( oe.edge_element\\edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr4: (" );
    str.append( "SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe <* elp_fbnds.bound\\path.edge_list | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.VERTEX_POINT' IN TYPEOF( oe\\edge.\n" );
    str.append( "      edge_start ) ) AND ( 'CONFIG_CONTROL_DESIGN.CARTESIAN_POINT' IN TYPEOF( oe\\edge.edge_start\\vertex_point.vertex_geometry ) ) \n" );
    str.append( "      AND ( 'CONFIG_CONTROL_DESIGN.VERTEX_POINT' IN TYPEOF( oe\\edge.edge_end ) ) AND ( 'CONFIG_CONTROL_DESIGN.CARTESIAN_POINT' IN \n" );
    str.append( "      TYPEOF( oe\\edge.edge_end\\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr5: (" );
    str.append( "SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.ORIENTED_PATH'  IN TYPEOF( elp_fbnds.bound ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr6: (" );
    str.append( "( NOT ( 'CONFIG_CONTROL_DESIGN.SWEPT_SURFACE' IN TYPEOF( face_geometry ) ) ) OR ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.LINE', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.CONIC' , 'CONFIG_CONTROL_DESIGN.POLYLINE', 'CONFIG_CONTROL_DESIGN.B_SPLINE_CURVE'] * TYPEOF( \n" );
    str.append( "      face_geometry\\swept_surface.swept_curve ) ) = 1 )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr7: (" );
    str.append( "SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* bounds | ( 'CONFIG_CONTROL_DESIGN.VERTEX_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT \n" );
    str.append( "      ( ( 'CONFIG_CONTROL_DESIGN.VERTEX_POINT' IN TYPEOF( vlp_fbnds\\face_bound.bound\\vertex_loop.loop_vertex ) ) AND ( \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.CARTESIAN_POINT'  IN TYPEOF( vlp_fbnds\\face_bound.bound\\vertex_loop.loop_vertex\\vertex_point.\n" );
    str.append( "      vertex_geometry ) ) ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr8: (" );
    str.append( "SIZEOF( QUERY ( bnd <* bounds | ( NOT ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.EDGE_LOOP', 'CONFIG_CONTROL_DESIGN.VERTEX_LOOP'] * \n" );
    str.append( "      TYPEOF( bnd.bound ) ) = 1 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr9: (" );
    str.append( "SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe <* elp_fbnds.bound\\path.edge_list | ( ( 'CONFIG_CONTROL_DESIGN.SURFACE_CURVE' IN TYPEOF( oe\\oriented_edge\n" );
    str.append( "      .edge_element\\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( QUERY ( sc_ag <* oe.edge_element\\edge_curve.edge_geometry\\\n" );
    str.append( "      surface_curve.associated_geometry | ( NOT ( 'CONFIG_CONTROL_DESIGN.PCURVE' IN TYPEOF( sc_ag ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) \n" );
    str.append( "      = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
        str.clear();
        str.append( "wr10: (" );
    str.append( "( ( NOT ( 'CONFIG_CONTROL_DESIGN.SWEPT_SURFACE' IN TYPEOF( face_geometry ) ) ) OR ( NOT ( 'CONFIG_CONTROL_DESIGN.POLYLINE' IN \n" );
    str.append( "      TYPEOF( face_geometry\\swept_surface.swept_curve ) ) ) OR ( SIZEOF( face_geometry\\swept_surface.swept_curve\\polyline.points ) \n" );
    str.append( "      >= 3 ) ) AND ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.\n" );
    str.append( "      bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\\path.edge_list | ( ( 'CONFIG_CONTROL_DESIGN.POLYLINE' IN \n" );
    str.append( "      TYPEOF( oe\\oriented_edge.edge_element\\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( oe\\oriented_edge.edge_element\\\n" );
    str.append( "      edge_curve.edge_geometry\\polyline.points ) >= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_advanced_face->_where_rules->Append( wr );
    config_control_design::e_advanced_face->AddSupertype(config_control_design::e_face_surface);
    config_control_design::e_face_surface->AddSubtype(config_control_design::e_advanced_face);
        reg.AddEntity( *config_control_design::e_advanced_face );
}

#endif
