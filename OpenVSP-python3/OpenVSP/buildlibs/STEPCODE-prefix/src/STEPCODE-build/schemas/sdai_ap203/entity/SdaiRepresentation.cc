#ifndef  ENTITY_SDAIREPRESENTATION_CC
#define  ENTITY_SDAIREPRESENTATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRepresentation.h"

EntityDescriptor * config_control_design::e_representation = 0;
AttrDescriptor * config_control_design::a_3name = 0;
AttrDescriptor * config_control_design::a_4items = 0;
AttrDescriptor * config_control_design::a_5context_of_items = 0;

SdaiRepresentation::SdaiRepresentation() : _items( 0 ), _context_of_items( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_representation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_3name, & _name );
    a->set_null();
    attributes.push( a );
    _items = new EntityAggregate;
    a = new STEPattribute( * config_control_design::a_4items, _items );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_5context_of_items, ( SDAI_Application_instance_ptr * ) & _context_of_items );
    a->set_null();
    attributes.push( a );
}

SdaiRepresentation::SdaiRepresentation ( SdaiRepresentation & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRepresentation::~SdaiRepresentation() {
    delete _items;
}

SdaiRepresentation::SdaiRepresentation( SDAI_Application_instance * se, bool addAttrs ) : _items( 0 ), _context_of_items( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_representation;
    STEPattribute * a = new STEPattribute( * config_control_design::a_3name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _items = new EntityAggregate;
    a = new STEPattribute( * config_control_design::a_4items,  _items );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_5context_of_items, ( SDAI_Application_instance_ptr * ) &_context_of_items );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiRepresentation::name_() {
    return _name;
}

const SdaiLabel SdaiRepresentation::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiRepresentation::name_( const SdaiLabel x ) {
    _name = x;
}

EntityAggregate_ptr SdaiRepresentation::items_() {
    if( !_items ) {
        _items = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _items;
}

EntityAggregate_ptr_c SdaiRepresentation::items_() const {
    return ( EntityAggregate_ptr ) _items;
}

void SdaiRepresentation::items_( const EntityAggregate_ptr x ) {
    if( !_items ) {
        _items = new EntityAggregate;
    }
    _items->ShallowCopy( * x );
}

SdaiRepresentation_context_ptr SdaiRepresentation::context_of_items_() {
    if( !_context_of_items ) {
        _context_of_items = new SdaiRepresentation_context;
    }
    return (SdaiRepresentation_context_ptr) _context_of_items;
}

SdaiRepresentation_context_ptr_c SdaiRepresentation::context_of_items_() const {
    return (SdaiRepresentation_context_ptr) _context_of_items;
}

void SdaiRepresentation::context_of_items_( const SdaiRepresentation_context_ptr x ) {
    _context_of_items = x;
}

void init_SdaiRepresentation( Registry& reg ) {
    std::string str;

        config_control_design::a_3name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_representation);
        config_control_design::e_representation->AddExplicitAttr (config_control_design::a_3name);
        SetTypeDescriptor * t_0 = new SetTypeDescriptor;
        t_0->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_0->SetBound1( 1 );
        t_0->SetBound2( 2147483647 );
        t_0->FundamentalType(SET_TYPE);
        t_0->Description("SET [1:?] OF representation_item");
        t_0->OriginatingSchema(config_control_design::schema);
        t_0->ReferentType(config_control_design::e_representation_item);
        config_control_design::schema->AddUnnamedType(t_0);
        config_control_design::a_4items =
          new AttrDescriptor("items",t_0,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_representation);
        config_control_design::e_representation->AddExplicitAttr (config_control_design::a_4items);
    config_control_design::a_5context_of_items =
      new AttrDescriptor( "context_of_items", config_control_design::e_representation_context, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_representation);
        config_control_design::e_representation->AddExplicitAttr (config_control_design::a_5context_of_items);
        reg.AddEntity( *config_control_design::e_representation );
}

#endif
