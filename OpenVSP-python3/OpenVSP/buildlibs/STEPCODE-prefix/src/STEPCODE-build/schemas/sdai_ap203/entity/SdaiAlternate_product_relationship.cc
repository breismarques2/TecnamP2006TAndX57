#ifndef  ENTITY_SDAIALTERNATE_PRODUCT_RELATIONSHIP_CC
#define  ENTITY_SDAIALTERNATE_PRODUCT_RELATIONSHIP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAlternate_product_relationship.h"

EntityDescriptor * config_control_design::e_alternate_product_relationship = 0;
AttrDescriptor * config_control_design::a_403name = 0;
AttrDescriptor * config_control_design::a_404definition = 0;
AttrDescriptor * config_control_design::a_405alternate = 0;
AttrDescriptor * config_control_design::a_406base = 0;
AttrDescriptor * config_control_design::a_407basis = 0;

SdaiAlternate_product_relationship::SdaiAlternate_product_relationship() : _alternate( 0 ), _base( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_alternate_product_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_403name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_404definition, & _definition );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_405alternate, ( SDAI_Application_instance_ptr * ) & _alternate );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_406base, ( SDAI_Application_instance_ptr * ) & _base );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_407basis, & _basis );
    a->set_null();
    attributes.push( a );
}

SdaiAlternate_product_relationship::SdaiAlternate_product_relationship ( SdaiAlternate_product_relationship & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAlternate_product_relationship::~SdaiAlternate_product_relationship() {
}

SdaiAlternate_product_relationship::SdaiAlternate_product_relationship( SDAI_Application_instance * se, bool addAttrs ) : _alternate( 0 ), _base( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_alternate_product_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_403name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_404definition,  &_definition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_405alternate, ( SDAI_Application_instance_ptr * ) &_alternate );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_406base, ( SDAI_Application_instance_ptr * ) &_base );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_407basis,  &_basis );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiAlternate_product_relationship::name_() {
    return _name;
}

const SdaiLabel SdaiAlternate_product_relationship::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiAlternate_product_relationship::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiAlternate_product_relationship::definition_() {
    return _definition;
}

const SdaiText SdaiAlternate_product_relationship::definition_() const {
    return (const SdaiText) _definition;
}

void SdaiAlternate_product_relationship::definition_( const SdaiText x ) {
    _definition = x;
}

SdaiProduct_ptr SdaiAlternate_product_relationship::alternate_() {
    if( !_alternate ) {
        _alternate = new SdaiProduct;
    }
    return (SdaiProduct_ptr) _alternate;
}

SdaiProduct_ptr_c SdaiAlternate_product_relationship::alternate_() const {
    return (SdaiProduct_ptr) _alternate;
}

void SdaiAlternate_product_relationship::alternate_( const SdaiProduct_ptr x ) {
    _alternate = x;
}

SdaiProduct_ptr SdaiAlternate_product_relationship::base_() {
    if( !_base ) {
        _base = new SdaiProduct;
    }
    return (SdaiProduct_ptr) _base;
}

SdaiProduct_ptr_c SdaiAlternate_product_relationship::base_() const {
    return (SdaiProduct_ptr) _base;
}

void SdaiAlternate_product_relationship::base_( const SdaiProduct_ptr x ) {
    _base = x;
}

SdaiText SdaiAlternate_product_relationship::basis_() {
    return _basis;
}

const SdaiText SdaiAlternate_product_relationship::basis_() const {
    return (const SdaiText) _basis;
}

void SdaiAlternate_product_relationship::basis_( const SdaiText x ) {
    _basis = x;
}

void init_SdaiAlternate_product_relationship( Registry& reg ) {
    std::string str;

    config_control_design::e_alternate_product_relationship->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "alternate :<>: base\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_alternate_product_relationship->_where_rules->Append( wr );
        config_control_design::e_alternate_product_relationship->_uniqueness_rules = new Uniqueness_rule__set;
        Uniqueness_rule * ur;
        str.clear();
    str.append( "UR1 : " );
    str.append( "alternate\n" );
    str.append( ", " );
    str.append( "base\n" );
    ur = new Uniqueness_rule( str.c_str() );
    config_control_design::e_alternate_product_relationship->_uniqueness_rules->Append(ur);
        config_control_design::a_403name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_alternate_product_relationship);
        config_control_design::e_alternate_product_relationship->AddExplicitAttr (config_control_design::a_403name);
        config_control_design::a_404definition =
          new AttrDescriptor("definition",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_alternate_product_relationship);
        config_control_design::e_alternate_product_relationship->AddExplicitAttr (config_control_design::a_404definition);
    config_control_design::a_405alternate =
      new AttrDescriptor( "alternate", config_control_design::e_product, LFalse,
       LTrue, AttrType_Explicit, *config_control_design::e_alternate_product_relationship);
        config_control_design::e_alternate_product_relationship->AddExplicitAttr (config_control_design::a_405alternate);
    config_control_design::a_406base =
      new AttrDescriptor( "base", config_control_design::e_product, LFalse,
       LTrue, AttrType_Explicit, *config_control_design::e_alternate_product_relationship);
        config_control_design::e_alternate_product_relationship->AddExplicitAttr (config_control_design::a_406base);
        config_control_design::a_407basis =
          new AttrDescriptor("basis",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_alternate_product_relationship);
        config_control_design::e_alternate_product_relationship->AddExplicitAttr (config_control_design::a_407basis);
        reg.AddEntity( *config_control_design::e_alternate_product_relationship );
}

#endif
