#ifndef  ENTITY_SDAICONNECTED_FACE_SET_CC
#define  ENTITY_SDAICONNECTED_FACE_SET_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiConnected_face_set.h"

EntityDescriptor * config_control_design::e_connected_face_set = 0;
AttrDescriptor * config_control_design::a_216cfs_faces = 0;

SdaiConnected_face_set::SdaiConnected_face_set(): SdaiTopological_representation_item(), _cfs_faces( 0 ) {
        /*  parent: SdaiTopological_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_connected_face_set;
    _cfs_faces = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_216cfs_faces, _cfs_faces );
    a->set_null();
    attributes.push( a );
}

SdaiConnected_face_set::SdaiConnected_face_set ( SdaiConnected_face_set & e ) : SdaiTopological_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiConnected_face_set::~SdaiConnected_face_set() {
    delete _cfs_faces;
}

SdaiConnected_face_set::SdaiConnected_face_set( SDAI_Application_instance * se, bool addAttrs ) : SdaiTopological_representation_item( se, addAttrs ), _cfs_faces( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiTopological_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_connected_face_set;
    _cfs_faces = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_216cfs_faces,  _cfs_faces );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


EntityAggregate_ptr SdaiConnected_face_set::cfs_faces_() {
    if( !_cfs_faces ) {
        _cfs_faces = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _cfs_faces;
}

EntityAggregate_ptr_c SdaiConnected_face_set::cfs_faces_() const {
    return ( EntityAggregate_ptr ) _cfs_faces;
}

void SdaiConnected_face_set::cfs_faces_( const EntityAggregate_ptr x ) {
    if( !_cfs_faces ) {
        _cfs_faces = new EntityAggregate;
    }
    _cfs_faces->ShallowCopy( * x );
}

void init_SdaiConnected_face_set( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( closed_shell, open_shell )\n" );
    str.append( ")" );
    config_control_design::e_connected_face_set->AddSupertype_Stmt( str );
    config_control_design::e_connected_face_set->AddSupertype(config_control_design::e_topological_representation_item);
    config_control_design::e_topological_representation_item->AddSubtype(config_control_design::e_connected_face_set);
        SetTypeDescriptor * t_43 = new SetTypeDescriptor;
        t_43->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_43->SetBound1( 1 );
        t_43->SetBound2( 2147483647 );
        t_43->FundamentalType(SET_TYPE);
        t_43->Description("SET [1:?] OF face");
        t_43->OriginatingSchema(config_control_design::schema);
        t_43->ReferentType(config_control_design::e_face);
        config_control_design::schema->AddUnnamedType(t_43);
        config_control_design::a_216cfs_faces =
          new AttrDescriptor("cfs_faces",t_43,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_connected_face_set);
        config_control_design::e_connected_face_set->AddExplicitAttr (config_control_design::a_216cfs_faces);
        reg.AddEntity( *config_control_design::e_connected_face_set );
}

#endif
