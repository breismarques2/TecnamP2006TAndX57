#ifndef  ENTITY_SDAIEDGE_LOOP_CC
#define  ENTITY_SDAIEDGE_LOOP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiEdge_loop.h"

EntityDescriptor * config_control_design::e_edge_loop = 0;
Derived_attribute * config_control_design::a_285Dne = 0;

SdaiEdge_loop::SdaiEdge_loop(): SdaiLoop(), _edge_list( 0 ) {
        /*  parent: SdaiLoop  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */
        /*  parent: SdaiPath  */
    HeadEntity(this);
    AppendMultInstance(new SdaiPath(this));

    eDesc = config_control_design::e_edge_loop;
    MakeDerived( "ne", "edge_loop" );
}

SdaiEdge_loop::SdaiEdge_loop ( SdaiEdge_loop & e ) : SdaiLoop() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiEdge_loop::~SdaiEdge_loop() {
}

SdaiEdge_loop::SdaiEdge_loop( SDAI_Application_instance * se, bool addAttrs ) : SdaiLoop( se, addAttrs ), _edge_list( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiLoop */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */
        /* parent: SdaiPath */
    se->AppendMultInstance( new SdaiPath( se, addAttrs ) );

    eDesc = config_control_design::e_edge_loop;
    MakeDerived( "ne", "edge_loop" );
}


EntityAggregate_ptr SdaiEdge_loop::edge_list_() {
    if( !_edge_list ) {
        _edge_list = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _edge_list;
}

EntityAggregate_ptr_c SdaiEdge_loop::edge_list_() const {
    return ( EntityAggregate_ptr ) _edge_list;
}

void SdaiEdge_loop::edge_list_( const EntityAggregate_ptr x ) {
    if( !_edge_list ) {
        _edge_list = new EntityAggregate;
    }
    _edge_list->ShallowCopy( * x );
}

void init_SdaiEdge_loop( Registry& reg ) {
    std::string str;

    config_control_design::e_edge_loop->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SELF\\path.edge_list[1].edge_start :=: SELF\\path.edge_list[ne].edge_end\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_edge_loop->_where_rules->Append( wr );
    config_control_design::e_edge_loop->AddSupertype(config_control_design::e_loop);
    config_control_design::e_loop->AddSubtype(config_control_design::e_edge_loop);
    config_control_design::e_edge_loop->AddSupertype(config_control_design::e_path);
    config_control_design::e_path->AddSubtype(config_control_design::e_edge_loop);
        config_control_design::a_285Dne =
          new Derived_attribute("ne",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_edge_loop);
        config_control_design::e_edge_loop->AddExplicitAttr (config_control_design::a_285Dne);
        config_control_design::a_285Dne->initializer_("SIZEOF( SELF\\path.edge_list )");
        reg.AddEntity( *config_control_design::e_edge_loop );
}

#endif
