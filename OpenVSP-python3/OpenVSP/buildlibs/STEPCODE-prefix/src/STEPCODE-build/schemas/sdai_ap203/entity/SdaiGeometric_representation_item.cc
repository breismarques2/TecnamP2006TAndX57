#ifndef  ENTITY_SDAIGEOMETRIC_REPRESENTATION_ITEM_CC
#define  ENTITY_SDAIGEOMETRIC_REPRESENTATION_ITEM_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiGeometric_representation_item.h"

EntityDescriptor * config_control_design::e_geometric_representation_item = 0;
Derived_attribute * config_control_design::a_12Ddim = 0;

SdaiGeometric_representation_item::SdaiGeometric_representation_item(): SdaiRepresentation_item() {
        /*  parent: SdaiRepresentation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_geometric_representation_item;
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiGeometric_representation_item::SdaiGeometric_representation_item ( SdaiGeometric_representation_item & e ) : SdaiRepresentation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiGeometric_representation_item::~SdaiGeometric_representation_item() {
}

SdaiGeometric_representation_item::SdaiGeometric_representation_item( SDAI_Application_instance * se, bool addAttrs ) : SdaiRepresentation_item( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiRepresentation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_geometric_representation_item;
    MakeDerived( "dim", "geometric_representation_item" );
}


void init_SdaiGeometric_representation_item( Registry& reg ) {
    std::string str;

    config_control_design::e_geometric_representation_item->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( QUERY ( using_rep <* using_representations( SELF ) | ( NOT ( 'CONFIG_CONTROL_DESIGN.GEOMETRIC_REPRESENTATION_CONTEXT' IN \n" );
    str.append( "      TYPEOF( using_rep.context_of_items ) ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_geometric_representation_item->_where_rules->Append( wr );
    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( point, direction, vector, placement, cartesian_transformation_operator, curve, surface, edge_curve, face_surface, \n" );
    str.append( "          poly_loop, vertex_point, solid_model, shell_based_surface_model, shell_based_wireframe_model, edge_based_wireframe_model, \n" );
    str.append( "          geometric_set )\n" );
    str.append( ")" );
    config_control_design::e_geometric_representation_item->AddSupertype_Stmt( str );
    config_control_design::e_geometric_representation_item->AddSupertype(config_control_design::e_representation_item);
    config_control_design::e_representation_item->AddSubtype(config_control_design::e_geometric_representation_item);
        config_control_design::a_12Ddim =
          new Derived_attribute("dim",config_control_design::t_dimension_count,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_geometric_representation_item);
        config_control_design::e_geometric_representation_item->AddExplicitAttr (config_control_design::a_12Ddim);
        config_control_design::a_12Ddim->initializer_("dimension_of( SELF )");
        reg.AddEntity( *config_control_design::e_geometric_representation_item );
}

#endif
