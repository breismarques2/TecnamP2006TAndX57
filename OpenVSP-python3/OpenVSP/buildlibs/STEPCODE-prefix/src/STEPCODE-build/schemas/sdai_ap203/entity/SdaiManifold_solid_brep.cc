#ifndef  ENTITY_SDAIMANIFOLD_SOLID_BREP_CC
#define  ENTITY_SDAIMANIFOLD_SOLID_BREP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiManifold_solid_brep.h"

EntityDescriptor * config_control_design::e_manifold_solid_brep = 0;
AttrDescriptor * config_control_design::a_48outer = 0;

SdaiManifold_solid_brep::SdaiManifold_solid_brep(): SdaiSolid_model(), _outer( 0 ) {
        /*  parent: SdaiSolid_model  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_manifold_solid_brep;
    STEPattribute * a = new STEPattribute( * config_control_design::a_48outer, ( SDAI_Application_instance_ptr * ) & _outer );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiManifold_solid_brep::SdaiManifold_solid_brep ( SdaiManifold_solid_brep & e ) : SdaiSolid_model() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiManifold_solid_brep::~SdaiManifold_solid_brep() {
}

SdaiManifold_solid_brep::SdaiManifold_solid_brep( SDAI_Application_instance * se, bool addAttrs ) : SdaiSolid_model( se, addAttrs ), _outer( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiSolid_model */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_manifold_solid_brep;
    STEPattribute * a = new STEPattribute( * config_control_design::a_48outer, ( SDAI_Application_instance_ptr * ) &_outer );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiClosed_shell_ptr SdaiManifold_solid_brep::outer_() {
    if( !_outer ) {
        _outer = new SdaiClosed_shell;
    }
    return (SdaiClosed_shell_ptr) _outer;
}

SdaiClosed_shell_ptr_c SdaiManifold_solid_brep::outer_() const {
    return (SdaiClosed_shell_ptr) _outer;
}

void SdaiManifold_solid_brep::outer_( const SdaiClosed_shell_ptr x ) {
    _outer = x;
}

void init_SdaiManifold_solid_brep( Registry& reg ) {
    std::string str;

    config_control_design::e_manifold_solid_brep->AddSupertype(config_control_design::e_solid_model);
    config_control_design::e_solid_model->AddSubtype(config_control_design::e_manifold_solid_brep);
    config_control_design::a_48outer =
      new AttrDescriptor( "outer", config_control_design::e_closed_shell, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_manifold_solid_brep);
        config_control_design::e_manifold_solid_brep->AddExplicitAttr (config_control_design::a_48outer);
        reg.AddEntity( *config_control_design::e_manifold_solid_brep );
}

#endif
