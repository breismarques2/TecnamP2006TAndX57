#ifndef  ENTITY_SDAICONICAL_SURFACE_CC
#define  ENTITY_SDAICONICAL_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiConical_surface.h"

EntityDescriptor * config_control_design::e_conical_surface = 0;
AttrDescriptor * config_control_design::a_431radius = 0;
AttrDescriptor * config_control_design::a_432semi_angle = 0;

SdaiConical_surface::SdaiConical_surface(): SdaiElementary_surface() {
        /*  parent: SdaiElementary_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_conical_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_431radius, & _radius );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_432semi_angle, & _semi_angle );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiConical_surface::SdaiConical_surface ( SdaiConical_surface & e ) : SdaiElementary_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiConical_surface::~SdaiConical_surface() {
}

SdaiConical_surface::SdaiConical_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiElementary_surface( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiElementary_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_conical_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_431radius,  &_radius );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_432semi_angle,  &_semi_angle );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiLength_measure SdaiConical_surface::radius_() const {
    return (SdaiLength_measure) _radius;
}

void SdaiConical_surface::radius_( const SdaiLength_measure x ) {
    _radius = x;
}

SdaiPlane_angle_measure SdaiConical_surface::semi_angle_() const {
    return (SdaiPlane_angle_measure) _semi_angle;
}

void SdaiConical_surface::semi_angle_( const SdaiPlane_angle_measure x ) {
    _semi_angle = x;
}

void init_SdaiConical_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_conical_surface->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "radius >= 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_conical_surface->_where_rules->Append( wr );
    config_control_design::e_conical_surface->AddSupertype(config_control_design::e_elementary_surface);
    config_control_design::e_elementary_surface->AddSubtype(config_control_design::e_conical_surface);
        config_control_design::a_431radius =
          new AttrDescriptor("radius",config_control_design::t_length_measure,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_conical_surface);
        config_control_design::e_conical_surface->AddExplicitAttr (config_control_design::a_431radius);
        config_control_design::a_432semi_angle =
          new AttrDescriptor("semi_angle",config_control_design::t_plane_angle_measure,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_conical_surface);
        config_control_design::e_conical_surface->AddExplicitAttr (config_control_design::a_432semi_angle);
        reg.AddEntity( *config_control_design::e_conical_surface );
}

#endif
