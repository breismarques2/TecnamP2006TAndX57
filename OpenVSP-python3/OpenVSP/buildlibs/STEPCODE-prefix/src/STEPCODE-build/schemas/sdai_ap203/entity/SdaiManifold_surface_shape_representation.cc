#ifndef  ENTITY_SDAIMANIFOLD_SURFACE_SHAPE_REPRESENTATION_CC
#define  ENTITY_SDAIMANIFOLD_SURFACE_SHAPE_REPRESENTATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiManifold_surface_shape_representation.h"

EntityDescriptor * config_control_design::e_manifold_surface_shape_representation = 0;

SdaiManifold_surface_shape_representation::SdaiManifold_surface_shape_representation(): SdaiShape_representation() {
        /*  parent: SdaiShape_representation  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_manifold_surface_shape_representation;
}

SdaiManifold_surface_shape_representation::SdaiManifold_surface_shape_representation ( SdaiManifold_surface_shape_representation & e ) : SdaiShape_representation() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiManifold_surface_shape_representation::~SdaiManifold_surface_shape_representation() {
}

SdaiManifold_surface_shape_representation::SdaiManifold_surface_shape_representation( SDAI_Application_instance * se, bool addAttrs ) : SdaiShape_representation( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiShape_representation */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_manifold_surface_shape_representation;
}


void init_SdaiManifold_surface_shape_representation( Registry& reg ) {
    std::string str;

    config_control_design::e_manifold_surface_shape_representation->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SIZEOF( QUERY ( it <* SELF.items | ( NOT ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL', 'CONFIG_CONTROL_DESIGN.'\n" );
    str.append( "      + 'MAPPED_ITEM' , 'CONFIG_CONTROL_DESIGN.AXIS2_PLACEMENT_3D'] * TYPEOF( it ) ) = 1 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "SIZEOF( QUERY ( it <* SELF.items | ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL', 'CONFIG_CONTROL_DESIGN.'\n" );
    str.append( "      + 'MAPPED_ITEM' ] * TYPEOF( it ) ) = 1 ) ) ) > 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr3: (" );
    str.append( "SIZEOF( QUERY ( mi <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.MAPPED_ITEM' IN TYPEOF( it ) ) ) | ( NOT ( ( ( \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.'  + 'MANIFOLD_SURFACE_SHAPE_REPRESENTATION' ) IN TYPEOF( mi\\mapped_item.mapping_source.\n" );
    str.append( "      mapped_representation ) ) AND ( SIZEOF( QUERY ( mr_it <* mi\\mapped_item.mapping_source.mapped_representation.items | ( \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( mr_it ) ) ) ) > 0 ) ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr4: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( sh <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.'\n" );
    str.append( "      + 'OPEN_SHELL' , 'CONFIG_CONTROL_DESIGN.ORIENTED_CLOSED_SHELL', 'CONFIG_CONTROL_DESIGN.CLOSED_SHELL'] * TYPEOF( sh ) ) = 1 ) ) ) ) \n" );
    str.append( "      = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr5: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.FACE_SURFACE', 'CONFIG_CONTROL_DESIGN.ORIENTED_FACE'] \n" );
    str.append( "      * TYPEOF( fa ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr6: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( f_sf <* QUERY ( fa <* \n" );
    str.append( "      cfs\\connected_face_set.cfs_faces | ( 'CONFIG_CONTROL_DESIGN.FACE_SURFACE' IN TYPEOF( fa ) ) ) | ( NOT ( ( \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.ADVANCED_FACE'  IN TYPEOF( f_sf ) ) OR ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.B_SPLINE_SURFACE', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.ELEMENTARY_SURFACE' , 'CONFIG_CONTROL_DESIGN.OFFSET_SURFACE', 'CONFIG_CONTROL_DESIGN.SURFACE_REPLICA', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.SWEPT_SURFACE' ] * TYPEOF( f_sf\\face_surface.face_geometry ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) \n" );
    str.append( "      = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr7: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR msf_surface_check( fa\\\n" );
    str.append( "      face_surface.face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr8: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR ( SIZEOF( \n" );
    str.append( "      QUERY ( bnds <* fa.bounds | ( NOT ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.EDGE_LOOP', 'CONFIG_CONTROL_DESIGN.VERTEX_LOOP'] * \n" );
    str.append( "      TYPEOF( bnds.bound ) ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr9: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR ( SIZEOF( \n" );
    str.append( "      QUERY ( elp_fbnds <* QUERY ( bnds <* fa.bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe <* elp_fbnds\\path.edge_list | ( NOT ( 'CONFIG_CONTROL_DESIGN.EDGE_CURVE' IN TYPEOF( oe.edge_element ) ) ) ) ) \n" );
    str.append( "      = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr10: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR ( SIZEOF( \n" );
    str.append( "      QUERY ( elp_fbnds <* QUERY ( bnds <* fa.bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe_cv <* QUERY ( oe <* elp_fbnds\\path.edge_list | ( 'CONFIG_CONTROL_DESIGN.EDGE_CURVE' IN TYPEOF( oe.\n" );
    str.append( "      edge_element ) ) ) | ( NOT ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.B_SPLINE_CURVE', 'CONFIG_CONTROL_DESIGN.CONIC', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.CURVE_REPLICA' , 'CONFIG_CONTROL_DESIGN.LINE', 'CONFIG_CONTROL_DESIGN.OFFSET_CURVE_3D', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.PCURVE' , 'CONFIG_CONTROL_DESIGN.POLYLINE', 'CONFIG_CONTROL_DESIGN.SURFACE_CURVE'] * TYPEOF( oe_cv.\n" );
    str.append( "      edge_element\\edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr11: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR ( SIZEOF( \n" );
    str.append( "      QUERY ( elp_fbnds <* QUERY ( bnds <* fa.bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe <* elp_fbnds\\path.edge_list | ( NOT msf_curve_check( oe.edge_element\\edge_curve.edge_geometry ) ) ) ) = 0 ) ) ) ) \n" );
    str.append( "      = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr12: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR ( SIZEOF( \n" );
    str.append( "      QUERY ( elp_fbnds <* QUERY ( bnds <* fa.bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe <* elp_fbnds\\path.edge_list | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.VERTEX_POINT' IN TYPEOF( oe.edge_element.\n" );
    str.append( "      edge_start ) ) AND ( 'CONFIG_CONTROL_DESIGN.VERTEX_POINT' IN TYPEOF( oe.edge_element.edge_end ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) \n" );
    str.append( "      = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr13: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR ( SIZEOF( \n" );
    str.append( "      QUERY ( elp_fbnds <* QUERY ( bnds <* fa.bounds | ( 'CONFIG_CONTROL_DESIGN.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT ( \n" );
    str.append( "      SIZEOF( QUERY ( oe <* elp_fbnds\\path.edge_list | ( NOT ( ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.CARTESIAN_POINT', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.DEGENERATE_PCURVE' , 'CONFIG_CONTROL_DESIGN.POINT_ON_CURVE', 'CONFIG_CONTROL_DESIGN.POINT_ON_SURFACE'] \n" );
    str.append( "      * TYPEOF( oe.edge_element.edge_start\\vertex_point.vertex_geometry ) ) = 1 ) AND ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.'\n" );
    str.append( "      + 'CARTESIAN_POINT' , 'CONFIG_CONTROL_DESIGN.DEGENERATE_PCURVE', 'CONFIG_CONTROL_DESIGN.POINT_ON_CURVE', \n" );
    str.append( "      'CONFIG_CONTROL_DESIGN.POINT_ON_SURFACE' ] * TYPEOF( oe.edge_element.edge_end\\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) ) \n" );
    str.append( "      = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr14: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR ( SIZEOF( \n" );
    str.append( "      QUERY ( vlp_fbnds <* QUERY ( bnds <* fa.bounds | ( 'CONFIG_CONTROL_DESIGN.VERTEX_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT \n" );
    str.append( "      ( 'CONFIG_CONTROL_DESIGN.VERTEX_POINT' IN TYPEOF( vlp_fbnds\\vertex_loop.loop_vertex ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) \n" );
    str.append( "      = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
        str.clear();
        str.append( "wr15: (" );
    str.append( "SIZEOF( QUERY ( sbsm <* QUERY ( it <* SELF.items | ( 'CONFIG_CONTROL_DESIGN.SHELL_BASED_SURFACE_MODEL' IN TYPEOF( it ) ) ) | ( \n" );
    str.append( "      NOT ( SIZEOF( QUERY ( cfs <* sbsm\\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa <* cfs\\\n" );
    str.append( "      connected_face_set.cfs_faces | ( NOT ( ( 'CONFIG_CONTROL_DESIGN.ADVANCED_FACE' IN TYPEOF( fa ) ) OR ( SIZEOF( \n" );
    str.append( "      QUERY ( vlp_fbnds <* QUERY ( bnds <* fa.bounds | ( 'CONFIG_CONTROL_DESIGN.VERTEX_LOOP' IN TYPEOF( bnds.bound ) ) ) | ( NOT \n" );
    str.append( "      ( SIZEOF( [ 'CONFIG_CONTROL_DESIGN.CARTESIAN_POINT', 'CONFIG_CONTROL_DESIGN.DEGENERATE_PCURVE', 'CONFIG_CONTROL_DESIGN.'\n" );
    str.append( "      + 'POINT_ON_CURVE' , 'CONFIG_CONTROL_DESIGN.POINT_ON_SURFACE'] * TYPEOF( vlp_fbnds\\vertex_loop.loop_vertex\\vertex_point.\n" );
    str.append( "      vertex_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_manifold_surface_shape_representation->_where_rules->Append( wr );
    config_control_design::e_manifold_surface_shape_representation->AddSupertype(config_control_design::e_shape_representation);
    config_control_design::e_shape_representation->AddSubtype(config_control_design::e_manifold_surface_shape_representation);
        reg.AddEntity( *config_control_design::e_manifold_surface_shape_representation );
}

#endif
