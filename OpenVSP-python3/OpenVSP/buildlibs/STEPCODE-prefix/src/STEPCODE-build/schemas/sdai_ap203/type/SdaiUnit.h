#ifndef  TYPE_SDAIUNIT_H
#define  TYPE_SDAIUNIT_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiUnit
class SC_SCHEMA_EXPORT SdaiUnit  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   NAMED_UNIT    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiUnit( const SelectTypeDescriptor * =config_control_design::t_unit );
    //  part 1
    SdaiUnit( const SdaiNamed_unit_ptr&,
              const SelectTypeDescriptor * =config_control_design::t_unit );
    virtual ~SdaiUnit();

    //  part 2
    operator SdaiNamed_unit_ptr();

    //  part 3
        SdaiDimensional_exponents_ptr_c dimensions_() const;
        SdaiDimensional_exponents_ptr   dimensions_();
        void dimensions_( const SdaiDimensional_exponents_ptr x );


    //  part 4
    SdaiUnit& operator =( const SdaiNamed_unit_ptr& );
    // not in SDAI
    SdaiUnit& ShallowCopy ( const SdaiUnit& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiUnit& operator =( SdaiUnit * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsNamed_unit() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiUnit () { return new SdaiUnit; }
typedef SdaiUnit * SdaiUnitH;
typedef SdaiUnit_ptr SdaiUnit_var;


class SdaiUnit_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiUnit_agg( SelectTypeDescriptor * =config_control_design::t_unit );
    ~SdaiUnit_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiUnit( sel_type )); }
};
inline STEPaggregate * create_SdaiUnit_agg () { return new SdaiUnit_agg; }
typedef SdaiUnit_agg_ptr SdaiUnit_agg_var;

/////  END SELECT TYPE unit

void init_SdaiUnit(Registry& reg);

#endif
