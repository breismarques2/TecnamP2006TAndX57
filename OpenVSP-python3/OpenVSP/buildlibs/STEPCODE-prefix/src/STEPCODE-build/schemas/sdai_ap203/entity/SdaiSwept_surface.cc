#ifndef  ENTITY_SDAISWEPT_SURFACE_CC
#define  ENTITY_SDAISWEPT_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiSwept_surface.h"

EntityDescriptor * config_control_design::e_swept_surface = 0;
AttrDescriptor * config_control_design::a_247swept_curve = 0;

SdaiSwept_surface::SdaiSwept_surface(): SdaiSurface(), _swept_curve( 0 ) {
        /*  parent: SdaiSurface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_swept_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_247swept_curve, ( SDAI_Application_instance_ptr * ) & _swept_curve );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiSwept_surface::SdaiSwept_surface ( SdaiSwept_surface & e ) : SdaiSurface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiSwept_surface::~SdaiSwept_surface() {
}

SdaiSwept_surface::SdaiSwept_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiSurface( se, addAttrs ), _swept_curve( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiSurface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_swept_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_247swept_curve, ( SDAI_Application_instance_ptr * ) &_swept_curve );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiCurve_ptr SdaiSwept_surface::swept_curve_() {
    if( !_swept_curve ) {
        _swept_curve = new SdaiCurve;
    }
    return (SdaiCurve_ptr) _swept_curve;
}

SdaiCurve_ptr_c SdaiSwept_surface::swept_curve_() const {
    return (SdaiCurve_ptr) _swept_curve;
}

void SdaiSwept_surface::swept_curve_( const SdaiCurve_ptr x ) {
    _swept_curve = x;
}

void init_SdaiSwept_surface( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( surface_of_linear_extrusion, surface_of_revolution )\n" );
    str.append( ")" );
    config_control_design::e_swept_surface->AddSupertype_Stmt( str );
    config_control_design::e_swept_surface->AddSupertype(config_control_design::e_surface);
    config_control_design::e_surface->AddSubtype(config_control_design::e_swept_surface);
    config_control_design::a_247swept_curve =
      new AttrDescriptor( "swept_curve", config_control_design::e_curve, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_swept_surface);
        config_control_design::e_swept_surface->AddExplicitAttr (config_control_design::a_247swept_curve);
        reg.AddEntity( *config_control_design::e_swept_surface );
}

#endif
