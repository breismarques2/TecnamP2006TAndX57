#ifndef  ENTITY_SDAIORGANIZATIONAL_ADDRESS_CC
#define  ENTITY_SDAIORGANIZATIONAL_ADDRESS_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOrganizational_address.h"

EntityDescriptor * config_control_design::e_organizational_address = 0;
AttrDescriptor * config_control_design::a_88organizations = 0;
AttrDescriptor * config_control_design::a_89description = 0;

SdaiOrganizational_address::SdaiOrganizational_address(): SdaiAddress(), _organizations( 0 ) {
        /*  parent: SdaiAddress  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_organizational_address;
    _organizations = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_88organizations, _organizations );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_89description, & _description );
    a->set_null();
    attributes.push( a );
}

SdaiOrganizational_address::SdaiOrganizational_address ( SdaiOrganizational_address & e ) : SdaiAddress() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOrganizational_address::~SdaiOrganizational_address() {
    delete _organizations;
}

SdaiOrganizational_address::SdaiOrganizational_address( SDAI_Application_instance * se, bool addAttrs ) : SdaiAddress( se, addAttrs ), _organizations( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiAddress */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_organizational_address;
    _organizations = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_88organizations,  _organizations );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_89description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


EntityAggregate_ptr SdaiOrganizational_address::organizations_() {
    if( !_organizations ) {
        _organizations = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _organizations;
}

EntityAggregate_ptr_c SdaiOrganizational_address::organizations_() const {
    return ( EntityAggregate_ptr ) _organizations;
}

void SdaiOrganizational_address::organizations_( const EntityAggregate_ptr x ) {
    if( !_organizations ) {
        _organizations = new EntityAggregate;
    }
    _organizations->ShallowCopy( * x );
}

SdaiText SdaiOrganizational_address::description_() {
    return _description;
}

const SdaiText SdaiOrganizational_address::description_() const {
    return (const SdaiText) _description;
}

void SdaiOrganizational_address::description_( const SdaiText x ) {
    _description = x;
}

void init_SdaiOrganizational_address( Registry& reg ) {
    std::string str;

    config_control_design::e_organizational_address->AddSupertype(config_control_design::e_address);
    config_control_design::e_address->AddSubtype(config_control_design::e_organizational_address);
        SetTypeDescriptor * t_11 = new SetTypeDescriptor;
        t_11->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_11->SetBound1( 1 );
        t_11->SetBound2( 2147483647 );
        t_11->FundamentalType(SET_TYPE);
        t_11->Description("SET [1:?] OF organization");
        t_11->OriginatingSchema(config_control_design::schema);
        t_11->ReferentType(config_control_design::e_organization);
        config_control_design::schema->AddUnnamedType(t_11);
        config_control_design::a_88organizations =
          new AttrDescriptor("organizations",t_11,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_organizational_address);
        config_control_design::e_organizational_address->AddExplicitAttr (config_control_design::a_88organizations);
        config_control_design::a_89description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_organizational_address);
        config_control_design::e_organizational_address->AddExplicitAttr (config_control_design::a_89description);
        reg.AddEntity( *config_control_design::e_organizational_address );
}

#endif
