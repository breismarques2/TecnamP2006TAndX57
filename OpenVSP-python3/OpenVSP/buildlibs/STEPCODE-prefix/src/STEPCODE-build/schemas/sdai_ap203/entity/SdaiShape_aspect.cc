#ifndef  ENTITY_SDAISHAPE_ASPECT_CC
#define  ENTITY_SDAISHAPE_ASPECT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiShape_aspect.h"

EntityDescriptor * config_control_design::e_shape_aspect = 0;
AttrDescriptor * config_control_design::a_373name = 0;
AttrDescriptor * config_control_design::a_374description = 0;
AttrDescriptor * config_control_design::a_375of_shape = 0;
AttrDescriptor * config_control_design::a_376product_definitional = 0;

SdaiShape_aspect::SdaiShape_aspect() : _of_shape( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_shape_aspect;
    STEPattribute * a = new STEPattribute( * config_control_design::a_373name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_374description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_375of_shape, ( SDAI_Application_instance_ptr * ) & _of_shape );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_376product_definitional, & _product_definitional );
    a->set_null();
    attributes.push( a );
}

SdaiShape_aspect::SdaiShape_aspect ( SdaiShape_aspect & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiShape_aspect::~SdaiShape_aspect() {
}

SdaiShape_aspect::SdaiShape_aspect( SDAI_Application_instance * se, bool addAttrs ) : _of_shape( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_shape_aspect;
    STEPattribute * a = new STEPattribute( * config_control_design::a_373name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_374description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_375of_shape, ( SDAI_Application_instance_ptr * ) &_of_shape );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_376product_definitional,  &_product_definitional );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiShape_aspect::name_() {
    return _name;
}

const SdaiLabel SdaiShape_aspect::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiShape_aspect::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiShape_aspect::description_() {
    return _description;
}

const SdaiText SdaiShape_aspect::description_() const {
    return (const SdaiText) _description;
}

void SdaiShape_aspect::description_( const SdaiText x ) {
    _description = x;
}

SdaiProduct_definition_shape_ptr SdaiShape_aspect::of_shape_() {
    if( !_of_shape ) {
        _of_shape = new SdaiProduct_definition_shape;
    }
    return (SdaiProduct_definition_shape_ptr) _of_shape;
}

SdaiProduct_definition_shape_ptr_c SdaiShape_aspect::of_shape_() const {
    return (SdaiProduct_definition_shape_ptr) _of_shape;
}

void SdaiShape_aspect::of_shape_( const SdaiProduct_definition_shape_ptr x ) {
    _of_shape = x;
}

Logical SdaiShape_aspect::product_definitional_() const {
    return (const Logical) _product_definitional;
}

void SdaiShape_aspect::product_definitional_( const Logical x ) {
    _product_definitional.put (x);
}

void init_SdaiShape_aspect( Registry& reg ) {
    std::string str;

        config_control_design::a_373name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_shape_aspect);
        config_control_design::e_shape_aspect->AddExplicitAttr (config_control_design::a_373name);
        config_control_design::a_374description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_shape_aspect);
        config_control_design::e_shape_aspect->AddExplicitAttr (config_control_design::a_374description);
    config_control_design::a_375of_shape =
      new AttrDescriptor( "of_shape", config_control_design::e_product_definition_shape, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_shape_aspect);
        config_control_design::e_shape_aspect->AddExplicitAttr (config_control_design::a_375of_shape);
        config_control_design::a_376product_definitional =
          new AttrDescriptor("product_definitional",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_shape_aspect);
        config_control_design::e_shape_aspect->AddExplicitAttr (config_control_design::a_376product_definitional);
        reg.AddEntity( *config_control_design::e_shape_aspect );
}

#endif
