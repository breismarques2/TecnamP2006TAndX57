#ifndef  ENTITY_SDAIB_SPLINE_CURVE_WITH_KNOTS_CC
#define  ENTITY_SDAIB_SPLINE_CURVE_WITH_KNOTS_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiB_spline_curve_with_knots.h"

EntityDescriptor * config_control_design::e_b_spline_curve_with_knots = 0;
AttrDescriptor * config_control_design::a_68knot_multiplicities = 0;
AttrDescriptor * config_control_design::a_69knots = 0;
AttrDescriptor * config_control_design::a_70knot_spec = 0;
Derived_attribute * config_control_design::a_71Dupper_index_on_knots = 0;

SdaiB_spline_curve_with_knots::SdaiB_spline_curve_with_knots(): SdaiB_spline_curve(), _knot_multiplicities( 0 ), _knots( 0 ) {
        /*  parent: SdaiB_spline_curve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_b_spline_curve_with_knots;
    _knot_multiplicities = new IntAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_68knot_multiplicities, _knot_multiplicities );
    a->set_null();
    attributes.push( a );
    _knots = new RealAggregate;
    a = new STEPattribute( * config_control_design::a_69knots, _knots );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_70knot_spec, & _knot_spec );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "upper_index_on_control_points", "b_spline_curve" );
    MakeDerived( "control_points", "b_spline_curve" );
    MakeDerived( "upper_index_on_knots", "b_spline_curve_with_knots" );
}

SdaiB_spline_curve_with_knots::SdaiB_spline_curve_with_knots ( SdaiB_spline_curve_with_knots & e ) : SdaiB_spline_curve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiB_spline_curve_with_knots::~SdaiB_spline_curve_with_knots() {
    delete _knot_multiplicities;
    delete _knots;
}

SdaiB_spline_curve_with_knots::SdaiB_spline_curve_with_knots( SDAI_Application_instance * se, bool addAttrs ) : SdaiB_spline_curve( se, addAttrs ), _knot_multiplicities( 0 ), _knots( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiB_spline_curve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_b_spline_curve_with_knots;
    _knot_multiplicities = new IntAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_68knot_multiplicities,  _knot_multiplicities );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _knots = new RealAggregate;
    a = new STEPattribute( * config_control_design::a_69knots,  _knots );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_70knot_spec,  &_knot_spec );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "upper_index_on_control_points", "b_spline_curve" );
    MakeDerived( "control_points", "b_spline_curve" );
    MakeDerived( "upper_index_on_knots", "b_spline_curve_with_knots" );
}


IntAggregate_ptr SdaiB_spline_curve_with_knots::knot_multiplicities_() {
    if( !_knot_multiplicities ) {
        _knot_multiplicities = new IntAggregate;
    }
    return ( IntAggregate_ptr ) _knot_multiplicities;
}

IntAggregate_ptr_c SdaiB_spline_curve_with_knots::knot_multiplicities_() const {
    return ( IntAggregate_ptr ) _knot_multiplicities;
}

void SdaiB_spline_curve_with_knots::knot_multiplicities_( const IntAggregate_ptr x ) {
    if( !_knot_multiplicities ) {
        _knot_multiplicities = new IntAggregate;
    }
    _knot_multiplicities->ShallowCopy( * x );
}

RealAggregate_ptr SdaiB_spline_curve_with_knots::knots_() {
    if( !_knots ) {
        _knots = new RealAggregate;
    }
    return ( RealAggregate_ptr ) _knots;
}

RealAggregate_ptr_c SdaiB_spline_curve_with_knots::knots_() const {
    return ( RealAggregate_ptr ) _knots;
}

void SdaiB_spline_curve_with_knots::knots_( const RealAggregate_ptr x ) {
    if( !_knots ) {
        _knots = new RealAggregate;
    }
    _knots->ShallowCopy( * x );
}

SdaiKnot_type_var SdaiB_spline_curve_with_knots::knot_spec_() {
    return (Knot_type) _knot_spec;
}

const SdaiKnot_type_var SdaiB_spline_curve_with_knots::knot_spec_() const {
    return (const Knot_type) _knot_spec;
}

void SdaiB_spline_curve_with_knots::knot_spec_( const SdaiKnot_type_var x ) {
    _knot_spec.put( x );
}

void init_SdaiB_spline_curve_with_knots( Registry& reg ) {
    std::string str;

    config_control_design::e_b_spline_curve_with_knots->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "constraints_param_b_spline( degree, upper_index_on_knots, upper_index_on_control_points, knot_multiplicities, knots )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_b_spline_curve_with_knots->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "SIZEOF( knot_multiplicities ) = upper_index_on_knots\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_b_spline_curve_with_knots->_where_rules->Append( wr );
    config_control_design::e_b_spline_curve_with_knots->AddSupertype(config_control_design::e_b_spline_curve);
    config_control_design::e_b_spline_curve->AddSubtype(config_control_design::e_b_spline_curve_with_knots);
        ListTypeDescriptor * t_7 = new ListTypeDescriptor;
        t_7->AssignAggrCreator((AggregateCreator) create_IntAggregate);        // Creator function
        t_7->SetBound1( 2 );
        t_7->SetBound2( 2147483647 );
        t_7->FundamentalType(LIST_TYPE);
        t_7->Description("LIST [2:?] OF INTEGER");
        t_7->OriginatingSchema(config_control_design::schema);
        t_7->ReferentType(t_sdaiINTEGER);
        config_control_design::schema->AddUnnamedType(t_7);
        config_control_design::a_68knot_multiplicities =
          new AttrDescriptor("knot_multiplicities",t_7,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_curve_with_knots);
        config_control_design::e_b_spline_curve_with_knots->AddExplicitAttr (config_control_design::a_68knot_multiplicities);
        ListTypeDescriptor * t_8 = new ListTypeDescriptor;
        t_8->AssignAggrCreator((AggregateCreator) create_RealAggregate);        // Creator function
        t_8->SetBound1( 2 );
        t_8->SetBound2( 2147483647 );
        t_8->FundamentalType(LIST_TYPE);
        t_8->Description("LIST [2:?] OF parameter_value");
        t_8->OriginatingSchema(config_control_design::schema);
        t_8->ReferentType(config_control_design::t_parameter_value);
        config_control_design::schema->AddUnnamedType(t_8);
        config_control_design::a_69knots =
          new AttrDescriptor("knots",t_8,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_curve_with_knots);
        config_control_design::e_b_spline_curve_with_knots->AddExplicitAttr (config_control_design::a_69knots);
        config_control_design::a_70knot_spec =
          new AttrDescriptor("knot_spec",config_control_design::t_knot_type,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_curve_with_knots);
        config_control_design::e_b_spline_curve_with_knots->AddExplicitAttr (config_control_design::a_70knot_spec);
        config_control_design::a_71Dupper_index_on_knots =
          new Derived_attribute("upper_index_on_knots",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_b_spline_curve_with_knots);
        config_control_design::e_b_spline_curve_with_knots->AddExplicitAttr (config_control_design::a_71Dupper_index_on_knots);
        config_control_design::a_71Dupper_index_on_knots->initializer_("SIZEOF( knots )");
        reg.AddEntity( *config_control_design::e_b_spline_curve_with_knots );
}

#endif
