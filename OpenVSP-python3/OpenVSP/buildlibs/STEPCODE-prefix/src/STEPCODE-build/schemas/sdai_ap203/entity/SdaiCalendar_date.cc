#ifndef  ENTITY_SDAICALENDAR_DATE_CC
#define  ENTITY_SDAICALENDAR_DATE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCalendar_date.h"

EntityDescriptor * config_control_design::e_calendar_date = 0;
AttrDescriptor * config_control_design::a_283day_component = 0;
AttrDescriptor * config_control_design::a_284month_component = 0;

SdaiCalendar_date::SdaiCalendar_date(): SdaiDate() {
        /*  parent: SdaiDate  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_calendar_date;
    STEPattribute * a = new STEPattribute( * config_control_design::a_283day_component, & _day_component );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_284month_component, & _month_component );
    a->set_null();
    attributes.push( a );
}

SdaiCalendar_date::SdaiCalendar_date ( SdaiCalendar_date & e ) : SdaiDate() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCalendar_date::~SdaiCalendar_date() {
}

SdaiCalendar_date::SdaiCalendar_date( SDAI_Application_instance * se, bool addAttrs ) : SdaiDate( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiDate */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_calendar_date;
    STEPattribute * a = new STEPattribute( * config_control_design::a_283day_component,  &_day_component );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_284month_component,  &_month_component );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiDay_in_month_number SdaiCalendar_date::day_component_() const {
    return (const SdaiDay_in_month_number) _day_component;
}

void SdaiCalendar_date::day_component_( const SdaiDay_in_month_number x ) {
    _day_component = x;
}

SdaiMonth_in_year_number SdaiCalendar_date::month_component_() const {
    return (const SdaiMonth_in_year_number) _month_component;
}

void SdaiCalendar_date::month_component_( const SdaiMonth_in_year_number x ) {
    _month_component = x;
}

void init_SdaiCalendar_date( Registry& reg ) {
    std::string str;

    config_control_design::e_calendar_date->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "valid_calendar_date( SELF )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_calendar_date->_where_rules->Append( wr );
    config_control_design::e_calendar_date->AddSupertype(config_control_design::e_date);
    config_control_design::e_date->AddSubtype(config_control_design::e_calendar_date);
        config_control_design::a_283day_component =
          new AttrDescriptor("day_component",config_control_design::t_day_in_month_number,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_calendar_date);
        config_control_design::e_calendar_date->AddExplicitAttr (config_control_design::a_283day_component);
        config_control_design::a_284month_component =
          new AttrDescriptor("month_component",config_control_design::t_month_in_year_number,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_calendar_date);
        config_control_design::e_calendar_date->AddExplicitAttr (config_control_design::a_284month_component);
        reg.AddEntity( *config_control_design::e_calendar_date );
}

#endif
