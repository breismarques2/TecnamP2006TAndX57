#ifndef  ENTITY_SDAIORIENTED_OPEN_SHELL_CC
#define  ENTITY_SDAIORIENTED_OPEN_SHELL_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOriented_open_shell.h"

EntityDescriptor * config_control_design::e_oriented_open_shell = 0;
AttrDescriptor * config_control_design::a_426open_shell_element = 0;
AttrDescriptor * config_control_design::a_427orientation = 0;
Derived_attribute * config_control_design::a_428Dconnected_face_set_cfs_faces = 0;

SdaiOriented_open_shell::SdaiOriented_open_shell(): SdaiOpen_shell(), _open_shell_element( 0 ) {
        /*  parent: SdaiOpen_shell  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_oriented_open_shell;
    STEPattribute * a = new STEPattribute( * config_control_design::a_426open_shell_element, ( SDAI_Application_instance_ptr * ) & _open_shell_element );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_427orientation, & _orientation );
    a->set_null();
    attributes.push( a );
    MakeDerived( "cfs_faces", "connected_face_set" );
}

SdaiOriented_open_shell::SdaiOriented_open_shell ( SdaiOriented_open_shell & e ) : SdaiOpen_shell() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOriented_open_shell::~SdaiOriented_open_shell() {
}

SdaiOriented_open_shell::SdaiOriented_open_shell( SDAI_Application_instance * se, bool addAttrs ) : SdaiOpen_shell( se, addAttrs ), _open_shell_element( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiOpen_shell */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_oriented_open_shell;
    STEPattribute * a = new STEPattribute( * config_control_design::a_426open_shell_element, ( SDAI_Application_instance_ptr * ) &_open_shell_element );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_427orientation,  &_orientation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "cfs_faces", "connected_face_set" );
}


SdaiOpen_shell_ptr SdaiOriented_open_shell::open_shell_element_() {
    if( !_open_shell_element ) {
        _open_shell_element = new SdaiOpen_shell;
    }
    return (SdaiOpen_shell_ptr) _open_shell_element;
}

SdaiOpen_shell_ptr_c SdaiOriented_open_shell::open_shell_element_() const {
    return (SdaiOpen_shell_ptr) _open_shell_element;
}

void SdaiOriented_open_shell::open_shell_element_( const SdaiOpen_shell_ptr x ) {
    _open_shell_element = x;
}

Boolean SdaiOriented_open_shell::orientation_() const {
    return (const Boolean) _orientation;
}

void SdaiOriented_open_shell::orientation_( const Boolean x ) {
    _orientation.put (x);
}

void init_SdaiOriented_open_shell( Registry& reg ) {
    std::string str;

    config_control_design::e_oriented_open_shell->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "NOT ( 'CONFIG_CONTROL_DESIGN.ORIENTED_OPEN_SHELL' IN TYPEOF( SELF.open_shell_element ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_oriented_open_shell->_where_rules->Append( wr );
    config_control_design::e_oriented_open_shell->AddSupertype(config_control_design::e_open_shell);
    config_control_design::e_open_shell->AddSubtype(config_control_design::e_oriented_open_shell);
    config_control_design::a_426open_shell_element =
      new AttrDescriptor( "open_shell_element", config_control_design::e_open_shell, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_oriented_open_shell);
        config_control_design::e_oriented_open_shell->AddExplicitAttr (config_control_design::a_426open_shell_element);
        config_control_design::a_427orientation =
          new AttrDescriptor("orientation",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_oriented_open_shell);
        config_control_design::e_oriented_open_shell->AddExplicitAttr (config_control_design::a_427orientation);
        SetTypeDescriptor * t_75 = new SetTypeDescriptor;
        t_75->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_75->SetBound1( 1 );
        t_75->SetBound2( 2147483647 );
        t_75->FundamentalType(SET_TYPE);
        t_75->Description("SET [1:?] OF face");
        t_75->OriginatingSchema(config_control_design::schema);
        t_75->ReferentType(config_control_design::e_face);
        config_control_design::schema->AddUnnamedType(t_75);
        config_control_design::a_428Dconnected_face_set_cfs_faces =
          new Derived_attribute("connected_face_set.cfs_faces",t_75,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_oriented_open_shell);
        config_control_design::e_oriented_open_shell->AddExplicitAttr (config_control_design::a_428Dconnected_face_set_cfs_faces);
        config_control_design::a_428Dconnected_face_set_cfs_faces->initializer_("conditional_reverse( SELF.orientation, SELF.open_shell_element.cfs_faces )");
        reg.AddEntity( *config_control_design::e_oriented_open_shell );
}

#endif
