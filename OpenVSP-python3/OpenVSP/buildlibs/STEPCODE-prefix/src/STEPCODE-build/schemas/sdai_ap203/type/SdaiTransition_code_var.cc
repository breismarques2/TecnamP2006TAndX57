#ifndef  TYPE_SDAITRANSITION_CODE_VAR_CC
#define  TYPE_SDAITRANSITION_CODE_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiTransition_code_var.h"

const char *
SdaiTransition_code_var::element_at (int n) const  {
  switch (n)  {
  case Transition_code__cont_same_gradient_same_curvature:  return "CONT_SAME_GRADIENT_SAME_CURVATURE";
  case Transition_code__continuous:  return "CONTINUOUS";
  case Transition_code__discontinuous:  return "DISCONTINUOUS";
  case Transition_code__cont_same_gradient:  return "CONT_SAME_GRADIENT";
  case Transition_code_unset        :
  default                :  return "UNSET";
  }
}

SdaiTransition_code_var::SdaiTransition_code_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiTransition_code_var::operator Transition_code () const {
  switch (v) {
        case Transition_code__cont_same_gradient_same_curvature        :  return Transition_code__cont_same_gradient_same_curvature;
        case Transition_code__continuous        :  return Transition_code__continuous;
        case Transition_code__discontinuous        :  return Transition_code__discontinuous;
        case Transition_code__cont_same_gradient        :  return Transition_code__cont_same_gradient;
        case Transition_code_unset        :
        default                :  return Transition_code_unset;
  }
}

SDAI_Enum *
create_SdaiTransition_code_var ()
{
    return new SdaiTransition_code_var( "", config_control_design::t_transition_code );
}


SdaiTransition_code_var_agg::SdaiTransition_code_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiTransition_code_var_agg::~SdaiTransition_code_var_agg()
{
}

STEPaggregate *
create_SdaiTransition_code_var_agg ()
{
    return new SdaiTransition_code_var_agg( config_control_design::t_transition_code );
}

void init_SdaiTransition_code_var( Registry& reg ) {
    std::string str;
        config_control_design::t_transition_code = new EnumTypeDescriptor (
                  "Transition_Code",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (discontinuous, continuous, cont_same_gradient, cont_same_gradient_same_curvature)",        // Description
                  (EnumCreator) create_SdaiTransition_code_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_transition_code);
    reg.AddType (*config_control_design::t_transition_code);
}

#endif
