#ifndef  ENTITY_SDAIAPPROVAL_CC
#define  ENTITY_SDAIAPPROVAL_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiApproval.h"

EntityDescriptor * config_control_design::e_approval = 0;
AttrDescriptor * config_control_design::a_186status = 0;
AttrDescriptor * config_control_design::a_187level = 0;

SdaiApproval::SdaiApproval() : _status( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_approval;
    STEPattribute * a = new STEPattribute( * config_control_design::a_186status, ( SDAI_Application_instance_ptr * ) & _status );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_187level, & _level );
    a->set_null();
    attributes.push( a );
}

SdaiApproval::SdaiApproval ( SdaiApproval & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiApproval::~SdaiApproval() {
}

SdaiApproval::SdaiApproval( SDAI_Application_instance * se, bool addAttrs ) : _status( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_approval;
    STEPattribute * a = new STEPattribute( * config_control_design::a_186status, ( SDAI_Application_instance_ptr * ) &_status );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_187level,  &_level );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiApproval_status_ptr SdaiApproval::status_() {
    if( !_status ) {
        _status = new SdaiApproval_status;
    }
    return (SdaiApproval_status_ptr) _status;
}

SdaiApproval_status_ptr_c SdaiApproval::status_() const {
    return (SdaiApproval_status_ptr) _status;
}

void SdaiApproval::status_( const SdaiApproval_status_ptr x ) {
    _status = x;
}

SdaiLabel SdaiApproval::level_() {
    return _level;
}

const SdaiLabel SdaiApproval::level_() const {
    return (const SdaiLabel) _level;
}

void SdaiApproval::level_( const SdaiLabel x ) {
    _level = x;
}

void init_SdaiApproval( Registry& reg ) {
    std::string str;

    config_control_design::a_186status =
      new AttrDescriptor( "status", config_control_design::e_approval_status, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_approval);
        config_control_design::e_approval->AddExplicitAttr (config_control_design::a_186status);
        config_control_design::a_187level =
          new AttrDescriptor("level",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_approval);
        config_control_design::e_approval->AddExplicitAttr (config_control_design::a_187level);
        reg.AddEntity( *config_control_design::e_approval );
}

#endif
