#ifndef  ENTITY_SDAISECURITY_CLASSIFICATION_CC
#define  ENTITY_SDAISECURITY_CLASSIFICATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiSecurity_classification.h"

EntityDescriptor * config_control_design::e_security_classification = 0;
AttrDescriptor * config_control_design::a_409name = 0;
AttrDescriptor * config_control_design::a_410purpose = 0;
AttrDescriptor * config_control_design::a_411security_level = 0;

SdaiSecurity_classification::SdaiSecurity_classification() : _security_level( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_security_classification;
    STEPattribute * a = new STEPattribute( * config_control_design::a_409name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_410purpose, & _purpose );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_411security_level, ( SDAI_Application_instance_ptr * ) & _security_level );
    a->set_null();
    attributes.push( a );
}

SdaiSecurity_classification::SdaiSecurity_classification ( SdaiSecurity_classification & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiSecurity_classification::~SdaiSecurity_classification() {
}

SdaiSecurity_classification::SdaiSecurity_classification( SDAI_Application_instance * se, bool addAttrs ) : _security_level( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_security_classification;
    STEPattribute * a = new STEPattribute( * config_control_design::a_409name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_410purpose,  &_purpose );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_411security_level, ( SDAI_Application_instance_ptr * ) &_security_level );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiSecurity_classification::name_() {
    return _name;
}

const SdaiLabel SdaiSecurity_classification::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiSecurity_classification::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiSecurity_classification::purpose_() {
    return _purpose;
}

const SdaiText SdaiSecurity_classification::purpose_() const {
    return (const SdaiText) _purpose;
}

void SdaiSecurity_classification::purpose_( const SdaiText x ) {
    _purpose = x;
}

SdaiSecurity_classification_level_ptr SdaiSecurity_classification::security_level_() {
    if( !_security_level ) {
        _security_level = new SdaiSecurity_classification_level;
    }
    return (SdaiSecurity_classification_level_ptr) _security_level;
}

SdaiSecurity_classification_level_ptr_c SdaiSecurity_classification::security_level_() const {
    return (SdaiSecurity_classification_level_ptr) _security_level;
}

void SdaiSecurity_classification::security_level_( const SdaiSecurity_classification_level_ptr x ) {
    _security_level = x;
}

void init_SdaiSecurity_classification( Registry& reg ) {
    std::string str;

        config_control_design::a_409name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_security_classification);
        config_control_design::e_security_classification->AddExplicitAttr (config_control_design::a_409name);
        config_control_design::a_410purpose =
          new AttrDescriptor("purpose",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_security_classification);
        config_control_design::e_security_classification->AddExplicitAttr (config_control_design::a_410purpose);
    config_control_design::a_411security_level =
      new AttrDescriptor( "security_level", config_control_design::e_security_classification_level, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_security_classification);
        config_control_design::e_security_classification->AddExplicitAttr (config_control_design::a_411security_level);
        reg.AddEntity( *config_control_design::e_security_classification );
}

#endif
