#ifndef  ENTITY_SDAIPARAMETRIC_REPRESENTATION_CONTEXT_CC
#define  ENTITY_SDAIPARAMETRIC_REPRESENTATION_CONTEXT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiParametric_representation_context.h"

EntityDescriptor * config_control_design::e_parametric_representation_context = 0;

SdaiParametric_representation_context::SdaiParametric_representation_context(): SdaiRepresentation_context() {
        /*  parent: SdaiRepresentation_context  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_parametric_representation_context;
}

SdaiParametric_representation_context::SdaiParametric_representation_context ( SdaiParametric_representation_context & e ) : SdaiRepresentation_context() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiParametric_representation_context::~SdaiParametric_representation_context() {
}

SdaiParametric_representation_context::SdaiParametric_representation_context( SDAI_Application_instance * se, bool addAttrs ) : SdaiRepresentation_context( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiRepresentation_context */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_parametric_representation_context;
}


void init_SdaiParametric_representation_context( Registry& reg ) {
    std::string str;

    config_control_design::e_parametric_representation_context->AddSupertype(config_control_design::e_representation_context);
    config_control_design::e_representation_context->AddSubtype(config_control_design::e_parametric_representation_context);
        reg.AddEntity( *config_control_design::e_parametric_representation_context );
}

#endif
