#ifndef  ENTITY_SDAIDIMENSIONAL_EXPONENTS_CC
#define  ENTITY_SDAIDIMENSIONAL_EXPONENTS_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDimensional_exponents.h"

EntityDescriptor * config_control_design::e_dimensional_exponents = 0;
AttrDescriptor * config_control_design::a_353length_exponent = 0;
AttrDescriptor * config_control_design::a_354mass_exponent = 0;
AttrDescriptor * config_control_design::a_355time_exponent = 0;
AttrDescriptor * config_control_design::a_356electric_current_exponent = 0;
AttrDescriptor * config_control_design::a_357thermodynamic_temperature_exponent = 0;
AttrDescriptor * config_control_design::a_358amount_of_substance_exponent = 0;
AttrDescriptor * config_control_design::a_359luminous_intensity_exponent = 0;

SdaiDimensional_exponents::SdaiDimensional_exponents() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_dimensional_exponents;
    STEPattribute * a = new STEPattribute( * config_control_design::a_353length_exponent, & _length_exponent );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_354mass_exponent, & _mass_exponent );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_355time_exponent, & _time_exponent );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_356electric_current_exponent, & _electric_current_exponent );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_357thermodynamic_temperature_exponent, & _thermodynamic_temperature_exponent );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_358amount_of_substance_exponent, & _amount_of_substance_exponent );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_359luminous_intensity_exponent, & _luminous_intensity_exponent );
    a->set_null();
    attributes.push( a );
}

SdaiDimensional_exponents::SdaiDimensional_exponents ( SdaiDimensional_exponents & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDimensional_exponents::~SdaiDimensional_exponents() {
}

SdaiDimensional_exponents::SdaiDimensional_exponents( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_dimensional_exponents;
    STEPattribute * a = new STEPattribute( * config_control_design::a_353length_exponent,  &_length_exponent );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_354mass_exponent,  &_mass_exponent );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_355time_exponent,  &_time_exponent );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_356electric_current_exponent,  &_electric_current_exponent );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_357thermodynamic_temperature_exponent,  &_thermodynamic_temperature_exponent );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_358amount_of_substance_exponent,  &_amount_of_substance_exponent );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_359luminous_intensity_exponent,  &_luminous_intensity_exponent );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SDAI_Real SdaiDimensional_exponents::length_exponent_() const {
    return (SDAI_Real) _length_exponent;
}

void SdaiDimensional_exponents::length_exponent_( const SDAI_Real x ) {
    _length_exponent = x;
}

SDAI_Real SdaiDimensional_exponents::mass_exponent_() const {
    return (SDAI_Real) _mass_exponent;
}

void SdaiDimensional_exponents::mass_exponent_( const SDAI_Real x ) {
    _mass_exponent = x;
}

SDAI_Real SdaiDimensional_exponents::time_exponent_() const {
    return (SDAI_Real) _time_exponent;
}

void SdaiDimensional_exponents::time_exponent_( const SDAI_Real x ) {
    _time_exponent = x;
}

SDAI_Real SdaiDimensional_exponents::electric_current_exponent_() const {
    return (SDAI_Real) _electric_current_exponent;
}

void SdaiDimensional_exponents::electric_current_exponent_( const SDAI_Real x ) {
    _electric_current_exponent = x;
}

SDAI_Real SdaiDimensional_exponents::thermodynamic_temperature_exponent_() const {
    return (SDAI_Real) _thermodynamic_temperature_exponent;
}

void SdaiDimensional_exponents::thermodynamic_temperature_exponent_( const SDAI_Real x ) {
    _thermodynamic_temperature_exponent = x;
}

SDAI_Real SdaiDimensional_exponents::amount_of_substance_exponent_() const {
    return (SDAI_Real) _amount_of_substance_exponent;
}

void SdaiDimensional_exponents::amount_of_substance_exponent_( const SDAI_Real x ) {
    _amount_of_substance_exponent = x;
}

SDAI_Real SdaiDimensional_exponents::luminous_intensity_exponent_() const {
    return (SDAI_Real) _luminous_intensity_exponent;
}

void SdaiDimensional_exponents::luminous_intensity_exponent_( const SDAI_Real x ) {
    _luminous_intensity_exponent = x;
}

void init_SdaiDimensional_exponents( Registry& reg ) {
    std::string str;

        config_control_design::a_353length_exponent =
          new AttrDescriptor("length_exponent",t_sdaiREAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_dimensional_exponents);
        config_control_design::e_dimensional_exponents->AddExplicitAttr (config_control_design::a_353length_exponent);
        config_control_design::a_354mass_exponent =
          new AttrDescriptor("mass_exponent",t_sdaiREAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_dimensional_exponents);
        config_control_design::e_dimensional_exponents->AddExplicitAttr (config_control_design::a_354mass_exponent);
        config_control_design::a_355time_exponent =
          new AttrDescriptor("time_exponent",t_sdaiREAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_dimensional_exponents);
        config_control_design::e_dimensional_exponents->AddExplicitAttr (config_control_design::a_355time_exponent);
        config_control_design::a_356electric_current_exponent =
          new AttrDescriptor("electric_current_exponent",t_sdaiREAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_dimensional_exponents);
        config_control_design::e_dimensional_exponents->AddExplicitAttr (config_control_design::a_356electric_current_exponent);
        config_control_design::a_357thermodynamic_temperature_exponent =
          new AttrDescriptor("thermodynamic_temperature_exponent",t_sdaiREAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_dimensional_exponents);
        config_control_design::e_dimensional_exponents->AddExplicitAttr (config_control_design::a_357thermodynamic_temperature_exponent);
        config_control_design::a_358amount_of_substance_exponent =
          new AttrDescriptor("amount_of_substance_exponent",t_sdaiREAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_dimensional_exponents);
        config_control_design::e_dimensional_exponents->AddExplicitAttr (config_control_design::a_358amount_of_substance_exponent);
        config_control_design::a_359luminous_intensity_exponent =
          new AttrDescriptor("luminous_intensity_exponent",t_sdaiREAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_dimensional_exponents);
        config_control_design::e_dimensional_exponents->AddExplicitAttr (config_control_design::a_359luminous_intensity_exponent);
        reg.AddEntity( *config_control_design::e_dimensional_exponents );
}

#endif
