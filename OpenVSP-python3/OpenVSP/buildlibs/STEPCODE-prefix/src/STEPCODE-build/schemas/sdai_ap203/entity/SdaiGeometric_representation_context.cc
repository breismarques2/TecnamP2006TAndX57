#ifndef  ENTITY_SDAIGEOMETRIC_REPRESENTATION_CONTEXT_CC
#define  ENTITY_SDAIGEOMETRIC_REPRESENTATION_CONTEXT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiGeometric_representation_context.h"

EntityDescriptor * config_control_design::e_geometric_representation_context = 0;
AttrDescriptor * config_control_design::a_366coordinate_space_dimension = 0;

SdaiGeometric_representation_context::SdaiGeometric_representation_context(): SdaiRepresentation_context() {
        /*  parent: SdaiRepresentation_context  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_geometric_representation_context;
    STEPattribute * a = new STEPattribute( * config_control_design::a_366coordinate_space_dimension, & _coordinate_space_dimension );
    a->set_null();
    attributes.push( a );
}

SdaiGeometric_representation_context::SdaiGeometric_representation_context ( SdaiGeometric_representation_context & e ) : SdaiRepresentation_context() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiGeometric_representation_context::~SdaiGeometric_representation_context() {
}

SdaiGeometric_representation_context::SdaiGeometric_representation_context( SDAI_Application_instance * se, bool addAttrs ) : SdaiRepresentation_context( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiRepresentation_context */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_geometric_representation_context;
    STEPattribute * a = new STEPattribute( * config_control_design::a_366coordinate_space_dimension,  &_coordinate_space_dimension );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiDimension_count SdaiGeometric_representation_context::coordinate_space_dimension_() const {
    return (const SdaiDimension_count) _coordinate_space_dimension;
}

void SdaiGeometric_representation_context::coordinate_space_dimension_( const SdaiDimension_count x ) {
    _coordinate_space_dimension = x;
}

void init_SdaiGeometric_representation_context( Registry& reg ) {
    std::string str;

    config_control_design::e_geometric_representation_context->AddSupertype(config_control_design::e_representation_context);
    config_control_design::e_representation_context->AddSubtype(config_control_design::e_geometric_representation_context);
        config_control_design::a_366coordinate_space_dimension =
          new AttrDescriptor("coordinate_space_dimension",config_control_design::t_dimension_count,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_geometric_representation_context);
        config_control_design::e_geometric_representation_context->AddExplicitAttr (config_control_design::a_366coordinate_space_dimension);
        reg.AddEntity( *config_control_design::e_geometric_representation_context );
}

#endif
