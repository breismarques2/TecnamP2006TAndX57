#ifndef  ENTITY_SDAIPRODUCT_DEFINITION_RELATIONSHIP_CC
#define  ENTITY_SDAIPRODUCT_DEFINITION_RELATIONSHIP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiProduct_definition_relationship.h"

EntityDescriptor * config_control_design::e_product_definition_relationship = 0;
AttrDescriptor * config_control_design::a_234id = 0;
AttrDescriptor * config_control_design::a_235name = 0;
AttrDescriptor * config_control_design::a_236description = 0;
AttrDescriptor * config_control_design::a_237relating_product_definition = 0;
AttrDescriptor * config_control_design::a_238related_product_definition = 0;

SdaiProduct_definition_relationship::SdaiProduct_definition_relationship() : _relating_product_definition( 0 ), _related_product_definition( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_product_definition_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_234id, & _id );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_235name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_236description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_237relating_product_definition, ( SDAI_Application_instance_ptr * ) & _relating_product_definition );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_238related_product_definition, ( SDAI_Application_instance_ptr * ) & _related_product_definition );
    a->set_null();
    attributes.push( a );
}

SdaiProduct_definition_relationship::SdaiProduct_definition_relationship ( SdaiProduct_definition_relationship & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiProduct_definition_relationship::~SdaiProduct_definition_relationship() {
}

SdaiProduct_definition_relationship::SdaiProduct_definition_relationship( SDAI_Application_instance * se, bool addAttrs ) : _relating_product_definition( 0 ), _related_product_definition( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_product_definition_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_234id,  &_id );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_235name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_236description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_237relating_product_definition, ( SDAI_Application_instance_ptr * ) &_relating_product_definition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_238related_product_definition, ( SDAI_Application_instance_ptr * ) &_related_product_definition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiProduct_definition_relationship::id_() {
    return _id;
}

const SdaiIdentifier SdaiProduct_definition_relationship::id_() const {
    return (const SdaiIdentifier) _id;
}

void SdaiProduct_definition_relationship::id_( const SdaiIdentifier x ) {
    _id = x;
}

SdaiLabel SdaiProduct_definition_relationship::name_() {
    return _name;
}

const SdaiLabel SdaiProduct_definition_relationship::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiProduct_definition_relationship::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiProduct_definition_relationship::description_() {
    return _description;
}

const SdaiText SdaiProduct_definition_relationship::description_() const {
    return (const SdaiText) _description;
}

void SdaiProduct_definition_relationship::description_( const SdaiText x ) {
    _description = x;
}

SdaiProduct_definition_ptr SdaiProduct_definition_relationship::relating_product_definition_() {
    if( !_relating_product_definition ) {
        _relating_product_definition = new SdaiProduct_definition;
    }
    return (SdaiProduct_definition_ptr) _relating_product_definition;
}

SdaiProduct_definition_ptr_c SdaiProduct_definition_relationship::relating_product_definition_() const {
    return (SdaiProduct_definition_ptr) _relating_product_definition;
}

void SdaiProduct_definition_relationship::relating_product_definition_( const SdaiProduct_definition_ptr x ) {
    _relating_product_definition = x;
}

SdaiProduct_definition_ptr SdaiProduct_definition_relationship::related_product_definition_() {
    if( !_related_product_definition ) {
        _related_product_definition = new SdaiProduct_definition;
    }
    return (SdaiProduct_definition_ptr) _related_product_definition;
}

SdaiProduct_definition_ptr_c SdaiProduct_definition_relationship::related_product_definition_() const {
    return (SdaiProduct_definition_ptr) _related_product_definition;
}

void SdaiProduct_definition_relationship::related_product_definition_( const SdaiProduct_definition_ptr x ) {
    _related_product_definition = x;
}

void init_SdaiProduct_definition_relationship( Registry& reg ) {
    std::string str;

        config_control_design::a_234id =
          new AttrDescriptor("id",config_control_design::t_identifier,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_definition_relationship);
        config_control_design::e_product_definition_relationship->AddExplicitAttr (config_control_design::a_234id);
        config_control_design::a_235name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_definition_relationship);
        config_control_design::e_product_definition_relationship->AddExplicitAttr (config_control_design::a_235name);
        config_control_design::a_236description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_definition_relationship);
        config_control_design::e_product_definition_relationship->AddExplicitAttr (config_control_design::a_236description);
    config_control_design::a_237relating_product_definition =
      new AttrDescriptor( "relating_product_definition", config_control_design::e_product_definition, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_product_definition_relationship);
        config_control_design::e_product_definition_relationship->AddExplicitAttr (config_control_design::a_237relating_product_definition);
    config_control_design::a_238related_product_definition =
      new AttrDescriptor( "related_product_definition", config_control_design::e_product_definition, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_product_definition_relationship);
        config_control_design::e_product_definition_relationship->AddExplicitAttr (config_control_design::a_238related_product_definition);
        reg.AddEntity( *config_control_design::e_product_definition_relationship );
}

#endif
