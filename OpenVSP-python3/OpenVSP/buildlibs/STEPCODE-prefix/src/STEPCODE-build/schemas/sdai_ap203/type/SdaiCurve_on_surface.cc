#ifndef  TYPE_SDAICURVE_ON_SURFACE_CC
#define  TYPE_SDAICURVE_ON_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiCurve_on_surface.h"


//////////  SELECT TYPE curve_on_surface

const TypeDescriptor * 
SdaiCurve_on_surface::AssignEntity (SDAI_Application_instance * se)
{
  (void)se;
  //  PCURVE
  if (se -> IsA (config_control_design::e_pcurve))
  {  
    _app_inst = (SdaiPcurve_ptr) se;
    return SetUnderlyingType (config_control_design::e_pcurve);
  }
  //  SURFACE_CURVE
  if (se -> IsA (config_control_design::e_surface_curve))
  {  
    _app_inst = (SdaiSurface_curve_ptr) se;
    return SetUnderlyingType (config_control_design::e_surface_curve);
  }
  //  COMPOSITE_CURVE_ON_SURFACE
  if (se -> IsA (config_control_design::e_composite_curve_on_surface))
  {  
    _app_inst = (SdaiComposite_curve_on_surface_ptr) se;
    return SetUnderlyingType (config_control_design::e_composite_curve_on_surface);
  }
  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
  std::cerr << se -> EntityName () << std::endl;
#endif
  return 0;
}

SDAI_Select * 
SdaiCurve_on_surface::NewSelect ()
{
    SdaiCurve_on_surface * tmp = new SdaiCurve_on_surface();
    return tmp;
}


// STEP Part 21

void
SdaiCurve_on_surface::STEPwrite_content (ostream& out, const char * currSch) const {
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::e_pcurve) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::e_surface_curve) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    if (CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface) {
        _app_inst -> STEPwrite_reference (out);
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
}

BASE_TYPE
SdaiCurve_on_surface::ValueType() const {
    if (CurrentUnderlyingType() == config_control_design::e_pcurve)
        return sdaiINSTANCE;
    if (CurrentUnderlyingType() == config_control_design::e_surface_curve)
        return sdaiINSTANCE;
    if (CurrentUnderlyingType() == config_control_design::e_composite_curve_on_surface)
        return sdaiINSTANCE;
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return (BASE_TYPE)0;
}

void
SdaiCurve_on_surface::STEPwrite_verbose (ostream& out, const char *currSch) const
{
    const TypeDescriptor *td = CurrentUnderlyingType();
    std::string tmp;

    if ( td ) {
        // If we have a legal underlying type, get its name acc
        // to the current schema.
        StrToUpper( td->Name(currSch), tmp );
    }
    if (td == config_control_design::e_pcurve) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    if (td == config_control_design::e_surface_curve) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    if (td == config_control_design::e_composite_curve_on_surface) {
        out <<  tmp << "(";
        _app_inst -> STEPwrite_reference (out);
        out << ")";
        return;
    }
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
    return;
}

Severity
SdaiCurve_on_surface::STEPread_content (istream& in, InstMgrBase * instances,
            const char *utype, int addFileId, const char *currSch)
{
  (void)instances;
  (void)utype;
  (void)addFileId;
  (void)currSch;
      if (CurrentUnderlyingType () == config_control_design::e_pcurve) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }
    if (CurrentUnderlyingType () == config_control_design::e_surface_curve) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }
    if (CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface) {
        // set Underlying Type in Select class
        _app_inst = ReadEntityRef(in, &_error, ",)", instances, addFileId);
        if( _app_inst && ( _app_inst != S_ENTITY_NULL) &&
               ( CurrentUnderlyingType()->CanBe( _app_inst->getEDesc() ) ) ) {
            return severity();
        } else {
             Error ("Reference to instance that is not indicated type\n");
            _app_inst = 0;
            nullify ();
            return severity (SEVERITY_USERMSG);
        }
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
    return severity ();
}

Severity
SdaiCurve_on_surface::StrToVal_content (const char * str, InstMgrBase * instances)
{
  (void)str;
  (void)instances;
  switch (base_type)  {
  default:  // should never be here - done in Select class

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
#ifdef __SUNCPLUSPLUS__
std::cerr << str << "  " << instances << std::endl;
#endif
    return SEVERITY_WARNING;
  }
#ifdef __GNUG__

  return SEVERITY_NULL;
#endif
}

// STEP Part 22:  SDAI

    //  part 0
SdaiCurve_on_surface::SdaiCurve_on_surface( const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript)
{
#ifdef SC_LOGGING
    if( *logStream )
    {
    *logStream << "DAVE ERR entering SdaiCurve_on_surface constructor." << std::endl;
    }
#endif
   nullify();
#ifdef SC_LOGGING
    if( *logStream )
    {
//    *logStream << "DAVE ERR exiting SdaiCurve_on_surface constructor." << std::endl;
    }
#endif
}

    //  part 1
SdaiCurve_on_surface::SdaiCurve_on_surface( const SdaiPcurve_ptr& o,
                                            const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_pcurve)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiCurve_on_surface constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiCurve_on_surface constructor." << std::endl; }
#endif
}

SdaiCurve_on_surface::SdaiCurve_on_surface( const SdaiSurface_curve_ptr& o,
                                            const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_surface_curve)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiCurve_on_surface constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiCurve_on_surface constructor." << std::endl; }
#endif
}

SdaiCurve_on_surface::SdaiCurve_on_surface( const SdaiComposite_curve_on_surface_ptr& o,
                                            const SelectTypeDescriptor *typedescript )
  : SDAI_Select (typedescript, config_control_design::e_composite_curve_on_surface)
{
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR entering SdaiCurve_on_surface constructor." << std::endl; }
#endif
   _app_inst = o;
#ifdef SC_LOGGING
    if( *logStream ) { *logStream << "DAVE ERR exiting SdaiCurve_on_surface constructor." << std::endl; }
#endif
}

SdaiCurve_on_surface::~SdaiCurve_on_surface() {
}

SdaiCurve_on_surface_agg::SdaiCurve_on_surface_agg( SelectTypeDescriptor *s)
  : SelectAggregate(), sel_type(s)
{
}

SdaiCurve_on_surface_agg::~SdaiCurve_on_surface_agg() { }


    //  part 2
SdaiCurve_on_surface::operator SdaiPcurve_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_pcurve )
      return ((SdaiPcurve_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}

SdaiCurve_on_surface::operator SdaiSurface_curve_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_surface_curve )
      return ((SdaiSurface_curve_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}

SdaiCurve_on_surface::operator SdaiComposite_curve_on_surface_ptr()
{
   if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface )
      return ((SdaiComposite_curve_on_surface_ptr) _app_inst);

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
   return NULL;
}


    //  part 3

Logical SdaiCurve_on_surface::self_intersect_() const {
  if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface ) 
    //  COMPOSITE_CURVE_ON_SURFACE
    return ((SdaiComposite_curve_on_surface_ptr) _app_inst) ->self_intersect_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return (Logical) 0;
}


void SdaiCurve_on_surface::self_intersect_( const Logical x ) {
  if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface ) 
    //  COMPOSITE_CURVE_ON_SURFACE
    {  ((SdaiComposite_curve_on_surface_ptr) _app_inst) ->self_intersect_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

EntityAggregate_ptr SdaiCurve_on_surface::segments_() {
  if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface ) 
    //  COMPOSITE_CURVE_ON_SURFACE
    return ((SdaiComposite_curve_on_surface_ptr) _app_inst) ->segments_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


EntityAggregate_ptr_c SdaiCurve_on_surface::segments_() const {
  if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface ) 
    //  COMPOSITE_CURVE_ON_SURFACE
    return ((const SdaiComposite_curve_on_surface_ptr) _app_inst) ->segments_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiCurve_on_surface::segments_( const EntityAggregate_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface ) 
    //  COMPOSITE_CURVE_ON_SURFACE
    {  ((SdaiComposite_curve_on_surface_ptr) _app_inst) ->segments_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiPreferred_surface_curve_representation_var SdaiCurve_on_surface::master_representation_() {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    return ((SdaiSurface_curve_ptr) _app_inst) ->master_representation_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return (Preferred_surface_curve_representation) 0;
}


const SdaiPreferred_surface_curve_representation_var SdaiCurve_on_surface::master_representation_() const {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    return ((const SdaiSurface_curve_ptr) _app_inst) ->master_representation_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return (Preferred_surface_curve_representation) 0;
}


void SdaiCurve_on_surface::master_representation_( const SdaiPreferred_surface_curve_representation_var x ) {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    {  ((SdaiSurface_curve_ptr) _app_inst) ->master_representation_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiPcurve_or_surface_agg_ptr SdaiCurve_on_surface::associated_geometry_() {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    return ((SdaiSurface_curve_ptr) _app_inst) ->associated_geometry_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


SdaiPcurve_or_surface_agg_ptr_c SdaiCurve_on_surface::associated_geometry_() const {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    return ((const SdaiSurface_curve_ptr) _app_inst) ->associated_geometry_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiCurve_on_surface::associated_geometry_( const SdaiPcurve_or_surface_agg_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    {  ((SdaiSurface_curve_ptr) _app_inst) ->associated_geometry_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiCurve_ptr SdaiCurve_on_surface::curve_3d_() {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    return ((SdaiSurface_curve_ptr) _app_inst) ->curve_3d_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


SdaiCurve_ptr_c SdaiCurve_on_surface::curve_3d_() const {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    return ((const SdaiSurface_curve_ptr) _app_inst) ->curve_3d_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiCurve_on_surface::curve_3d_( const SdaiCurve_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    {  ((SdaiSurface_curve_ptr) _app_inst) ->curve_3d_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiDefinitional_representation_ptr SdaiCurve_on_surface::reference_to_curve_() {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    return ((SdaiPcurve_ptr) _app_inst) ->reference_to_curve_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


SdaiDefinitional_representation_ptr_c SdaiCurve_on_surface::reference_to_curve_() const {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    return ((const SdaiPcurve_ptr) _app_inst) ->reference_to_curve_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiCurve_on_surface::reference_to_curve_( const SdaiDefinitional_representation_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    {  ((SdaiPcurve_ptr) _app_inst) ->reference_to_curve_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiSurface_ptr SdaiCurve_on_surface::basis_surface_() {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    return ((SdaiPcurve_ptr) _app_inst) ->basis_surface_();
  //  for SURFACE_CURVE  attribute is derived
  //  for COMPOSITE_CURVE_ON_SURFACE  attribute is derived
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


SdaiSurface_ptr_c SdaiCurve_on_surface::basis_surface_() const {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    return ((const SdaiPcurve_ptr) _app_inst) ->basis_surface_();
  //  for SURFACE_CURVE  attribute is derived
  //  for COMPOSITE_CURVE_ON_SURFACE  attribute is derived
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiCurve_on_surface::basis_surface_( const SdaiSurface_ptr x ) {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    {  ((SdaiPcurve_ptr) _app_inst) ->basis_surface_( x );
      return;
    }
  //  for SURFACE_CURVE  attribute is derived
  //  for COMPOSITE_CURVE_ON_SURFACE  attribute is derived

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

SdaiLabel SdaiCurve_on_surface::name_() {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    return ((SdaiPcurve_ptr) _app_inst) ->name_();
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    return ((SdaiSurface_curve_ptr) _app_inst) ->name_();
  if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface ) 
    //  COMPOSITE_CURVE_ON_SURFACE
    return ((SdaiComposite_curve_on_surface_ptr) _app_inst) ->name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


const SdaiLabel SdaiCurve_on_surface::name_() const {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    return ((const SdaiPcurve_ptr) _app_inst) ->name_();
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    return ((const SdaiSurface_curve_ptr) _app_inst) ->name_();
  if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface ) 
    //  COMPOSITE_CURVE_ON_SURFACE
    return ((const SdaiComposite_curve_on_surface_ptr) _app_inst) ->name_();
    std::cerr << __FILE__ << ":" << __LINE__ <<  ":  ERROR in schema library:  \n" 
    << _POC_ << "\n\n";
   return 0;
}


void SdaiCurve_on_surface::name_( const SdaiLabel x ) {
  if( CurrentUnderlyingType () == config_control_design::e_pcurve ) 
    //  PCURVE
    {  ((SdaiPcurve_ptr) _app_inst) ->name_( x );
      return;
    }
  if( CurrentUnderlyingType () == config_control_design::e_surface_curve ) 
    //  SURFACE_CURVE
    {  ((SdaiSurface_curve_ptr) _app_inst) ->name_( x );
      return;
    }
  if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface ) 
    //  COMPOSITE_CURVE_ON_SURFACE
    {  ((SdaiComposite_curve_on_surface_ptr) _app_inst) ->name_( x );
      return;
    }

   severity( SEVERITY_WARNING );
   std::cerr << __FILE__ << ":" << __LINE__ <<  ":  WARNING:  possible misuse of"
        << " SELECT TYPE from schema library.\n";
   Error( "Mismatch in underlying type." );
}

    //  part 4
SdaiCurve_on_surface& SdaiCurve_on_surface::operator =( const SdaiPcurve_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_pcurve );
   return *this;
}

SdaiCurve_on_surface& SdaiCurve_on_surface::operator =( const SdaiSurface_curve_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_surface_curve );
   return *this;
}

SdaiCurve_on_surface& SdaiCurve_on_surface::operator =( const SdaiComposite_curve_on_surface_ptr& o )
{
   nullify ();
   _app_inst = o;
   SetUnderlyingType( config_control_design::e_composite_curve_on_surface );
   return *this;
}


#ifndef COMPILER_DEFINES_OPERATOR_EQ

SdaiCurve_on_surface& SdaiCurve_on_surface::operator =( const SdaiCurve_on_surface_ptr& o ) {
    SDAI_Select::operator=( *o );
    if ( o -> CurrentUnderlyingType() == config_control_design::e_pcurve ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::e_surface_curve ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    if ( o -> CurrentUnderlyingType() == config_control_design::e_composite_curve_on_surface ) {
        _app_inst =  o -> _app_inst;
        return *this;
    }
    return *this;
}

SDAI_Select& SdaiCurve_on_surface::operator =( const SDAI_Select& o ) {
    SDAI_Select::operator=( o );
    if ( o.CurrentUnderlyingType() == config_control_design::e_pcurve ) {
        _app_inst = ( ( SdaiCurve_on_surface& ) o )._app_inst;
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::e_surface_curve ) {
        _app_inst = ( ( SdaiCurve_on_surface& ) o )._app_inst;
        return *this;
    }
    if ( o.CurrentUnderlyingType() == config_control_design::e_composite_curve_on_surface ) {
        _app_inst = ( ( SdaiCurve_on_surface& ) o )._app_inst;
        return *this;
    }
   return *this;
}

#endif //ndef COMPILER_DEFINES_OPERATOR_EQ

    //  part 5
Logical SdaiCurve_on_surface::IsPcurve() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_pcurve )
      return LTrue;
   return LFalse;
}

Logical SdaiCurve_on_surface::IsSurface_curve() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_surface_curve )
      return LTrue;
   return LFalse;
}

Logical SdaiCurve_on_surface::IsComposite_curve_on_surface() const
{
   if( !exists() )
      return LUnknown;
   if( CurrentUnderlyingType () == config_control_design::e_composite_curve_on_surface )
      return LTrue;
   return LFalse;
}

//////////  END SELECT TYPE SdaiCurve_on_surface


void init_SdaiCurve_on_surface( Registry& reg ) {
    std::string str;
        config_control_design::t_curve_on_surface = new SelectTypeDescriptor (
                  ~(sdaiINSTANCE),        //unique elements,
                  "Curve_On_Surface",        // Name
                  sdaiSELECT,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "SELECT (Pcurve, Surface_Curve, Composite_Curve_On_Surface)",        // Description
                  (SelectCreator) create_SdaiCurve_on_surface);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_curve_on_surface);
    config_control_design::t_curve_on_surface -> Elements ().AddNode (config_control_design::e_pcurve);
    config_control_design::t_curve_on_surface -> Elements ().AddNode (config_control_design::e_surface_curve);
    config_control_design::t_curve_on_surface -> Elements ().AddNode (config_control_design::e_composite_curve_on_surface);
    reg.AddType (*config_control_design::t_curve_on_surface);
}

#endif
