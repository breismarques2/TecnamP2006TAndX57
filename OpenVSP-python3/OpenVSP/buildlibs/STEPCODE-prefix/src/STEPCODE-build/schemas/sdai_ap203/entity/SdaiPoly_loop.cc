#ifndef  ENTITY_SDAIPOLY_LOOP_CC
#define  ENTITY_SDAIPOLY_LOOP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPoly_loop.h"

EntityDescriptor * config_control_design::e_poly_loop = 0;
AttrDescriptor * config_control_design::a_188polygon = 0;

SdaiPoly_loop::SdaiPoly_loop(): SdaiLoop(), _polygon( 0 ) {
        /*  parent: SdaiLoop  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */
        /*  parent: SdaiGeometric_representation_item  */
    HeadEntity(this);
    AppendMultInstance(new SdaiGeometric_representation_item(this));

    eDesc = config_control_design::e_poly_loop;
    _polygon = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_188polygon, _polygon );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiPoly_loop::SdaiPoly_loop ( SdaiPoly_loop & e ) : SdaiLoop() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPoly_loop::~SdaiPoly_loop() {
    delete _polygon;
}

SdaiPoly_loop::SdaiPoly_loop( SDAI_Application_instance * se, bool addAttrs ) : SdaiLoop( se, addAttrs ), _polygon( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiLoop */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */
        /* parent: SdaiGeometric_representation_item */
    se->AppendMultInstance( new SdaiGeometric_representation_item( se, addAttrs ) );

    eDesc = config_control_design::e_poly_loop;
    _polygon = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_188polygon,  _polygon );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


EntityAggregate_ptr SdaiPoly_loop::polygon_() {
    if( !_polygon ) {
        _polygon = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _polygon;
}

EntityAggregate_ptr_c SdaiPoly_loop::polygon_() const {
    return ( EntityAggregate_ptr ) _polygon;
}

void SdaiPoly_loop::polygon_( const EntityAggregate_ptr x ) {
    if( !_polygon ) {
        _polygon = new EntityAggregate;
    }
    _polygon->ShallowCopy( * x );
}

void init_SdaiPoly_loop( Registry& reg ) {
    std::string str;

    config_control_design::e_poly_loop->AddSupertype(config_control_design::e_loop);
    config_control_design::e_loop->AddSubtype(config_control_design::e_poly_loop);
    config_control_design::e_poly_loop->AddSupertype(config_control_design::e_geometric_representation_item);
    config_control_design::e_geometric_representation_item->AddSubtype(config_control_design::e_poly_loop);
        ListTypeDescriptor * t_37 = new ListTypeDescriptor;
        t_37->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_37->SetBound1( 3 );
        t_37->SetBound2( 2147483647 );
        t_37->UniqueElements(LTrue);
        t_37->FundamentalType(LIST_TYPE);
        t_37->Description("LIST [3:?] OF UNIQUE cartesian_point");
        t_37->OriginatingSchema(config_control_design::schema);
        t_37->ReferentType(config_control_design::e_cartesian_point);
        config_control_design::schema->AddUnnamedType(t_37);
        config_control_design::a_188polygon =
          new AttrDescriptor("polygon",t_37,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_poly_loop);
        config_control_design::e_poly_loop->AddExplicitAttr (config_control_design::a_188polygon);
        reg.AddEntity( *config_control_design::e_poly_loop );
}

#endif
