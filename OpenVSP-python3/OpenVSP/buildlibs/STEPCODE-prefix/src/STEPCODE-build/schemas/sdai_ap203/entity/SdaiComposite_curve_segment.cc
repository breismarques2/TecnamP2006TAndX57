#ifndef  ENTITY_SDAICOMPOSITE_CURVE_SEGMENT_CC
#define  ENTITY_SDAICOMPOSITE_CURVE_SEGMENT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiComposite_curve_segment.h"

EntityDescriptor * config_control_design::e_composite_curve_segment = 0;
AttrDescriptor * config_control_design::a_6transition = 0;
AttrDescriptor * config_control_design::a_7same_sense = 0;
AttrDescriptor * config_control_design::a_8parent_curve = 0;
Inverse_attribute * config_control_design::a_9Iusing_curves = 0;

SdaiComposite_curve_segment::SdaiComposite_curve_segment(): SdaiFounded_item(), _parent_curve( 0 ) {
        /*  parent: SdaiFounded_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_composite_curve_segment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_6transition, & _transition );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_7same_sense, & _same_sense );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_8parent_curve, ( SDAI_Application_instance_ptr * ) & _parent_curve );
    a->set_null();
    attributes.push( a );
}

SdaiComposite_curve_segment::SdaiComposite_curve_segment ( SdaiComposite_curve_segment & e ) : SdaiFounded_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiComposite_curve_segment::~SdaiComposite_curve_segment() {
}

SdaiComposite_curve_segment::SdaiComposite_curve_segment( SDAI_Application_instance * se, bool addAttrs ) : SdaiFounded_item( se, addAttrs ), _parent_curve( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiFounded_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_composite_curve_segment;
    STEPattribute * a = new STEPattribute( * config_control_design::a_6transition,  &_transition );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_7same_sense,  &_same_sense );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_8parent_curve, ( SDAI_Application_instance_ptr * ) &_parent_curve );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiTransition_code_var SdaiComposite_curve_segment::transition_() {
    return (Transition_code) _transition;
}

const SdaiTransition_code_var SdaiComposite_curve_segment::transition_() const {
    return (const Transition_code) _transition;
}

void SdaiComposite_curve_segment::transition_( const SdaiTransition_code_var x ) {
    _transition.put( x );
}

Boolean SdaiComposite_curve_segment::same_sense_() const {
    return (const Boolean) _same_sense;
}

void SdaiComposite_curve_segment::same_sense_( const Boolean x ) {
    _same_sense.put (x);
}

SdaiCurve_ptr SdaiComposite_curve_segment::parent_curve_() {
    if( !_parent_curve ) {
        _parent_curve = new SdaiCurve;
    }
    return (SdaiCurve_ptr) _parent_curve;
}

SdaiCurve_ptr_c SdaiComposite_curve_segment::parent_curve_() const {
    return (SdaiCurve_ptr) _parent_curve;
}

void SdaiComposite_curve_segment::parent_curve_( const SdaiCurve_ptr x ) {
    _parent_curve = x;
}

EntityAggregate_ptr SdaiComposite_curve_segment::using_curves_() {
    iAstruct ias = getInvAttr( config_control_design::a_9Iusing_curves );
    if( !ias.a ) {
        ias.a = new EntityAggregate;
        setInvAttr( config_control_design::a_9Iusing_curves, ias );
    }
    return ias.a;
}

EntityAggregate_ptr_c SdaiComposite_curve_segment::using_curves_() const {
    return getInvAttr( config_control_design::a_9Iusing_curves ).a;
}

void SdaiComposite_curve_segment::using_curves_( const EntityAggregate_ptr x ) {
    iAstruct ias;
    ias.a = x;
    setInvAttr( config_control_design::a_9Iusing_curves, ias );
}

void init_SdaiComposite_curve_segment( Registry& reg ) {
    std::string str;

    config_control_design::e_composite_curve_segment->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( " 'CONFIG_CONTROL_DESIGN.BOUNDED_CURVE' IN TYPEOF( parent_curve )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_composite_curve_segment->_where_rules->Append( wr );
    config_control_design::e_composite_curve_segment->AddSupertype(config_control_design::e_founded_item);
    config_control_design::e_founded_item->AddSubtype(config_control_design::e_composite_curve_segment);
        config_control_design::a_6transition =
          new AttrDescriptor("transition",config_control_design::t_transition_code,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_composite_curve_segment);
        config_control_design::e_composite_curve_segment->AddExplicitAttr (config_control_design::a_6transition);
        config_control_design::a_7same_sense =
          new AttrDescriptor("same_sense",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_composite_curve_segment);
        config_control_design::e_composite_curve_segment->AddExplicitAttr (config_control_design::a_7same_sense);
    config_control_design::a_8parent_curve =
      new AttrDescriptor( "parent_curve", config_control_design::e_curve, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_composite_curve_segment);
        config_control_design::e_composite_curve_segment->AddExplicitAttr (config_control_design::a_8parent_curve);
        BagTypeDescriptor * t_1 = new BagTypeDescriptor;
        t_1->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_1->SetBound1( 1 );
        t_1->SetBound2( 2147483647 );
        t_1->FundamentalType(BAG_TYPE);
        t_1->Description("BAG [1:?] OF composite_curve");
        t_1->OriginatingSchema(config_control_design::schema);
        t_1->ReferentType(config_control_design::e_composite_curve);
        config_control_design::schema->AddUnnamedType(t_1);
        config_control_design::a_9Iusing_curves =
          new Inverse_attribute("using_curves",t_1,LFalse,LFalse,
          *config_control_design::e_composite_curve_segment);
        config_control_design::e_composite_curve_segment->AddInverseAttr (config_control_design::a_9Iusing_curves);
        config_control_design::a_9Iusing_curves->inverted_attr_id_("segments");
        config_control_design::a_9Iusing_curves->inverted_entity_id_("composite_curve");
// inverse entity 3 composite_curve
        reg.AddEntity( *config_control_design::e_composite_curve_segment );
        config_control_design::schema->AddEntityWInverse( config_control_design::e_composite_curve_segment );
}

#endif
