#ifndef  TYPE_SDAIAHEAD_OR_BEHIND_VAR_CC
#define  TYPE_SDAIAHEAD_OR_BEHIND_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiAhead_or_behind_var.h"

const char *
SdaiAhead_or_behind_var::element_at (int n) const  {
  switch (n)  {
  case Ahead_or_behind__ahead:  return "AHEAD";
  case Ahead_or_behind__behind:  return "BEHIND";
  case Ahead_or_behind_unset        :
  default                :  return "UNSET";
  }
}

SdaiAhead_or_behind_var::SdaiAhead_or_behind_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiAhead_or_behind_var::operator Ahead_or_behind () const {
  switch (v) {
        case Ahead_or_behind__ahead        :  return Ahead_or_behind__ahead;
        case Ahead_or_behind__behind        :  return Ahead_or_behind__behind;
        case Ahead_or_behind_unset        :
        default                :  return Ahead_or_behind_unset;
  }
}

SDAI_Enum *
create_SdaiAhead_or_behind_var ()
{
    return new SdaiAhead_or_behind_var( "", config_control_design::t_ahead_or_behind );
}


SdaiAhead_or_behind_var_agg::SdaiAhead_or_behind_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiAhead_or_behind_var_agg::~SdaiAhead_or_behind_var_agg()
{
}

STEPaggregate *
create_SdaiAhead_or_behind_var_agg ()
{
    return new SdaiAhead_or_behind_var_agg( config_control_design::t_ahead_or_behind );
}

void init_SdaiAhead_or_behind_var( Registry& reg ) {
    std::string str;
        config_control_design::t_ahead_or_behind = new EnumTypeDescriptor (
                  "Ahead_Or_Behind",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (ahead, behind)",        // Description
                  (EnumCreator) create_SdaiAhead_or_behind_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_ahead_or_behind);
    reg.AddType (*config_control_design::t_ahead_or_behind);
}

#endif
