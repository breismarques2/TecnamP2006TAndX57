#ifndef  ENTITY_SDAICIRCLE_CC
#define  ENTITY_SDAICIRCLE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCircle.h"

EntityDescriptor * config_control_design::e_circle = 0;
AttrDescriptor * config_control_design::a_302radius = 0;

SdaiCircle::SdaiCircle(): SdaiConic() {
        /*  parent: SdaiConic  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_circle;
    STEPattribute * a = new STEPattribute( * config_control_design::a_302radius, & _radius );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiCircle::SdaiCircle ( SdaiCircle & e ) : SdaiConic() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCircle::~SdaiCircle() {
}

SdaiCircle::SdaiCircle( SDAI_Application_instance * se, bool addAttrs ) : SdaiConic( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiConic */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_circle;
    STEPattribute * a = new STEPattribute( * config_control_design::a_302radius,  &_radius );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiPositive_length_measure SdaiCircle::radius_() const {
    return (SdaiPositive_length_measure) _radius;
}

void SdaiCircle::radius_( const SdaiPositive_length_measure x ) {
    _radius = x;
}

void init_SdaiCircle( Registry& reg ) {
    std::string str;

    config_control_design::e_circle->AddSupertype(config_control_design::e_conic);
    config_control_design::e_conic->AddSubtype(config_control_design::e_circle);
        config_control_design::a_302radius =
          new AttrDescriptor("radius",config_control_design::t_positive_length_measure,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_circle);
        config_control_design::e_circle->AddExplicitAttr (config_control_design::a_302radius);
        reg.AddEntity( *config_control_design::e_circle );
}

#endif
