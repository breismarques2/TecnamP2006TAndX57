#ifndef  ENTITY_SDAIORGANIZATION_CC
#define  ENTITY_SDAIORGANIZATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOrganization.h"

EntityDescriptor * config_control_design::e_organization = 0;
AttrDescriptor * config_control_design::a_264id = 0;
AttrDescriptor * config_control_design::a_265name = 0;
AttrDescriptor * config_control_design::a_266description = 0;

SdaiOrganization::SdaiOrganization() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_organization;
    STEPattribute * a = new STEPattribute( * config_control_design::a_264id, & _id );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_265name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_266description, & _description );
    a->set_null();
    attributes.push( a );
}

SdaiOrganization::SdaiOrganization ( SdaiOrganization & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOrganization::~SdaiOrganization() {
}

SdaiOrganization::SdaiOrganization( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_organization;
    STEPattribute * a = new STEPattribute( * config_control_design::a_264id,  &_id );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_265name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_266description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiOrganization::id_() {
    return _id;
}

const SdaiIdentifier SdaiOrganization::id_() const {
    return (const SdaiIdentifier) _id;
}

void SdaiOrganization::id_( const SdaiIdentifier x ) {
    _id = x;
}

SdaiLabel SdaiOrganization::name_() {
    return _name;
}

const SdaiLabel SdaiOrganization::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiOrganization::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiOrganization::description_() {
    return _description;
}

const SdaiText SdaiOrganization::description_() const {
    return (const SdaiText) _description;
}

void SdaiOrganization::description_( const SdaiText x ) {
    _description = x;
}

void init_SdaiOrganization( Registry& reg ) {
    std::string str;

        config_control_design::a_264id =
          new AttrDescriptor("id",config_control_design::t_identifier,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_organization);
        config_control_design::e_organization->AddExplicitAttr (config_control_design::a_264id);
        config_control_design::a_265name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_organization);
        config_control_design::e_organization->AddExplicitAttr (config_control_design::a_265name);
        config_control_design::a_266description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_organization);
        config_control_design::e_organization->AddExplicitAttr (config_control_design::a_266description);
        reg.AddEntity( *config_control_design::e_organization );
}

#endif
