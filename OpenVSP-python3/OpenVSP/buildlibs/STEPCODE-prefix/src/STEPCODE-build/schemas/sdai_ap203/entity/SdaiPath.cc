#ifndef  ENTITY_SDAIPATH_CC
#define  ENTITY_SDAIPATH_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPath.h"

EntityDescriptor * config_control_design::e_path = 0;
AttrDescriptor * config_control_design::a_183edge_list = 0;

SdaiPath::SdaiPath(): SdaiTopological_representation_item(), _edge_list( 0 ) {
        /*  parent: SdaiTopological_representation_item  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_path;
    _edge_list = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_183edge_list, _edge_list );
    a->set_null();
    attributes.push( a );
}

SdaiPath::SdaiPath ( SdaiPath & e ) : SdaiTopological_representation_item() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPath::~SdaiPath() {
    delete _edge_list;
}

SdaiPath::SdaiPath( SDAI_Application_instance * se, bool addAttrs ) : SdaiTopological_representation_item( se, addAttrs ), _edge_list( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiTopological_representation_item */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_path;
    _edge_list = new EntityAggregate;
    STEPattribute * a = new STEPattribute( * config_control_design::a_183edge_list,  _edge_list );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


EntityAggregate_ptr SdaiPath::edge_list_() {
    if( !_edge_list ) {
        _edge_list = new EntityAggregate;
    }
    return ( EntityAggregate_ptr ) _edge_list;
}

EntityAggregate_ptr_c SdaiPath::edge_list_() const {
    return ( EntityAggregate_ptr ) _edge_list;
}

void SdaiPath::edge_list_( const EntityAggregate_ptr x ) {
    if( !_edge_list ) {
        _edge_list = new EntityAggregate;
    }
    _edge_list->ShallowCopy( * x );
}

void init_SdaiPath( Registry& reg ) {
    std::string str;

    config_control_design::e_path->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "path_head_to_tail( SELF )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_path->_where_rules->Append( wr );
    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( edge_loop, oriented_path )\n" );
    str.append( ")" );
    config_control_design::e_path->AddSupertype_Stmt( str );
    config_control_design::e_path->AddSupertype(config_control_design::e_topological_representation_item);
    config_control_design::e_topological_representation_item->AddSubtype(config_control_design::e_path);
        ListTypeDescriptor * t_35 = new ListTypeDescriptor;
        t_35->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_35->SetBound1( 1 );
        t_35->SetBound2( 2147483647 );
        t_35->UniqueElements(LTrue);
        t_35->FundamentalType(LIST_TYPE);
        t_35->Description("LIST [1:?] OF UNIQUE oriented_edge");
        t_35->OriginatingSchema(config_control_design::schema);
        t_35->ReferentType(config_control_design::e_oriented_edge);
        config_control_design::schema->AddUnnamedType(t_35);
        config_control_design::a_183edge_list =
          new AttrDescriptor("edge_list",t_35,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_path);
        config_control_design::e_path->AddExplicitAttr (config_control_design::a_183edge_list);
        reg.AddEntity( *config_control_design::e_path );
}

#endif
