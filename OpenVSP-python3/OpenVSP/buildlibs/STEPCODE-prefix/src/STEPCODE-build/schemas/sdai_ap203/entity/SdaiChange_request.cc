#ifndef  ENTITY_SDAICHANGE_REQUEST_CC
#define  ENTITY_SDAICHANGE_REQUEST_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiChange_request.h"

EntityDescriptor * config_control_design::e_change_request = 0;
AttrDescriptor * config_control_design::a_152items = 0;

SdaiChange_request::SdaiChange_request(): SdaiAction_request_assignment(), _items( 0 ) {
        /*  parent: SdaiAction_request_assignment  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_change_request;
    _items = new SdaiChange_request_item_agg;
    STEPattribute * a = new STEPattribute( * config_control_design::a_152items, _items );
    a->set_null();
    attributes.push( a );
}

SdaiChange_request::SdaiChange_request ( SdaiChange_request & e ) : SdaiAction_request_assignment() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiChange_request::~SdaiChange_request() {
    delete _items;
}

SdaiChange_request::SdaiChange_request( SDAI_Application_instance * se, bool addAttrs ) : SdaiAction_request_assignment( se, addAttrs ), _items( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiAction_request_assignment */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_change_request;
    _items = new SdaiChange_request_item_agg;
    STEPattribute * a = new STEPattribute( * config_control_design::a_152items,  _items );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiChange_request_item_agg_ptr SdaiChange_request::items_() {
    if( !_items ) {
        _items = new SdaiChange_request_item_agg;
    }
    return ( SdaiChange_request_item_agg_ptr ) _items;
}

SdaiChange_request_item_agg_ptr_c SdaiChange_request::items_() const {
    return ( SdaiChange_request_item_agg_ptr ) _items;
}

void SdaiChange_request::items_( const SdaiChange_request_item_agg_ptr x ) {
    if( !_items ) {
        _items = new SdaiChange_request_item_agg;
    }
    _items->ShallowCopy( * x );
}

void init_SdaiChange_request( Registry& reg ) {
    std::string str;

    config_control_design::e_change_request->AddSupertype(config_control_design::e_action_request_assignment);
    config_control_design::e_action_request_assignment->AddSubtype(config_control_design::e_change_request);
        SetTypeDescriptor * t_28 = new SetTypeDescriptor;
        t_28->AssignAggrCreator((AggregateCreator) create_SdaiChange_request_item_agg);        // Creator function
        t_28->SetBound1( 1 );
        t_28->SetBound2( 2147483647 );
        t_28->FundamentalType(SET_TYPE);
        t_28->Description("SET [1:?] OF change_request_item");
        t_28->OriginatingSchema(config_control_design::schema);
        t_28->ReferentType(config_control_design::t_change_request_item);
        config_control_design::schema->AddUnnamedType(t_28);
        config_control_design::a_152items =
          new AttrDescriptor("items",t_28,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_change_request);
        config_control_design::e_change_request->AddExplicitAttr (config_control_design::a_152items);
        reg.AddEntity( *config_control_design::e_change_request );
}

#endif
