#ifndef  TYPE_SDAISI_PREFIX_VAR_CC
#define  TYPE_SDAISI_PREFIX_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiSi_prefix_var.h"

const char *
SdaiSi_prefix_var::element_at (int n) const  {
  switch (n)  {
  case Si_prefix__exa:  return "EXA";
  case Si_prefix__pico:  return "PICO";
  case Si_prefix__mega:  return "MEGA";
  case Si_prefix__femto:  return "FEMTO";
  case Si_prefix__atto:  return "ATTO";
  case Si_prefix__centi:  return "CENTI";
  case Si_prefix__nano:  return "NANO";
  case Si_prefix__hecto:  return "HECTO";
  case Si_prefix__micro:  return "MICRO";
  case Si_prefix__tera:  return "TERA";
  case Si_prefix__giga:  return "GIGA";
  case Si_prefix__milli:  return "MILLI";
  case Si_prefix__peta:  return "PETA";
  case Si_prefix__deci:  return "DECI";
  case Si_prefix__kilo:  return "KILO";
  case Si_prefix__deca:  return "DECA";
  case Si_prefix_unset        :
  default                :  return "UNSET";
  }
}

SdaiSi_prefix_var::SdaiSi_prefix_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiSi_prefix_var::operator Si_prefix () const {
  switch (v) {
        case Si_prefix__exa        :  return Si_prefix__exa;
        case Si_prefix__pico        :  return Si_prefix__pico;
        case Si_prefix__mega        :  return Si_prefix__mega;
        case Si_prefix__femto        :  return Si_prefix__femto;
        case Si_prefix__atto        :  return Si_prefix__atto;
        case Si_prefix__centi        :  return Si_prefix__centi;
        case Si_prefix__nano        :  return Si_prefix__nano;
        case Si_prefix__hecto        :  return Si_prefix__hecto;
        case Si_prefix__micro        :  return Si_prefix__micro;
        case Si_prefix__tera        :  return Si_prefix__tera;
        case Si_prefix__giga        :  return Si_prefix__giga;
        case Si_prefix__milli        :  return Si_prefix__milli;
        case Si_prefix__peta        :  return Si_prefix__peta;
        case Si_prefix__deci        :  return Si_prefix__deci;
        case Si_prefix__kilo        :  return Si_prefix__kilo;
        case Si_prefix__deca        :  return Si_prefix__deca;
        case Si_prefix_unset        :
        default                :  return Si_prefix_unset;
  }
}

SDAI_Enum *
create_SdaiSi_prefix_var ()
{
    return new SdaiSi_prefix_var( "", config_control_design::t_si_prefix );
}


SdaiSi_prefix_var_agg::SdaiSi_prefix_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiSi_prefix_var_agg::~SdaiSi_prefix_var_agg()
{
}

STEPaggregate *
create_SdaiSi_prefix_var_agg ()
{
    return new SdaiSi_prefix_var_agg( config_control_design::t_si_prefix );
}

void init_SdaiSi_prefix_var( Registry& reg ) {
    std::string str;
        config_control_design::t_si_prefix = new EnumTypeDescriptor (
                  "Si_Prefix",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (exa, peta, tera, giga, mega, kilo, hecto, deca, deci, centi, milli, micro, nano, pico, femto, atto)",        // Description
                  (EnumCreator) create_SdaiSi_prefix_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_si_prefix);
    reg.AddType (*config_control_design::t_si_prefix);
}

#endif
