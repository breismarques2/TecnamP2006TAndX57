#ifndef  ENTITY_SDAILOCAL_TIME_CC
#define  ENTITY_SDAILOCAL_TIME_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiLocal_time.h"

EntityDescriptor * config_control_design::e_local_time = 0;
AttrDescriptor * config_control_design::a_346hour_component = 0;
AttrDescriptor * config_control_design::a_347minute_component = 0;
AttrDescriptor * config_control_design::a_348second_component = 0;
AttrDescriptor * config_control_design::a_349zone = 0;

SdaiLocal_time::SdaiLocal_time() : _zone( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_local_time;
    STEPattribute * a = new STEPattribute( * config_control_design::a_346hour_component, & _hour_component );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_347minute_component, & _minute_component );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_348second_component, & _second_component );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_349zone, ( SDAI_Application_instance_ptr * ) & _zone );
    a->set_null();
    attributes.push( a );
}

SdaiLocal_time::SdaiLocal_time ( SdaiLocal_time & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiLocal_time::~SdaiLocal_time() {
}

SdaiLocal_time::SdaiLocal_time( SDAI_Application_instance * se, bool addAttrs ) : _zone( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_local_time;
    STEPattribute * a = new STEPattribute( * config_control_design::a_346hour_component,  &_hour_component );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_347minute_component,  &_minute_component );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_348second_component,  &_second_component );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_349zone, ( SDAI_Application_instance_ptr * ) &_zone );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiHour_in_day SdaiLocal_time::hour_component_() const {
    return (const SdaiHour_in_day) _hour_component;
}

void SdaiLocal_time::hour_component_( const SdaiHour_in_day x ) {
    _hour_component = x;
}

SdaiMinute_in_hour SdaiLocal_time::minute_component_() const {
    return (const SdaiMinute_in_hour) _minute_component;
}

void SdaiLocal_time::minute_component_( const SdaiMinute_in_hour x ) {
    _minute_component = x;
}

SdaiSecond_in_minute SdaiLocal_time::second_component_() const {
    return (SdaiSecond_in_minute) _second_component;
}

void SdaiLocal_time::second_component_( const SdaiSecond_in_minute x ) {
    _second_component = x;
}

SdaiCoordinated_universal_time_offset_ptr SdaiLocal_time::zone_() {
    if( !_zone ) {
        _zone = new SdaiCoordinated_universal_time_offset;
    }
    return (SdaiCoordinated_universal_time_offset_ptr) _zone;
}

SdaiCoordinated_universal_time_offset_ptr_c SdaiLocal_time::zone_() const {
    return (SdaiCoordinated_universal_time_offset_ptr) _zone;
}

void SdaiLocal_time::zone_( const SdaiCoordinated_universal_time_offset_ptr x ) {
    _zone = x;
}

void init_SdaiLocal_time( Registry& reg ) {
    std::string str;

    config_control_design::e_local_time->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "valid_time( SELF )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_local_time->_where_rules->Append( wr );
        config_control_design::a_346hour_component =
          new AttrDescriptor("hour_component",config_control_design::t_hour_in_day,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_local_time);
        config_control_design::e_local_time->AddExplicitAttr (config_control_design::a_346hour_component);
        config_control_design::a_347minute_component =
          new AttrDescriptor("minute_component",config_control_design::t_minute_in_hour,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_local_time);
        config_control_design::e_local_time->AddExplicitAttr (config_control_design::a_347minute_component);
        config_control_design::a_348second_component =
          new AttrDescriptor("second_component",config_control_design::t_second_in_minute,
          LTrue,LFalse, AttrType_Explicit,
          *config_control_design::e_local_time);
        config_control_design::e_local_time->AddExplicitAttr (config_control_design::a_348second_component);
    config_control_design::a_349zone =
      new AttrDescriptor( "zone", config_control_design::e_coordinated_universal_time_offset, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_local_time);
        config_control_design::e_local_time->AddExplicitAttr (config_control_design::a_349zone);
        reg.AddEntity( *config_control_design::e_local_time );
}

#endif
