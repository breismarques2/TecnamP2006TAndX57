#ifndef  ENTITY_SDAISPECIFIED_HIGHER_USAGE_OCCURRENCE_CC
#define  ENTITY_SDAISPECIFIED_HIGHER_USAGE_OCCURRENCE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiSpecified_higher_usage_occurrence.h"

EntityDescriptor * config_control_design::e_specified_higher_usage_occurrence = 0;
AttrDescriptor * config_control_design::a_240upper_usage = 0;
AttrDescriptor * config_control_design::a_241next_usage = 0;

SdaiSpecified_higher_usage_occurrence::SdaiSpecified_higher_usage_occurrence(): SdaiAssembly_component_usage(), _upper_usage( 0 ), _next_usage( 0 ) {
        /*  parent: SdaiAssembly_component_usage  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_specified_higher_usage_occurrence;
    STEPattribute * a = new STEPattribute( * config_control_design::a_240upper_usage, ( SDAI_Application_instance_ptr * ) & _upper_usage );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_241next_usage, ( SDAI_Application_instance_ptr * ) & _next_usage );
    a->set_null();
    attributes.push( a );
}

SdaiSpecified_higher_usage_occurrence::SdaiSpecified_higher_usage_occurrence ( SdaiSpecified_higher_usage_occurrence & e ) : SdaiAssembly_component_usage() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiSpecified_higher_usage_occurrence::~SdaiSpecified_higher_usage_occurrence() {
}

SdaiSpecified_higher_usage_occurrence::SdaiSpecified_higher_usage_occurrence( SDAI_Application_instance * se, bool addAttrs ) : SdaiAssembly_component_usage( se, addAttrs ), _upper_usage( 0 ), _next_usage( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiAssembly_component_usage */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_specified_higher_usage_occurrence;
    STEPattribute * a = new STEPattribute( * config_control_design::a_240upper_usage, ( SDAI_Application_instance_ptr * ) &_upper_usage );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_241next_usage, ( SDAI_Application_instance_ptr * ) &_next_usage );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiAssembly_component_usage_ptr SdaiSpecified_higher_usage_occurrence::upper_usage_() {
    if( !_upper_usage ) {
        _upper_usage = new SdaiAssembly_component_usage;
    }
    return (SdaiAssembly_component_usage_ptr) _upper_usage;
}

SdaiAssembly_component_usage_ptr_c SdaiSpecified_higher_usage_occurrence::upper_usage_() const {
    return (SdaiAssembly_component_usage_ptr) _upper_usage;
}

void SdaiSpecified_higher_usage_occurrence::upper_usage_( const SdaiAssembly_component_usage_ptr x ) {
    _upper_usage = x;
}

SdaiNext_assembly_usage_occurrence_ptr SdaiSpecified_higher_usage_occurrence::next_usage_() {
    if( !_next_usage ) {
        _next_usage = new SdaiNext_assembly_usage_occurrence;
    }
    return (SdaiNext_assembly_usage_occurrence_ptr) _next_usage;
}

SdaiNext_assembly_usage_occurrence_ptr_c SdaiSpecified_higher_usage_occurrence::next_usage_() const {
    return (SdaiNext_assembly_usage_occurrence_ptr) _next_usage;
}

void SdaiSpecified_higher_usage_occurrence::next_usage_( const SdaiNext_assembly_usage_occurrence_ptr x ) {
    _next_usage = x;
}

void init_SdaiSpecified_higher_usage_occurrence( Registry& reg ) {
    std::string str;

    config_control_design::e_specified_higher_usage_occurrence->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SELF :<>: upper_usage\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_specified_higher_usage_occurrence->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "SELF\\product_definition_relationship.relating_product_definition :=: upper_usage.relating_product_definition\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_specified_higher_usage_occurrence->_where_rules->Append( wr );
        str.clear();
        str.append( "wr3: (" );
    str.append( "SELF\\product_definition_relationship.related_product_definition :=: next_usage.related_product_definition\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_specified_higher_usage_occurrence->_where_rules->Append( wr );
        str.clear();
        str.append( "wr4: (" );
    str.append( "upper_usage.related_product_definition :=: next_usage.relating_product_definition\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_specified_higher_usage_occurrence->_where_rules->Append( wr );
        str.clear();
        str.append( "wr5: (" );
    str.append( "NOT ( 'CONFIG_CONTROL_DESIGN.PROMISSORY_USAGE_OCCURRENCE' IN TYPEOF( upper_usage ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_specified_higher_usage_occurrence->_where_rules->Append( wr );
        config_control_design::e_specified_higher_usage_occurrence->_uniqueness_rules = new Uniqueness_rule__set;
        Uniqueness_rule * ur;
        str.clear();
    str.append( "UR1 : " );
    str.append( "upper_usage\n" );
    str.append( ", " );
    str.append( "next_usage\n" );
    ur = new Uniqueness_rule( str.c_str() );
    config_control_design::e_specified_higher_usage_occurrence->_uniqueness_rules->Append(ur);
    config_control_design::e_specified_higher_usage_occurrence->AddSupertype(config_control_design::e_assembly_component_usage);
    config_control_design::e_assembly_component_usage->AddSubtype(config_control_design::e_specified_higher_usage_occurrence);
    config_control_design::a_240upper_usage =
      new AttrDescriptor( "upper_usage", config_control_design::e_assembly_component_usage, LFalse,
       LTrue, AttrType_Explicit, *config_control_design::e_specified_higher_usage_occurrence);
        config_control_design::e_specified_higher_usage_occurrence->AddExplicitAttr (config_control_design::a_240upper_usage);
    config_control_design::a_241next_usage =
      new AttrDescriptor( "next_usage", config_control_design::e_next_assembly_usage_occurrence, LFalse,
       LTrue, AttrType_Explicit, *config_control_design::e_specified_higher_usage_occurrence);
        config_control_design::e_specified_higher_usage_occurrence->AddExplicitAttr (config_control_design::a_241next_usage);
        reg.AddEntity( *config_control_design::e_specified_higher_usage_occurrence );
}

#endif
