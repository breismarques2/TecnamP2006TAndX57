#ifndef  ENTITY_SDAIREPRESENTATION_CONTEXT_CC
#define  ENTITY_SDAIREPRESENTATION_CONTEXT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiRepresentation_context.h"

EntityDescriptor * config_control_design::e_representation_context = 0;
AttrDescriptor * config_control_design::a_72context_identifier = 0;
AttrDescriptor * config_control_design::a_73context_type = 0;
Inverse_attribute * config_control_design::a_74Irepresentations_in_context = 0;

SdaiRepresentation_context::SdaiRepresentation_context() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_representation_context;
    STEPattribute * a = new STEPattribute( * config_control_design::a_72context_identifier, & _context_identifier );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_73context_type, & _context_type );
    a->set_null();
    attributes.push( a );
}

SdaiRepresentation_context::SdaiRepresentation_context ( SdaiRepresentation_context & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiRepresentation_context::~SdaiRepresentation_context() {
}

SdaiRepresentation_context::SdaiRepresentation_context( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_representation_context;
    STEPattribute * a = new STEPattribute( * config_control_design::a_72context_identifier,  &_context_identifier );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_73context_type,  &_context_type );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiIdentifier SdaiRepresentation_context::context_identifier_() {
    return _context_identifier;
}

const SdaiIdentifier SdaiRepresentation_context::context_identifier_() const {
    return (const SdaiIdentifier) _context_identifier;
}

void SdaiRepresentation_context::context_identifier_( const SdaiIdentifier x ) {
    _context_identifier = x;
}

SdaiText SdaiRepresentation_context::context_type_() {
    return _context_type;
}

const SdaiText SdaiRepresentation_context::context_type_() const {
    return (const SdaiText) _context_type;
}

void SdaiRepresentation_context::context_type_( const SdaiText x ) {
    _context_type = x;
}

EntityAggregate_ptr SdaiRepresentation_context::representations_in_context_() {
    iAstruct ias = getInvAttr( config_control_design::a_74Irepresentations_in_context );
    if( !ias.a ) {
        ias.a = new EntityAggregate;
        setInvAttr( config_control_design::a_74Irepresentations_in_context, ias );
    }
    return ias.a;
}

EntityAggregate_ptr_c SdaiRepresentation_context::representations_in_context_() const {
    return getInvAttr( config_control_design::a_74Irepresentations_in_context ).a;
}

void SdaiRepresentation_context::representations_in_context_( const EntityAggregate_ptr x ) {
    iAstruct ias;
    ias.a = x;
    setInvAttr( config_control_design::a_74Irepresentations_in_context, ias );
}

void init_SdaiRepresentation_context( Registry& reg ) {
    std::string str;

        config_control_design::a_72context_identifier =
          new AttrDescriptor("context_identifier",config_control_design::t_identifier,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_representation_context);
        config_control_design::e_representation_context->AddExplicitAttr (config_control_design::a_72context_identifier);
        config_control_design::a_73context_type =
          new AttrDescriptor("context_type",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_representation_context);
        config_control_design::e_representation_context->AddExplicitAttr (config_control_design::a_73context_type);
        SetTypeDescriptor * t_9 = new SetTypeDescriptor;
        t_9->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_9->SetBound1( 1 );
        t_9->SetBound2( 2147483647 );
        t_9->FundamentalType(SET_TYPE);
        t_9->Description("SET [1:?] OF representation");
        t_9->OriginatingSchema(config_control_design::schema);
        t_9->ReferentType(config_control_design::e_representation);
        config_control_design::schema->AddUnnamedType(t_9);
        config_control_design::a_74Irepresentations_in_context =
          new Inverse_attribute("representations_in_context",t_9,LFalse,LFalse,
          *config_control_design::e_representation_context);
        config_control_design::e_representation_context->AddInverseAttr (config_control_design::a_74Irepresentations_in_context);
        config_control_design::a_74Irepresentations_in_context->inverted_attr_id_("context_of_items");
        config_control_design::a_74Irepresentations_in_context->inverted_entity_id_("representation");
// inverse entity 3 representation
        reg.AddEntity( *config_control_design::e_representation_context );
        config_control_design::schema->AddEntityWInverse( config_control_design::e_representation_context );
}

#endif
