#ifndef  ENTITY_SDAIOFFSET_SURFACE_CC
#define  ENTITY_SDAIOFFSET_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOffset_surface.h"

EntityDescriptor * config_control_design::e_offset_surface = 0;
AttrDescriptor * config_control_design::a_361basis_surface = 0;
AttrDescriptor * config_control_design::a_362distance = 0;
AttrDescriptor * config_control_design::a_363self_intersect = 0;

SdaiOffset_surface::SdaiOffset_surface(): SdaiSurface(), _basis_surface( 0 ) {
        /*  parent: SdaiSurface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_offset_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_361basis_surface, ( SDAI_Application_instance_ptr * ) & _basis_surface );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_362distance, & _distance );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_363self_intersect, & _self_intersect );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiOffset_surface::SdaiOffset_surface ( SdaiOffset_surface & e ) : SdaiSurface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOffset_surface::~SdaiOffset_surface() {
}

SdaiOffset_surface::SdaiOffset_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiSurface( se, addAttrs ), _basis_surface( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiSurface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_offset_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_361basis_surface, ( SDAI_Application_instance_ptr * ) &_basis_surface );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_362distance,  &_distance );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_363self_intersect,  &_self_intersect );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiSurface_ptr SdaiOffset_surface::basis_surface_() {
    if( !_basis_surface ) {
        _basis_surface = new SdaiSurface;
    }
    return (SdaiSurface_ptr) _basis_surface;
}

SdaiSurface_ptr_c SdaiOffset_surface::basis_surface_() const {
    return (SdaiSurface_ptr) _basis_surface;
}

void SdaiOffset_surface::basis_surface_( const SdaiSurface_ptr x ) {
    _basis_surface = x;
}

SdaiLength_measure SdaiOffset_surface::distance_() const {
    return (SdaiLength_measure) _distance;
}

void SdaiOffset_surface::distance_( const SdaiLength_measure x ) {
    _distance = x;
}

Logical SdaiOffset_surface::self_intersect_() const {
    return (const Logical) _self_intersect;
}

void SdaiOffset_surface::self_intersect_( const Logical x ) {
    _self_intersect.put (x);
}

void init_SdaiOffset_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_offset_surface->AddSupertype(config_control_design::e_surface);
    config_control_design::e_surface->AddSubtype(config_control_design::e_offset_surface);
    config_control_design::a_361basis_surface =
      new AttrDescriptor( "basis_surface", config_control_design::e_surface, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_offset_surface);
        config_control_design::e_offset_surface->AddExplicitAttr (config_control_design::a_361basis_surface);
        config_control_design::a_362distance =
          new AttrDescriptor("distance",config_control_design::t_length_measure,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_offset_surface);
        config_control_design::e_offset_surface->AddExplicitAttr (config_control_design::a_362distance);
        config_control_design::a_363self_intersect =
          new AttrDescriptor("self_intersect",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_offset_surface);
        config_control_design::e_offset_surface->AddExplicitAttr (config_control_design::a_363self_intersect);
        reg.AddEntity( *config_control_design::e_offset_surface );
}

#endif
