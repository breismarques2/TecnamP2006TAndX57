#ifndef  ENTITY_SDAIPRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE_CC
#define  ENTITY_SDAIPRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiProduct_definition_formation_with_specified_source.h"

EntityDescriptor * config_control_design::e_product_definition_formation_with_specified_source = 0;
AttrDescriptor * config_control_design::a_32make_or_buy = 0;

SdaiProduct_definition_formation_with_specified_source::SdaiProduct_definition_formation_with_specified_source(): SdaiProduct_definition_formation() {
        /*  parent: SdaiProduct_definition_formation  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_product_definition_formation_with_specified_source;
    STEPattribute * a = new STEPattribute( * config_control_design::a_32make_or_buy, & _make_or_buy );
    a->set_null();
    attributes.push( a );
}

SdaiProduct_definition_formation_with_specified_source::SdaiProduct_definition_formation_with_specified_source ( SdaiProduct_definition_formation_with_specified_source & e ) : SdaiProduct_definition_formation() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiProduct_definition_formation_with_specified_source::~SdaiProduct_definition_formation_with_specified_source() {
}

SdaiProduct_definition_formation_with_specified_source::SdaiProduct_definition_formation_with_specified_source( SDAI_Application_instance * se, bool addAttrs ) : SdaiProduct_definition_formation( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiProduct_definition_formation */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_product_definition_formation_with_specified_source;
    STEPattribute * a = new STEPattribute( * config_control_design::a_32make_or_buy,  &_make_or_buy );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiSource_var SdaiProduct_definition_formation_with_specified_source::make_or_buy_() {
    return (Source) _make_or_buy;
}

const SdaiSource_var SdaiProduct_definition_formation_with_specified_source::make_or_buy_() const {
    return (const Source) _make_or_buy;
}

void SdaiProduct_definition_formation_with_specified_source::make_or_buy_( const SdaiSource_var x ) {
    _make_or_buy.put( x );
}

void init_SdaiProduct_definition_formation_with_specified_source( Registry& reg ) {
    std::string str;

    config_control_design::e_product_definition_formation_with_specified_source->AddSupertype(config_control_design::e_product_definition_formation);
    config_control_design::e_product_definition_formation->AddSubtype(config_control_design::e_product_definition_formation_with_specified_source);
        config_control_design::a_32make_or_buy =
          new AttrDescriptor("make_or_buy",config_control_design::t_source,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_definition_formation_with_specified_source);
        config_control_design::e_product_definition_formation_with_specified_source->AddExplicitAttr (config_control_design::a_32make_or_buy);
        reg.AddEntity( *config_control_design::e_product_definition_formation_with_specified_source );
}

#endif
