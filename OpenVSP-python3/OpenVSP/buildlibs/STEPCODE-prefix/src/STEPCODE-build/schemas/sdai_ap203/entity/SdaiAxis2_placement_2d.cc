#ifndef  ENTITY_SDAIAXIS2_PLACEMENT_2D_CC
#define  ENTITY_SDAIAXIS2_PLACEMENT_2D_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiAxis2_placement_2d.h"

EntityDescriptor * config_control_design::e_axis2_placement_2d = 0;
AttrDescriptor * config_control_design::a_379ref_direction = 0;
Derived_attribute * config_control_design::a_380Dp = 0;

SdaiAxis2_placement_2d::SdaiAxis2_placement_2d(): SdaiPlacement(), _ref_direction( 0 ) {
        /*  parent: SdaiPlacement  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_axis2_placement_2d;
    STEPattribute * a = new STEPattribute( * config_control_design::a_379ref_direction, ( SDAI_Application_instance_ptr * ) & _ref_direction );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "p", "axis2_placement_2d" );
}

SdaiAxis2_placement_2d::SdaiAxis2_placement_2d ( SdaiAxis2_placement_2d & e ) : SdaiPlacement() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiAxis2_placement_2d::~SdaiAxis2_placement_2d() {
}

SdaiAxis2_placement_2d::SdaiAxis2_placement_2d( SDAI_Application_instance * se, bool addAttrs ) : SdaiPlacement( se, addAttrs ), _ref_direction( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiPlacement */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_axis2_placement_2d;
    STEPattribute * a = new STEPattribute( * config_control_design::a_379ref_direction, ( SDAI_Application_instance_ptr * ) &_ref_direction );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "p", "axis2_placement_2d" );
}


SdaiDirection_ptr SdaiAxis2_placement_2d::ref_direction_() {
    if( !_ref_direction ) {
        _ref_direction = new SdaiDirection;
    }
    return (SdaiDirection_ptr) _ref_direction;
}

SdaiDirection_ptr_c SdaiAxis2_placement_2d::ref_direction_() const {
    return (SdaiDirection_ptr) _ref_direction;
}

void SdaiAxis2_placement_2d::ref_direction_( const SdaiDirection_ptr x ) {
    _ref_direction = x;
}

void init_SdaiAxis2_placement_2d( Registry& reg ) {
    std::string str;

    config_control_design::e_axis2_placement_2d->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "SELF\\geometric_representation_item.dim = 2\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_axis2_placement_2d->_where_rules->Append( wr );
    config_control_design::e_axis2_placement_2d->AddSupertype(config_control_design::e_placement);
    config_control_design::e_placement->AddSubtype(config_control_design::e_axis2_placement_2d);
    config_control_design::a_379ref_direction =
      new AttrDescriptor( "ref_direction", config_control_design::e_direction, LTrue,
       LFalse, AttrType_Explicit, *config_control_design::e_axis2_placement_2d);
        config_control_design::e_axis2_placement_2d->AddExplicitAttr (config_control_design::a_379ref_direction);
        ListTypeDescriptor * t_67 = new ListTypeDescriptor;
        t_67->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_67->SetBound1( 2 );
        t_67->SetBound2( 2 );
        t_67->FundamentalType(LIST_TYPE);
        t_67->Description("LIST [2:2] OF direction");
        t_67->OriginatingSchema(config_control_design::schema);
        t_67->ReferentType(config_control_design::e_direction);
        config_control_design::schema->AddUnnamedType(t_67);
        config_control_design::a_380Dp =
          new Derived_attribute("p",t_67,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_axis2_placement_2d);
        config_control_design::e_axis2_placement_2d->AddExplicitAttr (config_control_design::a_380Dp);
        config_control_design::a_380Dp->initializer_("build_2axes( ref_direction )");
        reg.AddEntity( *config_control_design::e_axis2_placement_2d );
}

#endif
