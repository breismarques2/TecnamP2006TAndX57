#ifndef  ENTITY_SDAICONIC_CC
#define  ENTITY_SDAICONIC_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiConic.h"

EntityDescriptor * config_control_design::e_conic = 0;
AttrDescriptor * config_control_design::a_171position = 0;

SdaiConic::SdaiConic(): SdaiCurve() {
        /*  parent: SdaiCurve  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_conic;
    STEPattribute * a = new STEPattribute( * config_control_design::a_171position, & _position );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiConic::SdaiConic ( SdaiConic & e ) : SdaiCurve() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiConic::~SdaiConic() {
}

SdaiConic::SdaiConic( SDAI_Application_instance * se, bool addAttrs ) : SdaiCurve( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiCurve */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_conic;
    STEPattribute * a = new STEPattribute( * config_control_design::a_171position,  &_position );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiAxis2_placement_ptr SdaiConic::position_()  {
    return &_position;
}

SdaiAxis2_placement_ptr_c SdaiConic::position_() const {
    return (const SdaiAxis2_placement_ptr) &_position;
}

void SdaiConic::position_( const SdaiAxis2_placement_ptr x )  {
    _position = x;
}

void init_SdaiConic( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( circle, ellipse, hyperbola, parabola )\n" );
    str.append( ")" );
    config_control_design::e_conic->AddSupertype_Stmt( str );
    config_control_design::e_conic->AddSupertype(config_control_design::e_curve);
    config_control_design::e_curve->AddSubtype(config_control_design::e_conic);
        config_control_design::a_171position =
          new AttrDescriptor("position",config_control_design::t_axis2_placement,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_conic);
        config_control_design::e_conic->AddExplicitAttr (config_control_design::a_171position);
        reg.AddEntity( *config_control_design::e_conic );
}

#endif
