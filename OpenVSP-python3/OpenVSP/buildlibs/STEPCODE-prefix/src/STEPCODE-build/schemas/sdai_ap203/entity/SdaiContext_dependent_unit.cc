#ifndef  ENTITY_SDAICONTEXT_DEPENDENT_UNIT_CC
#define  ENTITY_SDAICONTEXT_DEPENDENT_UNIT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiContext_dependent_unit.h"

EntityDescriptor * config_control_design::e_context_dependent_unit = 0;
AttrDescriptor * config_control_design::a_230name = 0;

SdaiContext_dependent_unit::SdaiContext_dependent_unit(): SdaiNamed_unit() {
        /*  parent: SdaiNamed_unit  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_context_dependent_unit;
    STEPattribute * a = new STEPattribute( * config_control_design::a_230name, & _name );
    a->set_null();
    attributes.push( a );
}

SdaiContext_dependent_unit::SdaiContext_dependent_unit ( SdaiContext_dependent_unit & e ) : SdaiNamed_unit() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiContext_dependent_unit::~SdaiContext_dependent_unit() {
}

SdaiContext_dependent_unit::SdaiContext_dependent_unit( SDAI_Application_instance * se, bool addAttrs ) : SdaiNamed_unit( se, addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiNamed_unit */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_context_dependent_unit;
    STEPattribute * a = new STEPattribute( * config_control_design::a_230name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiContext_dependent_unit::name_() {
    return _name;
}

const SdaiLabel SdaiContext_dependent_unit::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiContext_dependent_unit::name_( const SdaiLabel x ) {
    _name = x;
}

void init_SdaiContext_dependent_unit( Registry& reg ) {
    std::string str;

    config_control_design::e_context_dependent_unit->AddSupertype(config_control_design::e_named_unit);
    config_control_design::e_named_unit->AddSubtype(config_control_design::e_context_dependent_unit);
        config_control_design::a_230name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_context_dependent_unit);
        config_control_design::e_context_dependent_unit->AddExplicitAttr (config_control_design::a_230name);
        reg.AddEntity( *config_control_design::e_context_dependent_unit );
}

#endif
