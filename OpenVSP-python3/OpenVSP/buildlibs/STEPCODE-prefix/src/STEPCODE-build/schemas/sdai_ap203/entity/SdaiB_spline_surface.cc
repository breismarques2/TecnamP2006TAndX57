#ifndef  ENTITY_SDAIB_SPLINE_SURFACE_CC
#define  ENTITY_SDAIB_SPLINE_SURFACE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiB_spline_surface.h"

EntityDescriptor * config_control_design::e_b_spline_surface = 0;
AttrDescriptor * config_control_design::a_102u_degree = 0;
AttrDescriptor * config_control_design::a_103v_degree = 0;
AttrDescriptor * config_control_design::a_104control_points_list = 0;
AttrDescriptor * config_control_design::a_105surface_form = 0;
AttrDescriptor * config_control_design::a_106u_closed = 0;
AttrDescriptor * config_control_design::a_107v_closed = 0;
AttrDescriptor * config_control_design::a_108self_intersect = 0;
Derived_attribute * config_control_design::a_109Du_upper = 0;
Derived_attribute * config_control_design::a_110Dv_upper = 0;
Derived_attribute * config_control_design::a_111Dcontrol_points = 0;

SdaiB_spline_surface::SdaiB_spline_surface(): SdaiBounded_surface(), _control_points_list( 0 ) {
        /*  parent: SdaiBounded_surface  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_b_spline_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_102u_degree, & _u_degree );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_103v_degree, & _v_degree );
    a->set_null();
    attributes.push( a );
    _control_points_list = new GenericAggregate;
    a = new STEPattribute( * config_control_design::a_104control_points_list, _control_points_list );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_105surface_form, & _surface_form );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_106u_closed, & _u_closed );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_107v_closed, & _v_closed );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_108self_intersect, & _self_intersect );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "u_upper", "b_spline_surface" );
    MakeDerived( "v_upper", "b_spline_surface" );
    MakeDerived( "control_points", "b_spline_surface" );
}

SdaiB_spline_surface::SdaiB_spline_surface ( SdaiB_spline_surface & e ) : SdaiBounded_surface() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiB_spline_surface::~SdaiB_spline_surface() {
    delete _control_points_list;
}

SdaiB_spline_surface::SdaiB_spline_surface( SDAI_Application_instance * se, bool addAttrs ) : SdaiBounded_surface( se, addAttrs ), _control_points_list( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiBounded_surface */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_b_spline_surface;
    STEPattribute * a = new STEPattribute( * config_control_design::a_102u_degree,  &_u_degree );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_103v_degree,  &_v_degree );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    _control_points_list = new GenericAggregate;
    a = new STEPattribute( * config_control_design::a_104control_points_list,  _control_points_list );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_105surface_form,  &_surface_form );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_106u_closed,  &_u_closed );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_107v_closed,  &_v_closed );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_108self_intersect,  &_self_intersect );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
    MakeDerived( "u_upper", "b_spline_surface" );
    MakeDerived( "v_upper", "b_spline_surface" );
    MakeDerived( "control_points", "b_spline_surface" );
}


SDAI_Integer SdaiB_spline_surface::u_degree_() const {
    return (const SDAI_Integer) _u_degree;
}

void SdaiB_spline_surface::u_degree_( const SDAI_Integer x ) {
    _u_degree = x;
}

SDAI_Integer SdaiB_spline_surface::v_degree_() const {
    return (const SDAI_Integer) _v_degree;
}

void SdaiB_spline_surface::v_degree_( const SDAI_Integer x ) {
    _v_degree = x;
}

GenericAggregate_ptr SdaiB_spline_surface::control_points_list_() {
    if( !_control_points_list ) {
        _control_points_list = new GenericAggregate;
    }
    return ( GenericAggregate_ptr ) _control_points_list;
}

GenericAggregate_ptr_c SdaiB_spline_surface::control_points_list_() const {
    return ( GenericAggregate_ptr ) _control_points_list;
}

void SdaiB_spline_surface::control_points_list_( const GenericAggregate_ptr x ) {
    if( !_control_points_list ) {
        _control_points_list = new GenericAggregate;
    }
    _control_points_list->ShallowCopy( * x );
}

SdaiB_spline_surface_form_var SdaiB_spline_surface::surface_form_() {
    return (B_spline_surface_form) _surface_form;
}

const SdaiB_spline_surface_form_var SdaiB_spline_surface::surface_form_() const {
    return (const B_spline_surface_form) _surface_form;
}

void SdaiB_spline_surface::surface_form_( const SdaiB_spline_surface_form_var x ) {
    _surface_form.put( x );
}

Logical SdaiB_spline_surface::u_closed_() const {
    return (const Logical) _u_closed;
}

void SdaiB_spline_surface::u_closed_( const Logical x ) {
    _u_closed.put (x);
}

Logical SdaiB_spline_surface::v_closed_() const {
    return (const Logical) _v_closed;
}

void SdaiB_spline_surface::v_closed_( const Logical x ) {
    _v_closed.put (x);
}

Logical SdaiB_spline_surface::self_intersect_() const {
    return (const Logical) _self_intersect;
}

void SdaiB_spline_surface::self_intersect_( const Logical x ) {
    _self_intersect.put (x);
}

void init_SdaiB_spline_surface( Registry& reg ) {
    std::string str;

    config_control_design::e_b_spline_surface->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "( 'CONFIG_CONTROL_DESIGN.UNIFORM_SURFACE' IN TYPEOF( SELF ) ) OR ( 'CONFIG_CONTROL_DESIGN.QUASI_UNIFORM_SURFACE' IN TYPEOF( SELF ) ) \n" );
    str.append( "      OR ( 'CONFIG_CONTROL_DESIGN.BEZIER_SURFACE' IN TYPEOF( SELF ) ) OR ( 'CONFIG_CONTROL_DESIGN.B_SPLINE_SURFACE_WITH_KNOTS' IN \n" );
    str.append( "      TYPEOF( SELF ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_b_spline_surface->_where_rules->Append( wr );
    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( b_spline_surface_with_knots, uniform_surface, quasi_uniform_surface, bezier_surface ) ANDOR rational_b_spline_surface\n" );
    str.append( ")" );
    config_control_design::e_b_spline_surface->AddSupertype_Stmt( str );
    config_control_design::e_b_spline_surface->AddSupertype(config_control_design::e_bounded_surface);
    config_control_design::e_bounded_surface->AddSubtype(config_control_design::e_b_spline_surface);
        config_control_design::a_102u_degree =
          new AttrDescriptor("u_degree",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_102u_degree);
        config_control_design::a_103v_degree =
          new AttrDescriptor("v_degree",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_103v_degree);
        ListTypeDescriptor * t_14 = new ListTypeDescriptor;
        t_14->AssignAggrCreator((AggregateCreator) create_GenericAggregate);        // Creator function
        t_14->SetBound1( 2 );
        t_14->SetBound2( 2147483647 );
        t_14->FundamentalType(LIST_TYPE);
        t_14->Description("LIST [2:?] OF LIST [2:?] OF cartesian_point");
        t_14->OriginatingSchema(config_control_design::schema);
        ListTypeDescriptor * t_15 = new ListTypeDescriptor;
        t_15->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_15->SetBound1( 2 );
        t_15->SetBound2( 2147483647 );
        t_15->FundamentalType(LIST_TYPE);
        t_15->Description("LIST [2:?] OF cartesian_point");
        t_15->OriginatingSchema(config_control_design::schema);
        t_15->ReferentType(config_control_design::e_cartesian_point);
        config_control_design::schema->AddUnnamedType(t_15);
        t_14->ReferentType(t_15);
        config_control_design::schema->AddUnnamedType(t_14);
        config_control_design::a_104control_points_list =
          new AttrDescriptor("control_points_list",t_14,LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_104control_points_list);
        config_control_design::a_105surface_form =
          new AttrDescriptor("surface_form",config_control_design::t_b_spline_surface_form,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_105surface_form);
        config_control_design::a_106u_closed =
          new AttrDescriptor("u_closed",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_106u_closed);
        config_control_design::a_107v_closed =
          new AttrDescriptor("v_closed",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_107v_closed);
        config_control_design::a_108self_intersect =
          new AttrDescriptor("self_intersect",t_sdaiLOGICAL,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_108self_intersect);
        config_control_design::a_109Du_upper =
          new Derived_attribute("u_upper",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_109Du_upper);
        config_control_design::a_109Du_upper->initializer_("SIZEOF( control_points_list ) - 1");
        config_control_design::a_110Dv_upper =
          new Derived_attribute("v_upper",t_sdaiINTEGER,
          LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_110Dv_upper);
        config_control_design::a_110Dv_upper->initializer_("SIZEOF( control_points_list[1] ) - 1");
        ArrayTypeDescriptor * t_16 = new ArrayTypeDescriptor;
        t_16->AssignAggrCreator((AggregateCreator) create_GenericAggregate);        // Creator function
        t_16->SetBound1( 0 );
        t_16->SetBound2( -1962471048 );
        t_16->FundamentalType(ARRAY_TYPE);
        t_16->Description("ARRAY [0:u_upper] OF ARRAY [0:v_upper] OF cartesian_point");
        t_16->OriginatingSchema(config_control_design::schema);
        ArrayTypeDescriptor * t_17 = new ArrayTypeDescriptor;
        t_17->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_17->SetBound1( 0 );
        t_17->SetBound2( -1962470992 );
        t_17->FundamentalType(ARRAY_TYPE);
        t_17->Description("ARRAY [0:v_upper] OF cartesian_point");
        t_17->OriginatingSchema(config_control_design::schema);
        t_17->ReferentType(config_control_design::e_cartesian_point);
        config_control_design::schema->AddUnnamedType(t_17);
        t_16->ReferentType(t_17);
        config_control_design::schema->AddUnnamedType(t_16);
        config_control_design::a_111Dcontrol_points =
          new Derived_attribute("control_points",t_16,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_b_spline_surface);
        config_control_design::e_b_spline_surface->AddExplicitAttr (config_control_design::a_111Dcontrol_points);
        config_control_design::a_111Dcontrol_points->initializer_("make_array_of_array( control_points_list, 0, u_upper, 0, v_upper )");
        reg.AddEntity( *config_control_design::e_b_spline_surface );
}

#endif
