#ifndef  ENTITY_SDAIPRODUCT_DEFINITION_EFFECTIVITY_CC
#define  ENTITY_SDAIPRODUCT_DEFINITION_EFFECTIVITY_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiProduct_definition_effectivity.h"

EntityDescriptor * config_control_design::e_product_definition_effectivity = 0;
AttrDescriptor * config_control_design::a_308usage = 0;

SdaiProduct_definition_effectivity::SdaiProduct_definition_effectivity(): SdaiEffectivity(), _usage( 0 ) {
        /*  parent: SdaiEffectivity  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_product_definition_effectivity;
    STEPattribute * a = new STEPattribute( * config_control_design::a_308usage, ( SDAI_Application_instance_ptr * ) & _usage );
    a->set_null();
    attributes.push( a );
}

SdaiProduct_definition_effectivity::SdaiProduct_definition_effectivity ( SdaiProduct_definition_effectivity & e ) : SdaiEffectivity() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiProduct_definition_effectivity::~SdaiProduct_definition_effectivity() {
}

SdaiProduct_definition_effectivity::SdaiProduct_definition_effectivity( SDAI_Application_instance * se, bool addAttrs ) : SdaiEffectivity( se, addAttrs ), _usage( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiEffectivity */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_product_definition_effectivity;
    STEPattribute * a = new STEPattribute( * config_control_design::a_308usage, ( SDAI_Application_instance_ptr * ) &_usage );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiProduct_definition_relationship_ptr SdaiProduct_definition_effectivity::usage_() {
    if( !_usage ) {
        _usage = new SdaiProduct_definition_relationship;
    }
    return (SdaiProduct_definition_relationship_ptr) _usage;
}

SdaiProduct_definition_relationship_ptr_c SdaiProduct_definition_effectivity::usage_() const {
    return (SdaiProduct_definition_relationship_ptr) _usage;
}

void SdaiProduct_definition_effectivity::usage_( const SdaiProduct_definition_relationship_ptr x ) {
    _usage = x;
}

void init_SdaiProduct_definition_effectivity( Registry& reg ) {
    std::string str;

        config_control_design::e_product_definition_effectivity->_uniqueness_rules = new Uniqueness_rule__set;
        Uniqueness_rule * ur;
        str.clear();
    str.append( "UR1 : " );
    str.append( "usage\n" );
    str.append( ", " );
    str.append( "id\n" );
    ur = new Uniqueness_rule( str.c_str() );
    config_control_design::e_product_definition_effectivity->_uniqueness_rules->Append(ur);
    config_control_design::e_product_definition_effectivity->AddSupertype(config_control_design::e_effectivity);
    config_control_design::e_effectivity->AddSubtype(config_control_design::e_product_definition_effectivity);
    config_control_design::a_308usage =
      new AttrDescriptor( "usage", config_control_design::e_product_definition_relationship, LFalse,
       LTrue, AttrType_Explicit, *config_control_design::e_product_definition_effectivity);
        config_control_design::e_product_definition_effectivity->AddExplicitAttr (config_control_design::a_308usage);
        reg.AddEntity( *config_control_design::e_product_definition_effectivity );
}

#endif
