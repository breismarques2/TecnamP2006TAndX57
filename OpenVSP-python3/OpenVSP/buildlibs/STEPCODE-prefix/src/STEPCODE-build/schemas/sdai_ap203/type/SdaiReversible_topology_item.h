#ifndef  TYPE_SDAIREVERSIBLE_TOPOLOGY_ITEM_H
#define  TYPE_SDAIREVERSIBLE_TOPOLOGY_ITEM_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiReversible_topology_item
class SC_SCHEMA_EXPORT SdaiReversible_topology_item  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   EDGE    --  sdaiINSTANCE
    //   PATH    --  sdaiINSTANCE
    //   FACE    --  sdaiINSTANCE
    //   FACE_BOUND    --  sdaiINSTANCE
    //   CLOSED_SHELL    --  sdaiINSTANCE
    //   OPEN_SHELL    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiReversible_topology_item( const SelectTypeDescriptor * =config_control_design::t_reversible_topology_item );
    //  part 1
    SdaiReversible_topology_item( const SdaiEdge_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_reversible_topology_item );
    SdaiReversible_topology_item( const SdaiPath_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_reversible_topology_item );
    SdaiReversible_topology_item( const SdaiFace_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_reversible_topology_item );
    SdaiReversible_topology_item( const SdaiFace_bound_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_reversible_topology_item );
    SdaiReversible_topology_item( const SdaiClosed_shell_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_reversible_topology_item );
    SdaiReversible_topology_item( const SdaiOpen_shell_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_reversible_topology_item );
    virtual ~SdaiReversible_topology_item();

    //  part 2
    operator SdaiEdge_ptr();
    operator SdaiPath_ptr();
    operator SdaiFace_ptr();
    operator SdaiFace_bound_ptr();
    operator SdaiClosed_shell_ptr();
    operator SdaiOpen_shell_ptr();

    //  part 3
        EntityAggregate_ptr_c cfs_faces_() const;
        EntityAggregate_ptr   cfs_faces_();
        void cfs_faces_( const EntityAggregate_ptr x );

        Boolean   orientation_() const;
        void orientation_( const Boolean x );

        SdaiLoop_ptr_c bound_() const;
        SdaiLoop_ptr   bound_();
        void bound_( const SdaiLoop_ptr x );

        EntityAggregate_ptr_c bounds_() const;
        EntityAggregate_ptr   bounds_();
        void bounds_( const EntityAggregate_ptr x );

        EntityAggregate_ptr_c edge_list_() const;
        EntityAggregate_ptr   edge_list_();
        void edge_list_( const EntityAggregate_ptr x );

        SdaiVertex_ptr_c edge_end_() const;
        SdaiVertex_ptr   edge_end_();
        void edge_end_( const SdaiVertex_ptr x );

        SdaiVertex_ptr_c edge_start_() const;
        SdaiVertex_ptr   edge_start_();
        void edge_start_( const SdaiVertex_ptr x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiReversible_topology_item& operator =( const SdaiEdge_ptr& );
    SdaiReversible_topology_item& operator =( const SdaiPath_ptr& );
    SdaiReversible_topology_item& operator =( const SdaiFace_ptr& );
    SdaiReversible_topology_item& operator =( const SdaiFace_bound_ptr& );
    SdaiReversible_topology_item& operator =( const SdaiClosed_shell_ptr& );
    SdaiReversible_topology_item& operator =( const SdaiOpen_shell_ptr& );
    // not in SDAI
    SdaiReversible_topology_item& ShallowCopy ( const SdaiReversible_topology_item& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiReversible_topology_item& operator =( SdaiReversible_topology_item * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsEdge() const;
    Logical IsPath() const;
    Logical IsFace() const;
    Logical IsFace_bound() const;
    Logical IsClosed_shell() const;
    Logical IsOpen_shell() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiReversible_topology_item () { return new SdaiReversible_topology_item; }
typedef SdaiReversible_topology_item * SdaiReversible_topology_itemH;
typedef SdaiReversible_topology_item_ptr SdaiReversible_topology_item_var;


class SdaiReversible_topology_item_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiReversible_topology_item_agg( SelectTypeDescriptor * =config_control_design::t_reversible_topology_item );
    ~SdaiReversible_topology_item_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiReversible_topology_item( sel_type )); }
};
inline STEPaggregate * create_SdaiReversible_topology_item_agg () { return new SdaiReversible_topology_item_agg; }
typedef SdaiReversible_topology_item_agg_ptr SdaiReversible_topology_item_agg_var;

/////  END SELECT TYPE reversible_topology_item

void init_SdaiReversible_topology_item(Registry& reg);

#endif
