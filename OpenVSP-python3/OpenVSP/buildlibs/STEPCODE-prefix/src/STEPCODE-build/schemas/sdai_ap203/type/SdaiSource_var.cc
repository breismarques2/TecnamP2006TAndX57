#ifndef  TYPE_SDAISOURCE_VAR_CC
#define  TYPE_SDAISOURCE_VAR_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "type/SdaiSource_var.h"

const char *
SdaiSource_var::element_at (int n) const  {
  switch (n)  {
  case Source__bought:  return "BOUGHT";
  case Source__not_known:  return "NOT_KNOWN";
  case Source__made:  return "MADE";
  case Source_unset        :
  default                :  return "UNSET";
  }
}

SdaiSource_var::SdaiSource_var (const char * n, EnumTypeDescriptor *et)
  : type(et)
{
  set_value (n);
}

SdaiSource_var::operator Source () const {
  switch (v) {
        case Source__bought        :  return Source__bought;
        case Source__not_known        :  return Source__not_known;
        case Source__made        :  return Source__made;
        case Source_unset        :
        default                :  return Source_unset;
  }
}

SDAI_Enum *
create_SdaiSource_var ()
{
    return new SdaiSource_var( "", config_control_design::t_source );
}


SdaiSource_var_agg::SdaiSource_var_agg( EnumTypeDescriptor *et )
    : enum_type(et)
{
}

SdaiSource_var_agg::~SdaiSource_var_agg()
{
}

STEPaggregate *
create_SdaiSource_var_agg ()
{
    return new SdaiSource_var_agg( config_control_design::t_source );
}

void init_SdaiSource_var( Registry& reg ) {
    std::string str;
        config_control_design::t_source = new EnumTypeDescriptor (
                  "Source",        // Name
                  sdaiENUMERATION,        // FundamentalType
                  config_control_design::schema,        // Originating Schema
                  "ENUMERATION of (made, bought, not_known)",        // Description
                  (EnumCreator) create_SdaiSource_var);        // Creator function
        config_control_design::schema->AddType(config_control_design::t_source);
    reg.AddType (*config_control_design::t_source);
}

#endif
