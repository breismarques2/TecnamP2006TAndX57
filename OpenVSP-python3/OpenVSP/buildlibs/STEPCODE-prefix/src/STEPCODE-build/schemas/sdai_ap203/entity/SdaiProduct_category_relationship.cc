#ifndef  ENTITY_SDAIPRODUCT_CATEGORY_RELATIONSHIP_CC
#define  ENTITY_SDAIPRODUCT_CATEGORY_RELATIONSHIP_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiProduct_category_relationship.h"

EntityDescriptor * config_control_design::e_product_category_relationship = 0;
AttrDescriptor * config_control_design::a_260name = 0;
AttrDescriptor * config_control_design::a_261description = 0;
AttrDescriptor * config_control_design::a_262category = 0;
AttrDescriptor * config_control_design::a_263sub_category = 0;

SdaiProduct_category_relationship::SdaiProduct_category_relationship() : _category( 0 ), _sub_category( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_product_category_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_260name, & _name );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_261description, & _description );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_262category, ( SDAI_Application_instance_ptr * ) & _category );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_263sub_category, ( SDAI_Application_instance_ptr * ) & _sub_category );
    a->set_null();
    attributes.push( a );
}

SdaiProduct_category_relationship::SdaiProduct_category_relationship ( SdaiProduct_category_relationship & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiProduct_category_relationship::~SdaiProduct_category_relationship() {
}

SdaiProduct_category_relationship::SdaiProduct_category_relationship( SDAI_Application_instance * se, bool addAttrs ) : _category( 0 ), _sub_category( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_product_category_relationship;
    STEPattribute * a = new STEPattribute( * config_control_design::a_260name,  &_name );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_261description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_262category, ( SDAI_Application_instance_ptr * ) &_category );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_263sub_category, ( SDAI_Application_instance_ptr * ) &_sub_category );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiProduct_category_relationship::name_() {
    return _name;
}

const SdaiLabel SdaiProduct_category_relationship::name_() const {
    return (const SdaiLabel) _name;
}

void SdaiProduct_category_relationship::name_( const SdaiLabel x ) {
    _name = x;
}

SdaiText SdaiProduct_category_relationship::description_() {
    return _description;
}

const SdaiText SdaiProduct_category_relationship::description_() const {
    return (const SdaiText) _description;
}

void SdaiProduct_category_relationship::description_( const SdaiText x ) {
    _description = x;
}

SdaiProduct_category_ptr SdaiProduct_category_relationship::category_() {
    if( !_category ) {
        _category = new SdaiProduct_category;
    }
    return (SdaiProduct_category_ptr) _category;
}

SdaiProduct_category_ptr_c SdaiProduct_category_relationship::category_() const {
    return (SdaiProduct_category_ptr) _category;
}

void SdaiProduct_category_relationship::category_( const SdaiProduct_category_ptr x ) {
    _category = x;
}

SdaiProduct_category_ptr SdaiProduct_category_relationship::sub_category_() {
    if( !_sub_category ) {
        _sub_category = new SdaiProduct_category;
    }
    return (SdaiProduct_category_ptr) _sub_category;
}

SdaiProduct_category_ptr_c SdaiProduct_category_relationship::sub_category_() const {
    return (SdaiProduct_category_ptr) _sub_category;
}

void SdaiProduct_category_relationship::sub_category_( const SdaiProduct_category_ptr x ) {
    _sub_category = x;
}

void init_SdaiProduct_category_relationship( Registry& reg ) {
    std::string str;

    config_control_design::e_product_category_relationship->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "acyclic_product_category_relationship( SELF, [SELF.sub_category] )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_product_category_relationship->_where_rules->Append( wr );
        config_control_design::a_260name =
          new AttrDescriptor("name",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_category_relationship);
        config_control_design::e_product_category_relationship->AddExplicitAttr (config_control_design::a_260name);
        config_control_design::a_261description =
          new AttrDescriptor("description",config_control_design::t_text,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_product_category_relationship);
        config_control_design::e_product_category_relationship->AddExplicitAttr (config_control_design::a_261description);
    config_control_design::a_262category =
      new AttrDescriptor( "category", config_control_design::e_product_category, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_product_category_relationship);
        config_control_design::e_product_category_relationship->AddExplicitAttr (config_control_design::a_262category);
    config_control_design::a_263sub_category =
      new AttrDescriptor( "sub_category", config_control_design::e_product_category, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_product_category_relationship);
        config_control_design::e_product_category_relationship->AddExplicitAttr (config_control_design::a_263sub_category);
        reg.AddEntity( *config_control_design::e_product_category_relationship );
}

#endif
