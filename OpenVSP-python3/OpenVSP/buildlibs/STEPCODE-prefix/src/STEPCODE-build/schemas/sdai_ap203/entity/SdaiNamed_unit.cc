#ifndef  ENTITY_SDAINAMED_UNIT_CC
#define  ENTITY_SDAINAMED_UNIT_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiNamed_unit.h"

EntityDescriptor * config_control_design::e_named_unit = 0;
AttrDescriptor * config_control_design::a_49dimensions = 0;

SdaiNamed_unit::SdaiNamed_unit() : _dimensions( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_named_unit;
    STEPattribute * a = new STEPattribute( * config_control_design::a_49dimensions, ( SDAI_Application_instance_ptr * ) & _dimensions );
    a->set_null();
    attributes.push( a );
}

SdaiNamed_unit::SdaiNamed_unit ( SdaiNamed_unit & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiNamed_unit::~SdaiNamed_unit() {
}

SdaiNamed_unit::SdaiNamed_unit( SDAI_Application_instance * se, bool addAttrs ) : _dimensions( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_named_unit;
    STEPattribute * a = new STEPattribute( * config_control_design::a_49dimensions, ( SDAI_Application_instance_ptr * ) &_dimensions );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiDimensional_exponents_ptr SdaiNamed_unit::dimensions_() {
    if( !_dimensions ) {
        _dimensions = new SdaiDimensional_exponents;
    }
    return (SdaiDimensional_exponents_ptr) _dimensions;
}

SdaiDimensional_exponents_ptr_c SdaiNamed_unit::dimensions_() const {
    return (SdaiDimensional_exponents_ptr) _dimensions;
}

void SdaiNamed_unit::dimensions_( const SdaiDimensional_exponents_ptr x ) {
    _dimensions = x;
}

void init_SdaiNamed_unit( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( si_unit, conversion_based_unit, context_dependent_unit ) ANDOR ONEOF ( length_unit, mass_unit, plane_angle_unit, \n" );
    str.append( "          solid_angle_unit, area_unit, volume_unit )\n" );
    str.append( ")" );
    config_control_design::e_named_unit->AddSupertype_Stmt( str );
    config_control_design::a_49dimensions =
      new AttrDescriptor( "dimensions", config_control_design::e_dimensional_exponents, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_named_unit);
        config_control_design::e_named_unit->AddExplicitAttr (config_control_design::a_49dimensions);
        reg.AddEntity( *config_control_design::e_named_unit );
}

#endif
