#ifndef  ENTITY_SDAICERTIFICATION_TYPE_CC
#define  ENTITY_SDAICERTIFICATION_TYPE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiCertification_type.h"

EntityDescriptor * config_control_design::e_certification_type = 0;
AttrDescriptor * config_control_design::a_412description = 0;

SdaiCertification_type::SdaiCertification_type() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_certification_type;
    STEPattribute * a = new STEPattribute( * config_control_design::a_412description, & _description );
    a->set_null();
    attributes.push( a );
}

SdaiCertification_type::SdaiCertification_type ( SdaiCertification_type & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiCertification_type::~SdaiCertification_type() {
}

SdaiCertification_type::SdaiCertification_type( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_certification_type;
    STEPattribute * a = new STEPattribute( * config_control_design::a_412description,  &_description );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiLabel SdaiCertification_type::description_() {
    return _description;
}

const SdaiLabel SdaiCertification_type::description_() const {
    return (const SdaiLabel) _description;
}

void SdaiCertification_type::description_( const SdaiLabel x ) {
    _description = x;
}

void init_SdaiCertification_type( Registry& reg ) {
    std::string str;

        config_control_design::a_412description =
          new AttrDescriptor("description",config_control_design::t_label,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_certification_type);
        config_control_design::e_certification_type->AddExplicitAttr (config_control_design::a_412description);
        reg.AddEntity( *config_control_design::e_certification_type );
}

#endif
