#ifndef  ENTITY_SDAIPOINT_REPLICA_CC
#define  ENTITY_SDAIPOINT_REPLICA_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPoint_replica.h"

EntityDescriptor * config_control_design::e_point_replica = 0;
AttrDescriptor * config_control_design::a_382parent_pt = 0;
AttrDescriptor * config_control_design::a_383transformation = 0;

SdaiPoint_replica::SdaiPoint_replica(): SdaiPoint(), _parent_pt( 0 ), _transformation( 0 ) {
        /*  parent: SdaiPoint  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_point_replica;
    STEPattribute * a = new STEPattribute( * config_control_design::a_382parent_pt, ( SDAI_Application_instance_ptr * ) & _parent_pt );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_383transformation, ( SDAI_Application_instance_ptr * ) & _transformation );
    a->set_null();
    attributes.push( a );
    MakeDerived( "dim", "geometric_representation_item" );
}

SdaiPoint_replica::SdaiPoint_replica ( SdaiPoint_replica & e ) : SdaiPoint() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPoint_replica::~SdaiPoint_replica() {
}

SdaiPoint_replica::SdaiPoint_replica( SDAI_Application_instance * se, bool addAttrs ) : SdaiPoint( se, addAttrs ), _parent_pt( 0 ), _transformation( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiPoint */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_point_replica;
    STEPattribute * a = new STEPattribute( * config_control_design::a_382parent_pt, ( SDAI_Application_instance_ptr * ) &_parent_pt );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_383transformation, ( SDAI_Application_instance_ptr * ) &_transformation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "dim", "geometric_representation_item" );
}


SdaiPoint_ptr SdaiPoint_replica::parent_pt_() {
    if( !_parent_pt ) {
        _parent_pt = new SdaiPoint;
    }
    return (SdaiPoint_ptr) _parent_pt;
}

SdaiPoint_ptr_c SdaiPoint_replica::parent_pt_() const {
    return (SdaiPoint_ptr) _parent_pt;
}

void SdaiPoint_replica::parent_pt_( const SdaiPoint_ptr x ) {
    _parent_pt = x;
}

SdaiCartesian_transformation_operator_ptr SdaiPoint_replica::transformation_() {
    if( !_transformation ) {
        _transformation = new SdaiCartesian_transformation_operator;
    }
    return (SdaiCartesian_transformation_operator_ptr) _transformation;
}

SdaiCartesian_transformation_operator_ptr_c SdaiPoint_replica::transformation_() const {
    return (SdaiCartesian_transformation_operator_ptr) _transformation;
}

void SdaiPoint_replica::transformation_( const SdaiCartesian_transformation_operator_ptr x ) {
    _transformation = x;
}

void init_SdaiPoint_replica( Registry& reg ) {
    std::string str;

    config_control_design::e_point_replica->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "transformation.dim = parent_pt.dim\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_point_replica->_where_rules->Append( wr );
        str.clear();
        str.append( "wr2: (" );
    str.append( "acyclic_point_replica( SELF, parent_pt )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_point_replica->_where_rules->Append( wr );
    config_control_design::e_point_replica->AddSupertype(config_control_design::e_point);
    config_control_design::e_point->AddSubtype(config_control_design::e_point_replica);
    config_control_design::a_382parent_pt =
      new AttrDescriptor( "parent_pt", config_control_design::e_point, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_point_replica);
        config_control_design::e_point_replica->AddExplicitAttr (config_control_design::a_382parent_pt);
    config_control_design::a_383transformation =
      new AttrDescriptor( "transformation", config_control_design::e_cartesian_transformation_operator, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_point_replica);
        config_control_design::e_point_replica->AddExplicitAttr (config_control_design::a_383transformation);
        reg.AddEntity( *config_control_design::e_point_replica );
}

#endif
