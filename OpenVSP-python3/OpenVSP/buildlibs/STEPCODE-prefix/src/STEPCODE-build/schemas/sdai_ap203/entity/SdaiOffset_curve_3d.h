#ifndef  ENTITY_SDAIOFFSET_CURVE_3D_H
#define  ENTITY_SDAIOFFSET_CURVE_3D_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

class SC_SCHEMA_EXPORT SdaiOffset_curve_3d : public SdaiCurve {
     protected:
        SDAI_Application_instance_ptr _basis_curve;
        SDAI_Real _distance;
        SDAI_LOGICAL _self_intersect;
        SDAI_Application_instance_ptr _ref_direction;
    public: 
        SdaiOffset_curve_3d();
        SdaiOffset_curve_3d( SDAI_Application_instance *se, bool addAttrs = true );
        SdaiOffset_curve_3d( SdaiOffset_curve_3d & e );
        ~SdaiOffset_curve_3d();
        int opcode() {
            return 241;
        }
        SdaiCurve_ptr_c basis_curve_() const;
        SdaiCurve_ptr   basis_curve_();
        void basis_curve_( const SdaiCurve_ptr x );

        SdaiLength_measure   distance_() const;
        void distance_( const SdaiLength_measure x );

        Logical   self_intersect_() const;
        void self_intersect_( const Logical x );

        SdaiDirection_ptr_c ref_direction_() const;
        SdaiDirection_ptr   ref_direction_();
        void ref_direction_( const SdaiDirection_ptr x );

};

inline SdaiOffset_curve_3d * create_SdaiOffset_curve_3d() {
    return new SdaiOffset_curve_3d;
}

void init_SdaiOffset_curve_3d(Registry& reg);

namespace config_control_design {
    extern EntityDescriptor *e_offset_curve_3d;
    extern AttrDescriptor *a_422basis_curve;
    extern AttrDescriptor *a_423distance;
    extern AttrDescriptor *a_424self_intersect;
    extern AttrDescriptor *a_425ref_direction;
}

#endif
