#ifndef  ENTITY_SDAIDATE_CC
#define  ENTITY_SDAIDATE_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiDate.h"

EntityDescriptor * config_control_design::e_date = 0;
AttrDescriptor * config_control_design::a_208year_component = 0;

SdaiDate::SdaiDate() {
        /*  no SuperTypes */

    eDesc = config_control_design::e_date;
    STEPattribute * a = new STEPattribute( * config_control_design::a_208year_component, & _year_component );
    a->set_null();
    attributes.push( a );
}

SdaiDate::SdaiDate ( SdaiDate & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiDate::~SdaiDate() {
}

SdaiDate::SdaiDate( SDAI_Application_instance * se, bool addAttrs ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_date;
    STEPattribute * a = new STEPattribute( * config_control_design::a_208year_component,  &_year_component );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiYear_number SdaiDate::year_component_() const {
    return (const SdaiYear_number) _year_component;
}

void SdaiDate::year_component_( const SdaiYear_number x ) {
    _year_component = x;
}

void init_SdaiDate( Registry& reg ) {
    std::string str;

    str.clear();
    str.append( "SUPERTYPE OF ( " );
    str.append( "ONEOF ( calendar_date, ordinal_date, week_of_year_and_day_date )\n" );
    str.append( ")" );
    config_control_design::e_date->AddSupertype_Stmt( str );
        config_control_design::a_208year_component =
          new AttrDescriptor("year_component",config_control_design::t_year_number,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_date);
        config_control_design::e_date->AddExplicitAttr (config_control_design::a_208year_component);
        reg.AddEntity( *config_control_design::e_date );
}

#endif
