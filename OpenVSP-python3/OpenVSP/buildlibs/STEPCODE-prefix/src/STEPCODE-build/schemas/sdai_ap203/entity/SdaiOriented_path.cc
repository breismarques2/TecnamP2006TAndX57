#ifndef  ENTITY_SDAIORIENTED_PATH_CC
#define  ENTITY_SDAIORIENTED_PATH_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiOriented_path.h"

EntityDescriptor * config_control_design::e_oriented_path = 0;
AttrDescriptor * config_control_design::a_390path_element = 0;
AttrDescriptor * config_control_design::a_391orientation = 0;
Derived_attribute * config_control_design::a_392Dpath_edge_list = 0;

SdaiOriented_path::SdaiOriented_path(): SdaiPath(), _path_element( 0 ) {
        /*  parent: SdaiPath  */
        /* Ignore the first parent since it is */
        /* part of the main inheritance hierarchy */

    eDesc = config_control_design::e_oriented_path;
    STEPattribute * a = new STEPattribute( * config_control_design::a_390path_element, ( SDAI_Application_instance_ptr * ) & _path_element );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_391orientation, & _orientation );
    a->set_null();
    attributes.push( a );
    MakeDerived( "edge_list", "path" );
}

SdaiOriented_path::SdaiOriented_path ( SdaiOriented_path & e ) : SdaiPath() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiOriented_path::~SdaiOriented_path() {
}

SdaiOriented_path::SdaiOriented_path( SDAI_Application_instance * se, bool addAttrs ) : SdaiPath( se, addAttrs ), _path_element( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
        /* parent: SdaiPath */
        /* Ignore the first parent since it is part *
        ** of the main inheritance hierarchy        */

    eDesc = config_control_design::e_oriented_path;
    STEPattribute * a = new STEPattribute( * config_control_design::a_390path_element, ( SDAI_Application_instance_ptr * ) &_path_element );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_391orientation,  &_orientation );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    MakeDerived( "edge_list", "path" );
}


SdaiPath_ptr SdaiOriented_path::path_element_() {
    if( !_path_element ) {
        _path_element = new SdaiPath;
    }
    return (SdaiPath_ptr) _path_element;
}

SdaiPath_ptr_c SdaiOriented_path::path_element_() const {
    return (SdaiPath_ptr) _path_element;
}

void SdaiOriented_path::path_element_( const SdaiPath_ptr x ) {
    _path_element = x;
}

Boolean SdaiOriented_path::orientation_() const {
    return (const Boolean) _orientation;
}

void SdaiOriented_path::orientation_( const Boolean x ) {
    _orientation.put (x);
}

void init_SdaiOriented_path( Registry& reg ) {
    std::string str;

    config_control_design::e_oriented_path->_where_rules = new Where_rule__list;
        Where_rule * wr;
        str.clear();
        str.append( "wr1: (" );
    str.append( "NOT ( 'CONFIG_CONTROL_DESIGN.ORIENTED_PATH' IN TYPEOF( SELF.path_element ) )\n" );
        str.append( ");\n" );
        wr = new Where_rule( str.c_str() );
        config_control_design::e_oriented_path->_where_rules->Append( wr );
    config_control_design::e_oriented_path->AddSupertype(config_control_design::e_path);
    config_control_design::e_path->AddSubtype(config_control_design::e_oriented_path);
    config_control_design::a_390path_element =
      new AttrDescriptor( "path_element", config_control_design::e_path, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_oriented_path);
        config_control_design::e_oriented_path->AddExplicitAttr (config_control_design::a_390path_element);
        config_control_design::a_391orientation =
          new AttrDescriptor("orientation",t_sdaiBOOLEAN,
          LFalse,LFalse, AttrType_Explicit,
          *config_control_design::e_oriented_path);
        config_control_design::e_oriented_path->AddExplicitAttr (config_control_design::a_391orientation);
        ListTypeDescriptor * t_70 = new ListTypeDescriptor;
        t_70->AssignAggrCreator((AggregateCreator) create_EntityAggregate);        // Creator function
        t_70->SetBound1( 1 );
        t_70->SetBound2( 2147483647 );
        t_70->UniqueElements(LTrue);
        t_70->FundamentalType(LIST_TYPE);
        t_70->Description("LIST [1:?] OF UNIQUE oriented_edge");
        t_70->OriginatingSchema(config_control_design::schema);
        t_70->ReferentType(config_control_design::e_oriented_edge);
        config_control_design::schema->AddUnnamedType(t_70);
        config_control_design::a_392Dpath_edge_list =
          new Derived_attribute("path.edge_list",t_70,LFalse,LFalse, AttrType_Deriving,
          *config_control_design::e_oriented_path);
        config_control_design::e_oriented_path->AddExplicitAttr (config_control_design::a_392Dpath_edge_list);
        config_control_design::a_392Dpath_edge_list->initializer_("conditional_reverse( SELF.orientation, SELF.path_element.edge_list )");
        reg.AddEntity( *config_control_design::e_oriented_path );
}

#endif
