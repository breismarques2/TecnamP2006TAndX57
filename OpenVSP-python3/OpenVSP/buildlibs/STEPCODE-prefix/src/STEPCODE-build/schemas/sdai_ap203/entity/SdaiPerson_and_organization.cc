#ifndef  ENTITY_SDAIPERSON_AND_ORGANIZATION_CC
#define  ENTITY_SDAIPERSON_AND_ORGANIZATION_CC

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

#include "schema.h"
#include "sc_memmgr.h"
#include "entity/SdaiPerson_and_organization.h"

EntityDescriptor * config_control_design::e_person_and_organization = 0;
AttrDescriptor * config_control_design::a_399the_person = 0;
AttrDescriptor * config_control_design::a_400the_organization = 0;

SdaiPerson_and_organization::SdaiPerson_and_organization() : _the_person( 0 ), _the_organization( 0 ) {
        /*  no SuperTypes */

    eDesc = config_control_design::e_person_and_organization;
    STEPattribute * a = new STEPattribute( * config_control_design::a_399the_person, ( SDAI_Application_instance_ptr * ) & _the_person );
    a->set_null();
    attributes.push( a );
    a = new STEPattribute( * config_control_design::a_400the_organization, ( SDAI_Application_instance_ptr * ) & _the_organization );
    a->set_null();
    attributes.push( a );
}

SdaiPerson_and_organization::SdaiPerson_and_organization ( SdaiPerson_and_organization & e ) : SDAI_Application_instance() {
    CopyAs( ( SDAI_Application_instance_ptr ) & e );
}

SdaiPerson_and_organization::~SdaiPerson_and_organization() {
}

SdaiPerson_and_organization::SdaiPerson_and_organization( SDAI_Application_instance * se, bool addAttrs ) : _the_person( 0 ), _the_organization( 0 ) {
    /* Set this to point to the head entity. */
    HeadEntity(se);
    ( void ) addAttrs; /* quell potentially unused var */

        /*  no SuperTypes */

    eDesc = config_control_design::e_person_and_organization;
    STEPattribute * a = new STEPattribute( * config_control_design::a_399the_person, ( SDAI_Application_instance_ptr * ) &_the_person );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
    a = new STEPattribute( * config_control_design::a_400the_organization, ( SDAI_Application_instance_ptr * ) &_the_organization );
        /* initialize to NULL (even if not optional)  */
    a ->set_null();
        /* Put attribute on this class' attributes list so the access functions still work. */
    attributes.push( a );
        /* Put attribute on the attributes list for the main inheritance heirarchy.  **
        ** The push method rejects duplicates found by comparing attrDescriptor's.   */
    if( addAttrs ) {
        se->attributes.push( a );
    }
}


SdaiPerson_ptr SdaiPerson_and_organization::the_person_() {
    if( !_the_person ) {
        _the_person = new SdaiPerson;
    }
    return (SdaiPerson_ptr) _the_person;
}

SdaiPerson_ptr_c SdaiPerson_and_organization::the_person_() const {
    return (SdaiPerson_ptr) _the_person;
}

void SdaiPerson_and_organization::the_person_( const SdaiPerson_ptr x ) {
    _the_person = x;
}

SdaiOrganization_ptr SdaiPerson_and_organization::the_organization_() {
    if( !_the_organization ) {
        _the_organization = new SdaiOrganization;
    }
    return (SdaiOrganization_ptr) _the_organization;
}

SdaiOrganization_ptr_c SdaiPerson_and_organization::the_organization_() const {
    return (SdaiOrganization_ptr) _the_organization;
}

void SdaiPerson_and_organization::the_organization_( const SdaiOrganization_ptr x ) {
    _the_organization = x;
}

void init_SdaiPerson_and_organization( Registry& reg ) {
    std::string str;

    config_control_design::a_399the_person =
      new AttrDescriptor( "the_person", config_control_design::e_person, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_person_and_organization);
        config_control_design::e_person_and_organization->AddExplicitAttr (config_control_design::a_399the_person);
    config_control_design::a_400the_organization =
      new AttrDescriptor( "the_organization", config_control_design::e_organization, LFalse,
       LFalse, AttrType_Explicit, *config_control_design::e_person_and_organization);
        config_control_design::e_person_and_organization->AddExplicitAttr (config_control_design::a_400the_organization);
        reg.AddEntity( *config_control_design::e_person_and_organization );
}

#endif
