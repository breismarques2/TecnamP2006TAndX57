#ifndef  ENTITY_SDAICARTESIAN_TRANSFORMATION_OPERATOR_H
#define  ENTITY_SDAICARTESIAN_TRANSFORMATION_OPERATOR_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

class SC_SCHEMA_EXPORT SdaiCartesian_transformation_operator : public SdaiGeometric_representation_item {
     protected:
        SDAI_Application_instance_ptr _axis1;    //  OPTIONAL
        SDAI_Application_instance_ptr _axis2;    //  OPTIONAL
        SDAI_Application_instance_ptr _local_origin;
        SDAI_Real _scale;    //  OPTIONAL
        SDAI_String _description;
    public: 
        SdaiCartesian_transformation_operator();
        SdaiCartesian_transformation_operator( SDAI_Application_instance *se, bool addAttrs = true );
        SdaiCartesian_transformation_operator( SdaiCartesian_transformation_operator & e );
        ~SdaiCartesian_transformation_operator();
        int opcode() {
            return 69;
        }
        SdaiDirection_ptr_c axis1_() const;
        SdaiDirection_ptr   axis1_();
        void axis1_( const SdaiDirection_ptr x );

        SdaiDirection_ptr_c axis2_() const;
        SdaiDirection_ptr   axis2_();
        void axis2_( const SdaiDirection_ptr x );

        SdaiCartesian_point_ptr_c local_origin_() const;
        SdaiCartesian_point_ptr   local_origin_();
        void local_origin_( const SdaiCartesian_point_ptr x );

        SDAI_Real   scale_() const;
        void scale_( const SDAI_Real x );

  const SdaiText   description_() const;
        SdaiText   description_();
        void description_( const SdaiText x );

};

inline SdaiCartesian_transformation_operator * create_SdaiCartesian_transformation_operator() {
    return new SdaiCartesian_transformation_operator;
}

void init_SdaiCartesian_transformation_operator(Registry& reg);

namespace config_control_design {
    extern EntityDescriptor *e_cartesian_transformation_operator;
    extern AttrDescriptor *a_144axis1;
    extern AttrDescriptor *a_145axis2;
    extern AttrDescriptor *a_146local_origin;
    extern AttrDescriptor *a_147scale;
    extern Derived_attribute *a_148Dscl;
}

#endif
