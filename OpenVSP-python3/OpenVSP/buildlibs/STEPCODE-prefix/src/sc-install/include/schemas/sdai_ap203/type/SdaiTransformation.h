#ifndef  TYPE_SDAITRANSFORMATION_H
#define  TYPE_SDAITRANSFORMATION_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiTransformation
class SC_SCHEMA_EXPORT SdaiTransformation  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   ITEM_DEFINED_TRANSFORMATION    --  sdaiINSTANCE
    //   FUNCTIONALLY_DEFINED_TRANSFORMATION    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiTransformation( const SelectTypeDescriptor * =config_control_design::t_transformation );
    //  part 1
    SdaiTransformation( const SdaiItem_defined_transformation_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_transformation );
    SdaiTransformation( const SdaiFunctionally_defined_transformation_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_transformation );
    virtual ~SdaiTransformation();

    //  part 2
    operator SdaiItem_defined_transformation_ptr();
    operator SdaiFunctionally_defined_transformation_ptr();

    //  part 3
        SdaiRepresentation_item_ptr_c transform_item_2_() const;
        SdaiRepresentation_item_ptr   transform_item_2_();
        void transform_item_2_( const SdaiRepresentation_item_ptr x );

        SdaiRepresentation_item_ptr_c transform_item_1_() const;
        SdaiRepresentation_item_ptr   transform_item_1_();
        void transform_item_1_( const SdaiRepresentation_item_ptr x );

  const SdaiText   description_() const;
        SdaiText   description_();
        void description_( const SdaiText x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiTransformation& operator =( const SdaiItem_defined_transformation_ptr& );
    SdaiTransformation& operator =( const SdaiFunctionally_defined_transformation_ptr& );
    // not in SDAI
    SdaiTransformation& ShallowCopy ( const SdaiTransformation& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiTransformation& operator =( SdaiTransformation * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsItem_defined_transformation() const;
    Logical IsFunctionally_defined_transformation() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiTransformation () { return new SdaiTransformation; }
typedef SdaiTransformation * SdaiTransformationH;
typedef SdaiTransformation_ptr SdaiTransformation_var;


class SdaiTransformation_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiTransformation_agg( SelectTypeDescriptor * =config_control_design::t_transformation );
    ~SdaiTransformation_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiTransformation( sel_type )); }
};
inline STEPaggregate * create_SdaiTransformation_agg () { return new SdaiTransformation_agg; }
typedef SdaiTransformation_agg_ptr SdaiTransformation_agg_var;

/////  END SELECT TYPE transformation

void init_SdaiTransformation(Registry& reg);

#endif
