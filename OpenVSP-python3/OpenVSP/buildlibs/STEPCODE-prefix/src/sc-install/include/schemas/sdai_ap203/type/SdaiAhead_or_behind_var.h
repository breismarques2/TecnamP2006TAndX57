#ifndef  TYPE_SDAIAHEAD_OR_BEHIND_VAR_H
#define  TYPE_SDAIAHEAD_OR_BEHIND_VAR_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

enum Ahead_or_behind {
        Ahead_or_behind__ahead,
        Ahead_or_behind__behind,
        Ahead_or_behind_unset
};

class SC_SCHEMA_EXPORT SdaiAhead_or_behind_var  :  public SDAI_Enum  {
  protected:
        EnumTypeDescriptor *type;

  public:
        SdaiAhead_or_behind_var (const char * n =0, EnumTypeDescriptor *et =config_control_design::t_ahead_or_behind);
        SdaiAhead_or_behind_var (Ahead_or_behind e, EnumTypeDescriptor *et =config_control_design::t_ahead_or_behind)
                : type(et) {  set_value (e);  }
        ~SdaiAhead_or_behind_var () { }
        SdaiAhead_or_behind_var& operator= (const SdaiAhead_or_behind_var& e)
                {  set_value (e);  return *this;  }
        operator Ahead_or_behind () const;

        inline virtual const char * Name () const
                {  return type->Name();  }
        inline virtual int no_elements () const  {  return 2;  }
        virtual const char * element_at (int n) const;
};

typedef       SdaiAhead_or_behind_var *   SdaiAhead_or_behind_var_ptr;

typedef const SdaiAhead_or_behind_var *   SdaiAhead_or_behind_var_ptr_c;
  SDAI_Enum * create_SdaiAhead_or_behind_var();

class SdaiAhead_or_behind_var_agg  :  public EnumAggregate  {
  protected:
    EnumTypeDescriptor *enum_type;

  public:
    SdaiAhead_or_behind_var_agg( EnumTypeDescriptor * =config_control_design::t_ahead_or_behind);
    virtual ~SdaiAhead_or_behind_var_agg();
    virtual SingleLinkNode * NewNode()
        { return new EnumNode (new SdaiAhead_or_behind_var( "", enum_type )); }
};

typedef       SdaiAhead_or_behind_var_agg *   SdaiAhead_or_behind_var_agg_ptr;

typedef const SdaiAhead_or_behind_var_agg *   SdaiAhead_or_behind_var_agg_ptr_c;
  STEPaggregate * create_SdaiAhead_or_behind_var_agg ();
void init_SdaiAhead_or_behind_var(Registry& reg);

#endif
