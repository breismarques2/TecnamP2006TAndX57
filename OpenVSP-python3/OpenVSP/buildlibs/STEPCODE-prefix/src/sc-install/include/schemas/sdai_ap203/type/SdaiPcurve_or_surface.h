#ifndef  TYPE_SDAIPCURVE_OR_SURFACE_H
#define  TYPE_SDAIPCURVE_OR_SURFACE_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiPcurve_or_surface
class SC_SCHEMA_EXPORT SdaiPcurve_or_surface  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   PCURVE    --  sdaiINSTANCE
    //   SURFACE    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiPcurve_or_surface( const SelectTypeDescriptor * =config_control_design::t_pcurve_or_surface );
    //  part 1
    SdaiPcurve_or_surface( const SdaiPcurve_ptr&,
                           const SelectTypeDescriptor * =config_control_design::t_pcurve_or_surface );
    SdaiPcurve_or_surface( const SdaiSurface_ptr&,
                           const SelectTypeDescriptor * =config_control_design::t_pcurve_or_surface );
    virtual ~SdaiPcurve_or_surface();

    //  part 2
    operator SdaiPcurve_ptr();
    operator SdaiSurface_ptr();

    //  part 3
        SdaiDefinitional_representation_ptr_c reference_to_curve_() const;
        SdaiDefinitional_representation_ptr   reference_to_curve_();
        void reference_to_curve_( const SdaiDefinitional_representation_ptr x );

        SdaiSurface_ptr_c basis_surface_() const;
        SdaiSurface_ptr   basis_surface_();
        void basis_surface_( const SdaiSurface_ptr x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiPcurve_or_surface& operator =( const SdaiPcurve_ptr& );
    SdaiPcurve_or_surface& operator =( const SdaiSurface_ptr& );
    // not in SDAI
    SdaiPcurve_or_surface& ShallowCopy ( const SdaiPcurve_or_surface& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiPcurve_or_surface& operator =( SdaiPcurve_or_surface * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsPcurve() const;
    Logical IsSurface() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiPcurve_or_surface () { return new SdaiPcurve_or_surface; }
typedef SdaiPcurve_or_surface * SdaiPcurve_or_surfaceH;
typedef SdaiPcurve_or_surface_ptr SdaiPcurve_or_surface_var;


class SdaiPcurve_or_surface_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiPcurve_or_surface_agg( SelectTypeDescriptor * =config_control_design::t_pcurve_or_surface );
    ~SdaiPcurve_or_surface_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiPcurve_or_surface( sel_type )); }
};
inline STEPaggregate * create_SdaiPcurve_or_surface_agg () { return new SdaiPcurve_or_surface_agg; }
typedef SdaiPcurve_or_surface_agg_ptr SdaiPcurve_or_surface_agg_var;

/////  END SELECT TYPE pcurve_or_surface

void init_SdaiPcurve_or_surface(Registry& reg);

#endif
