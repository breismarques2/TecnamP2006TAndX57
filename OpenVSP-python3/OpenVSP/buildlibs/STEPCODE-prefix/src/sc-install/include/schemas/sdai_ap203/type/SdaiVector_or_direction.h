#ifndef  TYPE_SDAIVECTOR_OR_DIRECTION_H
#define  TYPE_SDAIVECTOR_OR_DIRECTION_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiVector_or_direction
class SC_SCHEMA_EXPORT SdaiVector_or_direction  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   VECTOR    --  sdaiINSTANCE
    //   DIRECTION    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiVector_or_direction( const SelectTypeDescriptor * =config_control_design::t_vector_or_direction );
    //  part 1
    SdaiVector_or_direction( const SdaiVector_ptr&,
                             const SelectTypeDescriptor * =config_control_design::t_vector_or_direction );
    SdaiVector_or_direction( const SdaiDirection_ptr&,
                             const SelectTypeDescriptor * =config_control_design::t_vector_or_direction );
    virtual ~SdaiVector_or_direction();

    //  part 2
    operator SdaiVector_ptr();
    operator SdaiDirection_ptr();

    //  part 3
        RealAggregate_ptr_c direction_ratios_() const;
        RealAggregate_ptr   direction_ratios_();
        void direction_ratios_( const RealAggregate_ptr x );

        SdaiLength_measure   magnitude_() const;
        void magnitude_( const SdaiLength_measure x );

        SdaiDirection_ptr_c orientation_() const;
        SdaiDirection_ptr   orientation_();
        void orientation_( const SdaiDirection_ptr x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiVector_or_direction& operator =( const SdaiVector_ptr& );
    SdaiVector_or_direction& operator =( const SdaiDirection_ptr& );
    // not in SDAI
    SdaiVector_or_direction& ShallowCopy ( const SdaiVector_or_direction& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiVector_or_direction& operator =( SdaiVector_or_direction * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsVector() const;
    Logical IsDirection() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiVector_or_direction () { return new SdaiVector_or_direction; }
typedef SdaiVector_or_direction * SdaiVector_or_directionH;
typedef SdaiVector_or_direction_ptr SdaiVector_or_direction_var;


class SdaiVector_or_direction_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiVector_or_direction_agg( SelectTypeDescriptor * =config_control_design::t_vector_or_direction );
    ~SdaiVector_or_direction_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiVector_or_direction( sel_type )); }
};
inline STEPaggregate * create_SdaiVector_or_direction_agg () { return new SdaiVector_or_direction_agg; }
typedef SdaiVector_or_direction_agg_ptr SdaiVector_or_direction_agg_var;

/////  END SELECT TYPE vector_or_direction

void init_SdaiVector_or_direction(Registry& reg);

#endif
