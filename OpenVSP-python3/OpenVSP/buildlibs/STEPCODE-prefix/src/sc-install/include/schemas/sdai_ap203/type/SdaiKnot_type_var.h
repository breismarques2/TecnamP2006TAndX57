#ifndef  TYPE_SDAIKNOT_TYPE_VAR_H
#define  TYPE_SDAIKNOT_TYPE_VAR_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.

enum Knot_type {
        Knot_type__uniform_knots,
        Knot_type__unspecified,
        Knot_type__quasi_uniform_knots,
        Knot_type__piecewise_bezier_knots,
        Knot_type_unset
};

class SC_SCHEMA_EXPORT SdaiKnot_type_var  :  public SDAI_Enum  {
  protected:
        EnumTypeDescriptor *type;

  public:
        SdaiKnot_type_var (const char * n =0, EnumTypeDescriptor *et =config_control_design::t_knot_type);
        SdaiKnot_type_var (Knot_type e, EnumTypeDescriptor *et =config_control_design::t_knot_type)
                : type(et) {  set_value (e);  }
        ~SdaiKnot_type_var () { }
        SdaiKnot_type_var& operator= (const SdaiKnot_type_var& e)
                {  set_value (e);  return *this;  }
        operator Knot_type () const;

        inline virtual const char * Name () const
                {  return type->Name();  }
        inline virtual int no_elements () const  {  return 4;  }
        virtual const char * element_at (int n) const;
};

typedef       SdaiKnot_type_var *   SdaiKnot_type_var_ptr;

typedef const SdaiKnot_type_var *   SdaiKnot_type_var_ptr_c;
  SDAI_Enum * create_SdaiKnot_type_var();

class SdaiKnot_type_var_agg  :  public EnumAggregate  {
  protected:
    EnumTypeDescriptor *enum_type;

  public:
    SdaiKnot_type_var_agg( EnumTypeDescriptor * =config_control_design::t_knot_type);
    virtual ~SdaiKnot_type_var_agg();
    virtual SingleLinkNode * NewNode()
        { return new EnumNode (new SdaiKnot_type_var( "", enum_type )); }
};

typedef       SdaiKnot_type_var_agg *   SdaiKnot_type_var_agg_ptr;

typedef const SdaiKnot_type_var_agg *   SdaiKnot_type_var_agg_ptr_c;
  STEPaggregate * create_SdaiKnot_type_var_agg ();
void init_SdaiKnot_type_var(Registry& reg);

#endif
