#ifndef  TYPE_SDAIWIREFRAME_MODEL_H
#define  TYPE_SDAIWIREFRAME_MODEL_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiWireframe_model
class SC_SCHEMA_EXPORT SdaiWireframe_model  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   SHELL_BASED_WIREFRAME_MODEL    --  sdaiINSTANCE
    //   EDGE_BASED_WIREFRAME_MODEL    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiWireframe_model( const SelectTypeDescriptor * =config_control_design::t_wireframe_model );
    //  part 1
    SdaiWireframe_model( const SdaiShell_based_wireframe_model_ptr&,
                         const SelectTypeDescriptor * =config_control_design::t_wireframe_model );
    SdaiWireframe_model( const SdaiEdge_based_wireframe_model_ptr&,
                         const SelectTypeDescriptor * =config_control_design::t_wireframe_model );
    virtual ~SdaiWireframe_model();

    //  part 2
    operator SdaiShell_based_wireframe_model_ptr();
    operator SdaiEdge_based_wireframe_model_ptr();

    //  part 3
        EntityAggregate_ptr_c ebwm_boundary_() const;
        EntityAggregate_ptr   ebwm_boundary_();
        void ebwm_boundary_( const EntityAggregate_ptr x );

        SdaiShell_agg_ptr_c sbwm_boundary_() const;
        SdaiShell_agg_ptr   sbwm_boundary_();
        void sbwm_boundary_( const SdaiShell_agg_ptr x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiWireframe_model& operator =( const SdaiShell_based_wireframe_model_ptr& );
    SdaiWireframe_model& operator =( const SdaiEdge_based_wireframe_model_ptr& );
    // not in SDAI
    SdaiWireframe_model& ShallowCopy ( const SdaiWireframe_model& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiWireframe_model& operator =( SdaiWireframe_model * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsShell_based_wireframe_model() const;
    Logical IsEdge_based_wireframe_model() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiWireframe_model () { return new SdaiWireframe_model; }
typedef SdaiWireframe_model * SdaiWireframe_modelH;
typedef SdaiWireframe_model_ptr SdaiWireframe_model_var;


class SdaiWireframe_model_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiWireframe_model_agg( SelectTypeDescriptor * =config_control_design::t_wireframe_model );
    ~SdaiWireframe_model_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiWireframe_model( sel_type )); }
};
inline STEPaggregate * create_SdaiWireframe_model_agg () { return new SdaiWireframe_model_agg; }
typedef SdaiWireframe_model_agg_ptr SdaiWireframe_model_agg_var;

/////  END SELECT TYPE wireframe_model

void init_SdaiWireframe_model(Registry& reg);

#endif
