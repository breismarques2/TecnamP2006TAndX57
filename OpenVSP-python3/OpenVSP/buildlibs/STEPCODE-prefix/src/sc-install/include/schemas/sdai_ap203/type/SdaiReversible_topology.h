#ifndef  TYPE_SDAIREVERSIBLE_TOPOLOGY_H
#define  TYPE_SDAIREVERSIBLE_TOPOLOGY_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiReversible_topology
class SC_SCHEMA_EXPORT SdaiReversible_topology  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   REVERSIBLE_TOPOLOGY_ITEM    --  sdaiSELECT
    //   LIST_OF_REVERSIBLE_TOPOLOGY_ITEM    --  LIST_TYPE
    //   SET_OF_REVERSIBLE_TOPOLOGY_ITEM    --  SET_TYPE
       SdaiReversible_topology_item _sdaireversible_topology_item;
       SdaiReversible_topology_item_agg_ptr _sdaireversible_topology_item_agg;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiReversible_topology( const SelectTypeDescriptor * =config_control_design::t_reversible_topology );
    //  part 1
    SdaiReversible_topology( const SdaiReversible_topology_item_ptr&,
                             const SelectTypeDescriptor * =config_control_design::t_reversible_topology );
    SdaiReversible_topology( const SdaiSet_of_reversible_topology_item_ptr&,
                             const SelectTypeDescriptor * =config_control_design::t_reversible_topology );
    virtual ~SdaiReversible_topology();

    //  part 2
    operator SdaiReversible_topology_item_ptr();
    operator SdaiSet_of_reversible_topology_item_ptr ();

    //  part 3

    //  part 4
    SdaiReversible_topology& operator =( const SdaiReversible_topology_item_ptr& );
    SdaiReversible_topology& operator =( const SdaiSet_of_reversible_topology_item_ptr& );
    // not in SDAI
    SdaiReversible_topology& ShallowCopy ( const SdaiReversible_topology& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiReversible_topology& operator =( SdaiReversible_topology * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsReversible_topology_item() const;
    Logical IsList_of_reversible_topology_item() const;
    Logical IsSet_of_reversible_topology_item() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7
    const TypeDescriptor *SetUnderlyingType ( const TypeDescriptor * td );
};

inline SDAI_Select * create_SdaiReversible_topology () { return new SdaiReversible_topology; }
typedef SdaiReversible_topology * SdaiReversible_topologyH;
typedef SdaiReversible_topology_ptr SdaiReversible_topology_var;


class SdaiReversible_topology_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiReversible_topology_agg( SelectTypeDescriptor * =config_control_design::t_reversible_topology );
    ~SdaiReversible_topology_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiReversible_topology( sel_type )); }
};
inline STEPaggregate * create_SdaiReversible_topology_agg () { return new SdaiReversible_topology_agg; }
typedef SdaiReversible_topology_agg_ptr SdaiReversible_topology_agg_var;

/////  END SELECT TYPE reversible_topology

void init_SdaiReversible_topology(Registry& reg);

#endif
