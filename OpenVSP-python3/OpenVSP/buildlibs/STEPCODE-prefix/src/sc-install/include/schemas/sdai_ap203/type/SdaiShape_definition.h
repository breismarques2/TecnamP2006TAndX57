#ifndef  TYPE_SDAISHAPE_DEFINITION_H
#define  TYPE_SDAISHAPE_DEFINITION_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiShape_definition
class SC_SCHEMA_EXPORT SdaiShape_definition  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   PRODUCT_DEFINITION_SHAPE    --  sdaiINSTANCE
    //   SHAPE_ASPECT    --  sdaiINSTANCE
    //   SHAPE_ASPECT_RELATIONSHIP    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiShape_definition( const SelectTypeDescriptor * =config_control_design::t_shape_definition );
    //  part 1
    SdaiShape_definition( const SdaiProduct_definition_shape_ptr&,
                          const SelectTypeDescriptor * =config_control_design::t_shape_definition );
    SdaiShape_definition( const SdaiShape_aspect_ptr&,
                          const SelectTypeDescriptor * =config_control_design::t_shape_definition );
    SdaiShape_definition( const SdaiShape_aspect_relationship_ptr&,
                          const SelectTypeDescriptor * =config_control_design::t_shape_definition );
    virtual ~SdaiShape_definition();

    //  part 2
    operator SdaiProduct_definition_shape_ptr();
    operator SdaiShape_aspect_ptr();
    operator SdaiShape_aspect_relationship_ptr();

    //  part 3
        SdaiShape_aspect_ptr_c related_shape_aspect_() const;
        SdaiShape_aspect_ptr   related_shape_aspect_();
        void related_shape_aspect_( const SdaiShape_aspect_ptr x );

        SdaiShape_aspect_ptr_c relating_shape_aspect_() const;
        SdaiShape_aspect_ptr   relating_shape_aspect_();
        void relating_shape_aspect_( const SdaiShape_aspect_ptr x );

        Logical   product_definitional_() const;
        void product_definitional_( const Logical x );

        SdaiProduct_definition_shape_ptr_c of_shape_() const;
        SdaiProduct_definition_shape_ptr   of_shape_();
        void of_shape_( const SdaiProduct_definition_shape_ptr x );

        SdaiCharacterized_definition_ptr_c definition_() const;
        SdaiCharacterized_definition_ptr   definition_();
        void definition_( const SdaiCharacterized_definition_ptr x );

  const SdaiText   description_() const;
        SdaiText   description_();
        void description_( const SdaiText x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiShape_definition& operator =( const SdaiProduct_definition_shape_ptr& );
    SdaiShape_definition& operator =( const SdaiShape_aspect_ptr& );
    SdaiShape_definition& operator =( const SdaiShape_aspect_relationship_ptr& );
    // not in SDAI
    SdaiShape_definition& ShallowCopy ( const SdaiShape_definition& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiShape_definition& operator =( SdaiShape_definition * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsProduct_definition_shape() const;
    Logical IsShape_aspect() const;
    Logical IsShape_aspect_relationship() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiShape_definition () { return new SdaiShape_definition; }
typedef SdaiShape_definition * SdaiShape_definitionH;
typedef SdaiShape_definition_ptr SdaiShape_definition_var;


class SdaiShape_definition_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiShape_definition_agg( SelectTypeDescriptor * =config_control_design::t_shape_definition );
    ~SdaiShape_definition_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiShape_definition( sel_type )); }
};
inline STEPaggregate * create_SdaiShape_definition_agg () { return new SdaiShape_definition_agg; }
typedef SdaiShape_definition_agg_ptr SdaiShape_definition_agg_var;

/////  END SELECT TYPE shape_definition

void init_SdaiShape_definition(Registry& reg);

#endif
