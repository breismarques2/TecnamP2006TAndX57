#ifndef  TYPE_SDAICHARACTERIZED_DEFINITION_H
#define  TYPE_SDAICHARACTERIZED_DEFINITION_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiCharacterized_definition
class SC_SCHEMA_EXPORT SdaiCharacterized_definition  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   CHARACTERIZED_PRODUCT_DEFINITION    --  sdaiSELECT
    //   SHAPE_DEFINITION    --  sdaiSELECT
       SdaiCharacterized_product_definition _sdaicharacterized_product_definition;
       SdaiShape_definition _sdaishape_definition;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiCharacterized_definition( const SelectTypeDescriptor * =config_control_design::t_characterized_definition );
    //  part 1
    SdaiCharacterized_definition( const SdaiCharacterized_product_definition_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_characterized_definition );
    SdaiCharacterized_definition( const SdaiShape_definition_ptr&,
                                  const SelectTypeDescriptor * =config_control_design::t_characterized_definition );
    virtual ~SdaiCharacterized_definition();

    //  part 2
    operator SdaiCharacterized_product_definition_ptr();
    operator SdaiShape_definition_ptr();

    //  part 3

    //  part 4
    SdaiCharacterized_definition& operator =( const SdaiCharacterized_product_definition_ptr& );
    SdaiCharacterized_definition& operator =( const SdaiShape_definition_ptr& );
    // not in SDAI
    SdaiCharacterized_definition& ShallowCopy ( const SdaiCharacterized_definition& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiCharacterized_definition& operator =( SdaiCharacterized_definition * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsCharacterized_product_definition() const;
    Logical IsShape_definition() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiCharacterized_definition () { return new SdaiCharacterized_definition; }
typedef SdaiCharacterized_definition * SdaiCharacterized_definitionH;
typedef SdaiCharacterized_definition_ptr SdaiCharacterized_definition_var;


class SdaiCharacterized_definition_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiCharacterized_definition_agg( SelectTypeDescriptor * =config_control_design::t_characterized_definition );
    ~SdaiCharacterized_definition_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiCharacterized_definition( sel_type )); }
};
inline STEPaggregate * create_SdaiCharacterized_definition_agg () { return new SdaiCharacterized_definition_agg; }
typedef SdaiCharacterized_definition_agg_ptr SdaiCharacterized_definition_agg_var;

/////  END SELECT TYPE characterized_definition

void init_SdaiCharacterized_definition(Registry& reg);

#endif
