#ifndef  TYPE_SDAIMEASURE_VALUE_H
#define  TYPE_SDAIMEASURE_VALUE_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiMeasure_value
class SC_SCHEMA_EXPORT SdaiMeasure_value  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   LENGTH_MEASURE    --  sdaiREAL
    //   MASS_MEASURE    --  sdaiREAL
    //   PLANE_ANGLE_MEASURE    --  sdaiREAL
    //   SOLID_ANGLE_MEASURE    --  sdaiREAL
    //   AREA_MEASURE    --  sdaiREAL
    //   VOLUME_MEASURE    --  sdaiREAL
    //   PARAMETER_VALUE    --  sdaiREAL
    //   CONTEXT_DEPENDENT_MEASURE    --  sdaiREAL
    //   DESCRIPTIVE_MEASURE    --  sdaiSTRING
    //   POSITIVE_LENGTH_MEASURE    --  sdaiREAL
    //   POSITIVE_PLANE_ANGLE_MEASURE    --  sdaiREAL
    //   COUNT_MEASURE    --  sdaiNUMBER
       SDAI_Real _real;
       SDAI_String _string;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiMeasure_value( const SelectTypeDescriptor * =config_control_design::t_measure_value );
    //  part 1
    SdaiMeasure_value( const SdaiDescriptive_measure&,
                       const SelectTypeDescriptor * =config_control_design::t_measure_value );
    SdaiMeasure_value( const SDAI_Real&,
                       const SelectTypeDescriptor * =config_control_design::t_measure_value );
    virtual ~SdaiMeasure_value();

    //  part 2
    operator SdaiDescriptive_measure();
    operator SDAI_Real ();

    //  part 3

    //  part 4
    SdaiMeasure_value& operator =( const SdaiDescriptive_measure& );
    SdaiMeasure_value& operator =( const SDAI_Real& );
    // not in SDAI
    SdaiMeasure_value& ShallowCopy ( const SdaiMeasure_value& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiMeasure_value& operator =( SdaiMeasure_value * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsLength_measure() const;
    Logical IsMass_measure() const;
    Logical IsPlane_angle_measure() const;
    Logical IsSolid_angle_measure() const;
    Logical IsArea_measure() const;
    Logical IsVolume_measure() const;
    Logical IsParameter_value() const;
    Logical IsContext_dependent_measure() const;
    Logical IsDescriptive_measure() const;
    Logical IsPositive_length_measure() const;
    Logical IsPositive_plane_angle_measure() const;
    Logical IsCount_measure() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7
    const TypeDescriptor *SetUnderlyingType ( const TypeDescriptor * td );
};

inline SDAI_Select * create_SdaiMeasure_value () { return new SdaiMeasure_value; }
typedef SdaiMeasure_value * SdaiMeasure_valueH;
typedef SdaiMeasure_value_ptr SdaiMeasure_value_var;


class SdaiMeasure_value_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiMeasure_value_agg( SelectTypeDescriptor * =config_control_design::t_measure_value );
    ~SdaiMeasure_value_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiMeasure_value( sel_type )); }
};
inline STEPaggregate * create_SdaiMeasure_value_agg () { return new SdaiMeasure_value_agg; }
typedef SdaiMeasure_value_agg_ptr SdaiMeasure_value_agg_var;

/////  END SELECT TYPE measure_value

void init_SdaiMeasure_value(Registry& reg);

#endif
