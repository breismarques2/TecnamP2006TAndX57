#ifndef  TYPE_SDAIFOUNDED_ITEM_SELECT_H
#define  TYPE_SDAIFOUNDED_ITEM_SELECT_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiFounded_item_select
class SC_SCHEMA_EXPORT SdaiFounded_item_select  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   FOUNDED_ITEM    --  sdaiINSTANCE
    //   REPRESENTATION_ITEM    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiFounded_item_select( const SelectTypeDescriptor * =config_control_design::t_founded_item_select );
    //  part 1
    SdaiFounded_item_select( const SdaiFounded_item_ptr&,
                             const SelectTypeDescriptor * =config_control_design::t_founded_item_select );
    SdaiFounded_item_select( const SdaiRepresentation_item_ptr&,
                             const SelectTypeDescriptor * =config_control_design::t_founded_item_select );
    virtual ~SdaiFounded_item_select();

    //  part 2
    operator SdaiFounded_item_ptr();
    operator SdaiRepresentation_item_ptr();

    //  part 3
  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiFounded_item_select& operator =( const SdaiFounded_item_ptr& );
    SdaiFounded_item_select& operator =( const SdaiRepresentation_item_ptr& );
    // not in SDAI
    SdaiFounded_item_select& ShallowCopy ( const SdaiFounded_item_select& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiFounded_item_select& operator =( SdaiFounded_item_select * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsFounded_item() const;
    Logical IsRepresentation_item() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiFounded_item_select () { return new SdaiFounded_item_select; }
typedef SdaiFounded_item_select * SdaiFounded_item_selectH;
typedef SdaiFounded_item_select_ptr SdaiFounded_item_select_var;


class SdaiFounded_item_select_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiFounded_item_select_agg( SelectTypeDescriptor * =config_control_design::t_founded_item_select );
    ~SdaiFounded_item_select_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiFounded_item_select( sel_type )); }
};
inline STEPaggregate * create_SdaiFounded_item_select_agg () { return new SdaiFounded_item_select_agg; }
typedef SdaiFounded_item_select_agg_ptr SdaiFounded_item_select_agg_var;

/////  END SELECT TYPE founded_item_select

void init_SdaiFounded_item_select(Registry& reg);

#endif
