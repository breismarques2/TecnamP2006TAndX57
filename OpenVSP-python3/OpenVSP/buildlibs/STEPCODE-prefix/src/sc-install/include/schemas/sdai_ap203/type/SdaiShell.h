#ifndef  TYPE_SDAISHELL_H
#define  TYPE_SDAISHELL_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiShell
class SC_SCHEMA_EXPORT SdaiShell  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   VERTEX_SHELL    --  sdaiINSTANCE
    //   WIRE_SHELL    --  sdaiINSTANCE
    //   OPEN_SHELL    --  sdaiINSTANCE
    //   CLOSED_SHELL    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiShell( const SelectTypeDescriptor * =config_control_design::t_shell );
    //  part 1
    SdaiShell( const SdaiVertex_shell_ptr&,
               const SelectTypeDescriptor * =config_control_design::t_shell );
    SdaiShell( const SdaiWire_shell_ptr&,
               const SelectTypeDescriptor * =config_control_design::t_shell );
    SdaiShell( const SdaiOpen_shell_ptr&,
               const SelectTypeDescriptor * =config_control_design::t_shell );
    SdaiShell( const SdaiClosed_shell_ptr&,
               const SelectTypeDescriptor * =config_control_design::t_shell );
    virtual ~SdaiShell();

    //  part 2
    operator SdaiVertex_shell_ptr();
    operator SdaiWire_shell_ptr();
    operator SdaiOpen_shell_ptr();
    operator SdaiClosed_shell_ptr();

    //  part 3
        EntityAggregate_ptr_c cfs_faces_() const;
        EntityAggregate_ptr   cfs_faces_();
        void cfs_faces_( const EntityAggregate_ptr x );

        EntityAggregate_ptr_c wire_shell_extent_() const;
        EntityAggregate_ptr   wire_shell_extent_();
        void wire_shell_extent_( const EntityAggregate_ptr x );

        SdaiVertex_loop_ptr_c vertex_shell_extent_() const;
        SdaiVertex_loop_ptr   vertex_shell_extent_();
        void vertex_shell_extent_( const SdaiVertex_loop_ptr x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiShell& operator =( const SdaiVertex_shell_ptr& );
    SdaiShell& operator =( const SdaiWire_shell_ptr& );
    SdaiShell& operator =( const SdaiOpen_shell_ptr& );
    SdaiShell& operator =( const SdaiClosed_shell_ptr& );
    // not in SDAI
    SdaiShell& ShallowCopy ( const SdaiShell& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiShell& operator =( SdaiShell * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsVertex_shell() const;
    Logical IsWire_shell() const;
    Logical IsOpen_shell() const;
    Logical IsClosed_shell() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiShell () { return new SdaiShell; }
typedef SdaiShell * SdaiShellH;
typedef SdaiShell_ptr SdaiShell_var;


class SdaiShell_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiShell_agg( SelectTypeDescriptor * =config_control_design::t_shell );
    ~SdaiShell_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiShell( sel_type )); }
};
inline STEPaggregate * create_SdaiShell_agg () { return new SdaiShell_agg; }
typedef SdaiShell_agg_ptr SdaiShell_agg_var;

/////  END SELECT TYPE shell

void init_SdaiShell(Registry& reg);

#endif
