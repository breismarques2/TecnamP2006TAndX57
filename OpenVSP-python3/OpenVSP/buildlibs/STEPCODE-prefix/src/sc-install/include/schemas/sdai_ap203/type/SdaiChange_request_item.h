#ifndef  TYPE_SDAICHANGE_REQUEST_ITEM_H
#define  TYPE_SDAICHANGE_REQUEST_ITEM_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiChange_request_item
class SC_SCHEMA_EXPORT SdaiChange_request_item  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   PRODUCT_DEFINITION_FORMATION    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiChange_request_item( const SelectTypeDescriptor * =config_control_design::t_change_request_item );
    //  part 1
    SdaiChange_request_item( const SdaiProduct_definition_formation_ptr&,
                             const SelectTypeDescriptor * =config_control_design::t_change_request_item );
    virtual ~SdaiChange_request_item();

    //  part 2
    operator SdaiProduct_definition_formation_ptr();

    //  part 3
        SdaiProduct_ptr_c of_product_() const;
        SdaiProduct_ptr   of_product_();
        void of_product_( const SdaiProduct_ptr x );

  const SdaiText   description_() const;
        SdaiText   description_();
        void description_( const SdaiText x );

  const SdaiIdentifier   id_() const;
        SdaiIdentifier   id_();
        void id_( const SdaiIdentifier x );


    //  part 4
    SdaiChange_request_item& operator =( const SdaiProduct_definition_formation_ptr& );
    // not in SDAI
    SdaiChange_request_item& ShallowCopy ( const SdaiChange_request_item& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiChange_request_item& operator =( SdaiChange_request_item * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsProduct_definition_formation() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiChange_request_item () { return new SdaiChange_request_item; }
typedef SdaiChange_request_item * SdaiChange_request_itemH;
typedef SdaiChange_request_item_ptr SdaiChange_request_item_var;


class SdaiChange_request_item_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiChange_request_item_agg( SelectTypeDescriptor * =config_control_design::t_change_request_item );
    ~SdaiChange_request_item_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiChange_request_item( sel_type )); }
};
inline STEPaggregate * create_SdaiChange_request_item_agg () { return new SdaiChange_request_item_agg; }
typedef SdaiChange_request_item_agg_ptr SdaiChange_request_item_agg_var;

/////  END SELECT TYPE change_request_item

void init_SdaiChange_request_item(Registry& reg);

#endif
