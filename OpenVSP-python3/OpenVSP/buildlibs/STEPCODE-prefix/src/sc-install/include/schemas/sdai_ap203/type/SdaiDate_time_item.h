#ifndef  TYPE_SDAIDATE_TIME_ITEM_H
#define  TYPE_SDAIDATE_TIME_ITEM_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiDate_time_item
class SC_SCHEMA_EXPORT SdaiDate_time_item  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   PRODUCT_DEFINITION    --  sdaiINSTANCE
    //   CHANGE_REQUEST    --  sdaiINSTANCE
    //   START_REQUEST    --  sdaiINSTANCE
    //   CHANGE    --  sdaiINSTANCE
    //   START_WORK    --  sdaiINSTANCE
    //   APPROVAL_PERSON_ORGANIZATION    --  sdaiINSTANCE
    //   CONTRACT    --  sdaiINSTANCE
    //   SECURITY_CLASSIFICATION    --  sdaiINSTANCE
    //   CERTIFICATION    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiDate_time_item( const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    //  part 1
    SdaiDate_time_item( const SdaiProduct_definition_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    SdaiDate_time_item( const SdaiChange_request_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    SdaiDate_time_item( const SdaiStart_request_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    SdaiDate_time_item( const SdaiChange_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    SdaiDate_time_item( const SdaiStart_work_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    SdaiDate_time_item( const SdaiApproval_person_organization_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    SdaiDate_time_item( const SdaiContract_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    SdaiDate_time_item( const SdaiSecurity_classification_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    SdaiDate_time_item( const SdaiCertification_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_date_time_item );
    virtual ~SdaiDate_time_item();

    //  part 2
    operator SdaiProduct_definition_ptr();
    operator SdaiChange_request_ptr();
    operator SdaiStart_request_ptr();
    operator SdaiChange_ptr();
    operator SdaiStart_work_ptr();
    operator SdaiApproval_person_organization_ptr();
    operator SdaiContract_ptr();
    operator SdaiSecurity_classification_ptr();
    operator SdaiCertification_ptr();

    //  part 3
        SdaiSecurity_classification_level_ptr_c security_level_() const;
        SdaiSecurity_classification_level_ptr   security_level_();
        void security_level_( const SdaiSecurity_classification_level_ptr x );

        SdaiContract_type_ptr_c kind_() const;
        SdaiContract_type_ptr   kind_();
        void kind_( const SdaiContract_type_ptr x );

  const SdaiText   purpose_() const;
        SdaiText   purpose_();
        void purpose_( const SdaiText x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );

        SdaiApproval_role_ptr_c role_() const;
        SdaiApproval_role_ptr   role_();
        void role_( const SdaiApproval_role_ptr x );

        SdaiApproval_ptr_c authorized_approval_() const;
        SdaiApproval_ptr   authorized_approval_();
        void authorized_approval_( const SdaiApproval_ptr x );

        SdaiPerson_organization_select_ptr_c person_organization_() const;
        SdaiPerson_organization_select_ptr   person_organization_();
        void person_organization_( const SdaiPerson_organization_select_ptr x );

        SdaiAction_ptr_c assigned_action_() const;
        SdaiAction_ptr   assigned_action_();
        void assigned_action_( const SdaiAction_ptr x );

        SdaiChange_request_item_agg_ptr_c items_() const;
        SdaiChange_request_item_agg_ptr   items_();
        void items_( const SdaiChange_request_item_agg_ptr x );

        SdaiVersioned_action_request_ptr_c assigned_action_request_() const;
        SdaiVersioned_action_request_ptr   assigned_action_request_();
        void assigned_action_request_( const SdaiVersioned_action_request_ptr x );

        SdaiProduct_definition_context_ptr_c frame_of_reference_() const;
        SdaiProduct_definition_context_ptr   frame_of_reference_();
        void frame_of_reference_( const SdaiProduct_definition_context_ptr x );

        SdaiProduct_definition_formation_ptr_c formation_() const;
        SdaiProduct_definition_formation_ptr   formation_();
        void formation_( const SdaiProduct_definition_formation_ptr x );

  const SdaiText   description_() const;
        SdaiText   description_();
        void description_( const SdaiText x );

  const SdaiIdentifier   id_() const;
        SdaiIdentifier   id_();
        void id_( const SdaiIdentifier x );


    //  part 4
    SdaiDate_time_item& operator =( const SdaiProduct_definition_ptr& );
    SdaiDate_time_item& operator =( const SdaiChange_request_ptr& );
    SdaiDate_time_item& operator =( const SdaiStart_request_ptr& );
    SdaiDate_time_item& operator =( const SdaiChange_ptr& );
    SdaiDate_time_item& operator =( const SdaiStart_work_ptr& );
    SdaiDate_time_item& operator =( const SdaiApproval_person_organization_ptr& );
    SdaiDate_time_item& operator =( const SdaiContract_ptr& );
    SdaiDate_time_item& operator =( const SdaiSecurity_classification_ptr& );
    SdaiDate_time_item& operator =( const SdaiCertification_ptr& );
    // not in SDAI
    SdaiDate_time_item& ShallowCopy ( const SdaiDate_time_item& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiDate_time_item& operator =( SdaiDate_time_item * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsProduct_definition() const;
    Logical IsChange_request() const;
    Logical IsStart_request() const;
    Logical IsChange() const;
    Logical IsStart_work() const;
    Logical IsApproval_person_organization() const;
    Logical IsContract() const;
    Logical IsSecurity_classification() const;
    Logical IsCertification() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiDate_time_item () { return new SdaiDate_time_item; }
typedef SdaiDate_time_item * SdaiDate_time_itemH;
typedef SdaiDate_time_item_ptr SdaiDate_time_item_var;


class SdaiDate_time_item_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiDate_time_item_agg( SelectTypeDescriptor * =config_control_design::t_date_time_item );
    ~SdaiDate_time_item_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiDate_time_item( sel_type )); }
};
inline STEPaggregate * create_SdaiDate_time_item_agg () { return new SdaiDate_time_item_agg; }
typedef SdaiDate_time_item_agg_ptr SdaiDate_time_item_agg_var;

/////  END SELECT TYPE date_time_item

void init_SdaiDate_time_item(Registry& reg);

#endif
