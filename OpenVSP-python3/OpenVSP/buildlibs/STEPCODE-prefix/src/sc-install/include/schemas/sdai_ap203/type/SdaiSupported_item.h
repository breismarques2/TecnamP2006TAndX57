#ifndef  TYPE_SDAISUPPORTED_ITEM_H
#define  TYPE_SDAISUPPORTED_ITEM_H

// This file was generated by exp2cxx,
// git commit id: 0.8, build timestamp 03 Nov 2020 03:17.
// You probably don't want to edit it since your modifications
// will be lost if exp2cxx is used to regenerate it.


//////////  SELECT TYPE SdaiSupported_item
class SC_SCHEMA_EXPORT SdaiSupported_item  :  public SDAI_Select {
  protected:
    //  types in SELECT 
    //   ACTION_DIRECTIVE    --  sdaiINSTANCE
    //   ACTION    --  sdaiINSTANCE
    //   ACTION_METHOD    --  sdaiINSTANCE
       SDAI_Application_instance_ptr _app_inst;

  public:
    virtual const TypeDescriptor * AssignEntity (SDAI_Application_instance * se);
    virtual SDAI_Select * NewSelect ();

    virtual BASE_TYPE ValueType() const;


// STEP Part 21
    virtual void STEPwrite_content (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual void STEPwrite_verbose (ostream& out =std::cout,
                    const char *currSch =0) const;
    virtual Severity STEPread_content (istream& in =cin,
        InstMgrBase * instances =0, const char *utype =0,
        int addFileId =0, const char *currSch =0);
    virtual Severity StrToVal_content (const char *,
        InstMgrBase * instances =0);

// STEP Part 22:  SDAI

// constructors
    SdaiSupported_item( const SelectTypeDescriptor * =config_control_design::t_supported_item );
    //  part 1
    SdaiSupported_item( const SdaiAction_directive_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_supported_item );
    SdaiSupported_item( const SdaiAction_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_supported_item );
    SdaiSupported_item( const SdaiAction_method_ptr&,
                        const SelectTypeDescriptor * =config_control_design::t_supported_item );
    virtual ~SdaiSupported_item();

    //  part 2
    operator SdaiAction_directive_ptr();
    operator SdaiAction_ptr();
    operator SdaiAction_method_ptr();

    //  part 3
  const SdaiText   purpose_() const;
        SdaiText   purpose_();
        void purpose_( const SdaiText x );

  const SdaiText   consequence_() const;
        SdaiText   consequence_();
        void consequence_( const SdaiText x );

        SdaiAction_method_ptr_c chosen_method_() const;
        SdaiAction_method_ptr   chosen_method_();
        void chosen_method_( const SdaiAction_method_ptr x );

        EntityAggregate_ptr_c requests_() const;
        EntityAggregate_ptr   requests_();
        void requests_( const EntityAggregate_ptr x );

  const SdaiText   comment_() const;
        SdaiText   comment_();
        void comment_( const SdaiText x );

  const SdaiText   analysis_() const;
        SdaiText   analysis_();
        void analysis_( const SdaiText x );

  const SdaiText   description_() const;
        SdaiText   description_();
        void description_( const SdaiText x );

  const SdaiLabel   name_() const;
        SdaiLabel   name_();
        void name_( const SdaiLabel x );


    //  part 4
    SdaiSupported_item& operator =( const SdaiAction_directive_ptr& );
    SdaiSupported_item& operator =( const SdaiAction_ptr& );
    SdaiSupported_item& operator =( const SdaiAction_method_ptr& );
    // not in SDAI
    SdaiSupported_item& ShallowCopy ( const SdaiSupported_item& );

#ifdef COMPILER_DEFINES_OPERATOR_EQ
#else
    SdaiSupported_item& operator =( SdaiSupported_item * const & );
    SDAI_Select& operator =( const SDAI_Select& );
#endif

    //  part 5
    Logical IsAction_directive() const;
    Logical IsAction() const;
    Logical IsAction_method() const;

    //  part 6 ... UnderlyingTypeName () implemented in SDAI_Select class ...

    //  part 7 ... NONE    only for complex selects...
};

inline SDAI_Select * create_SdaiSupported_item () { return new SdaiSupported_item; }
typedef SdaiSupported_item * SdaiSupported_itemH;
typedef SdaiSupported_item_ptr SdaiSupported_item_var;


class SdaiSupported_item_agg : public SelectAggregate {
  protected:
    SelectTypeDescriptor *sel_type;

  public:
    SdaiSupported_item_agg( SelectTypeDescriptor * =config_control_design::t_supported_item );
    ~SdaiSupported_item_agg();
    virtual SingleLinkNode * NewNode()
     { return new SelectNode (new SdaiSupported_item( sel_type )); }
};
inline STEPaggregate * create_SdaiSupported_item_agg () { return new SdaiSupported_item_agg; }
typedef SdaiSupported_item_agg_ptr SdaiSupported_item_agg_var;

/////  END SELECT TYPE supported_item

void init_SdaiSupported_item(Registry& reg);

#endif
