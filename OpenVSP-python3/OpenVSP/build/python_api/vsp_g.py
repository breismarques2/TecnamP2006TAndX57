# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_vsp_g')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_vsp_g')
    _vsp_g = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vsp_g', [dirname(__file__)])
        except ImportError:
            import _vsp_g
            return _vsp_g
        try:
            _mod = imp.load_module('_vsp_g', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _vsp_g = swig_import_helper()
    del swig_import_helper
else:
    import _vsp_g
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vsp_g.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _vsp_g.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _vsp_g.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _vsp_g.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _vsp_g.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _vsp_g.SwigPyIterator_equal(self, x)

    def copy(self):
        return _vsp_g.SwigPyIterator_copy(self)

    def next(self):
        return _vsp_g.SwigPyIterator_next(self)

    def __next__(self):
        return _vsp_g.SwigPyIterator___next__(self)

    def previous(self):
        return _vsp_g.SwigPyIterator_previous(self)

    def advance(self, n):
        return _vsp_g.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _vsp_g.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _vsp_g.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _vsp_g.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _vsp_g.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _vsp_g.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _vsp_g.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _vsp_g.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.IntVector___nonzero__(self)

    def __bool__(self):
        return _vsp_g.IntVector___bool__(self)

    def __len__(self):
        return _vsp_g.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.IntVector___setitem__(self, *args)

    def pop(self):
        return _vsp_g.IntVector_pop(self)

    def append(self, x):
        return _vsp_g.IntVector_append(self, x)

    def empty(self):
        return _vsp_g.IntVector_empty(self)

    def size(self):
        return _vsp_g.IntVector_size(self)

    def swap(self, v):
        return _vsp_g.IntVector_swap(self, v)

    def begin(self):
        return _vsp_g.IntVector_begin(self)

    def end(self):
        return _vsp_g.IntVector_end(self)

    def rbegin(self):
        return _vsp_g.IntVector_rbegin(self)

    def rend(self):
        return _vsp_g.IntVector_rend(self)

    def clear(self):
        return _vsp_g.IntVector_clear(self)

    def get_allocator(self):
        return _vsp_g.IntVector_get_allocator(self)

    def pop_back(self):
        return _vsp_g.IntVector_pop_back(self)

    def erase(self, *args):
        return _vsp_g.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.IntVector_push_back(self, x)

    def front(self):
        return _vsp_g.IntVector_front(self)

    def back(self):
        return _vsp_g.IntVector_back(self)

    def assign(self, n, x):
        return _vsp_g.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.IntVector_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.IntVector_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.IntVector_reserve(self, n)

    def capacity(self):
        return _vsp_g.IntVector_capacity(self)
    __swig_destroy__ = _vsp_g.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _vsp_g.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _vsp_g.DoubleVector___bool__(self)

    def __len__(self):
        return _vsp_g.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _vsp_g.DoubleVector_pop(self)

    def append(self, x):
        return _vsp_g.DoubleVector_append(self, x)

    def empty(self):
        return _vsp_g.DoubleVector_empty(self)

    def size(self):
        return _vsp_g.DoubleVector_size(self)

    def swap(self, v):
        return _vsp_g.DoubleVector_swap(self, v)

    def begin(self):
        return _vsp_g.DoubleVector_begin(self)

    def end(self):
        return _vsp_g.DoubleVector_end(self)

    def rbegin(self):
        return _vsp_g.DoubleVector_rbegin(self)

    def rend(self):
        return _vsp_g.DoubleVector_rend(self)

    def clear(self):
        return _vsp_g.DoubleVector_clear(self)

    def get_allocator(self):
        return _vsp_g.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _vsp_g.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _vsp_g.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.DoubleVector_push_back(self, x)

    def front(self):
        return _vsp_g.DoubleVector_front(self)

    def back(self):
        return _vsp_g.DoubleVector_back(self)

    def assign(self, n, x):
        return _vsp_g.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.DoubleVector_reserve(self, n)

    def capacity(self):
        return _vsp_g.DoubleVector_capacity(self)
    __swig_destroy__ = _vsp_g.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _vsp_g.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.StringVector___nonzero__(self)

    def __bool__(self):
        return _vsp_g.StringVector___bool__(self)

    def __len__(self):
        return _vsp_g.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.StringVector___setitem__(self, *args)

    def pop(self):
        return _vsp_g.StringVector_pop(self)

    def append(self, x):
        return _vsp_g.StringVector_append(self, x)

    def empty(self):
        return _vsp_g.StringVector_empty(self)

    def size(self):
        return _vsp_g.StringVector_size(self)

    def swap(self, v):
        return _vsp_g.StringVector_swap(self, v)

    def begin(self):
        return _vsp_g.StringVector_begin(self)

    def end(self):
        return _vsp_g.StringVector_end(self)

    def rbegin(self):
        return _vsp_g.StringVector_rbegin(self)

    def rend(self):
        return _vsp_g.StringVector_rend(self)

    def clear(self):
        return _vsp_g.StringVector_clear(self)

    def get_allocator(self):
        return _vsp_g.StringVector_get_allocator(self)

    def pop_back(self):
        return _vsp_g.StringVector_pop_back(self)

    def erase(self, *args):
        return _vsp_g.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.StringVector_push_back(self, x)

    def front(self):
        return _vsp_g.StringVector_front(self)

    def back(self):
        return _vsp_g.StringVector_back(self)

    def assign(self, n, x):
        return _vsp_g.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.StringVector_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.StringVector_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.StringVector_reserve(self, n)

    def capacity(self):
        return _vsp_g.StringVector_capacity(self)
    __swig_destroy__ = _vsp_g.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _vsp_g.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVecVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVecVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVecVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.DoubleVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.DoubleVecVec___nonzero__(self)

    def __bool__(self):
        return _vsp_g.DoubleVecVec___bool__(self)

    def __len__(self):
        return _vsp_g.DoubleVecVec___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.DoubleVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.DoubleVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.DoubleVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.DoubleVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.DoubleVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.DoubleVecVec___setitem__(self, *args)

    def pop(self):
        return _vsp_g.DoubleVecVec_pop(self)

    def append(self, x):
        return _vsp_g.DoubleVecVec_append(self, x)

    def empty(self):
        return _vsp_g.DoubleVecVec_empty(self)

    def size(self):
        return _vsp_g.DoubleVecVec_size(self)

    def swap(self, v):
        return _vsp_g.DoubleVecVec_swap(self, v)

    def begin(self):
        return _vsp_g.DoubleVecVec_begin(self)

    def end(self):
        return _vsp_g.DoubleVecVec_end(self)

    def rbegin(self):
        return _vsp_g.DoubleVecVec_rbegin(self)

    def rend(self):
        return _vsp_g.DoubleVecVec_rend(self)

    def clear(self):
        return _vsp_g.DoubleVecVec_clear(self)

    def get_allocator(self):
        return _vsp_g.DoubleVecVec_get_allocator(self)

    def pop_back(self):
        return _vsp_g.DoubleVecVec_pop_back(self)

    def erase(self, *args):
        return _vsp_g.DoubleVecVec_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_DoubleVecVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.DoubleVecVec_push_back(self, x)

    def front(self):
        return _vsp_g.DoubleVecVec_front(self)

    def back(self):
        return _vsp_g.DoubleVecVec_back(self)

    def assign(self, n, x):
        return _vsp_g.DoubleVecVec_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.DoubleVecVec_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.DoubleVecVec_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.DoubleVecVec_reserve(self, n)

    def capacity(self):
        return _vsp_g.DoubleVecVec_capacity(self)
    __swig_destroy__ = _vsp_g.delete_DoubleVecVec
    __del__ = lambda self: None
DoubleVecVec_swigregister = _vsp_g.DoubleVecVec_swigregister
DoubleVecVec_swigregister(DoubleVecVec)

class Vec3dVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3dVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3dVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp_g.Vec3dVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp_g.Vec3dVec___nonzero__(self)

    def __bool__(self):
        return _vsp_g.Vec3dVec___bool__(self)

    def __len__(self):
        return _vsp_g.Vec3dVec___len__(self)

    def __getslice__(self, i, j):
        return _vsp_g.Vec3dVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp_g.Vec3dVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp_g.Vec3dVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp_g.Vec3dVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp_g.Vec3dVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp_g.Vec3dVec___setitem__(self, *args)

    def pop(self):
        return _vsp_g.Vec3dVec_pop(self)

    def append(self, x):
        return _vsp_g.Vec3dVec_append(self, x)

    def empty(self):
        return _vsp_g.Vec3dVec_empty(self)

    def size(self):
        return _vsp_g.Vec3dVec_size(self)

    def swap(self, v):
        return _vsp_g.Vec3dVec_swap(self, v)

    def begin(self):
        return _vsp_g.Vec3dVec_begin(self)

    def end(self):
        return _vsp_g.Vec3dVec_end(self)

    def rbegin(self):
        return _vsp_g.Vec3dVec_rbegin(self)

    def rend(self):
        return _vsp_g.Vec3dVec_rend(self)

    def clear(self):
        return _vsp_g.Vec3dVec_clear(self)

    def get_allocator(self):
        return _vsp_g.Vec3dVec_get_allocator(self)

    def pop_back(self):
        return _vsp_g.Vec3dVec_pop_back(self)

    def erase(self, *args):
        return _vsp_g.Vec3dVec_erase(self, *args)

    def __init__(self, *args):
        this = _vsp_g.new_Vec3dVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp_g.Vec3dVec_push_back(self, x)

    def front(self):
        return _vsp_g.Vec3dVec_front(self)

    def back(self):
        return _vsp_g.Vec3dVec_back(self)

    def assign(self, n, x):
        return _vsp_g.Vec3dVec_assign(self, n, x)

    def resize(self, *args):
        return _vsp_g.Vec3dVec_resize(self, *args)

    def insert(self, *args):
        return _vsp_g.Vec3dVec_insert(self, *args)

    def reserve(self, n):
        return _vsp_g.Vec3dVec_reserve(self, n)

    def capacity(self):
        return _vsp_g.Vec3dVec_capacity(self)
    __swig_destroy__ = _vsp_g.delete_Vec3dVec
    __del__ = lambda self: None
Vec3dVec_swigregister = _vsp_g.Vec3dVec_swigregister
Vec3dVec_swigregister(Vec3dVec)

ABS = _vsp_g.ABS
REL = _vsp_g.REL
SELIG_AF_EXPORT = _vsp_g.SELIG_AF_EXPORT
BEZIER_AF_EXPORT = _vsp_g.BEZIER_AF_EXPORT
ANG_RAD = _vsp_g.ANG_RAD
ANG_DEG = _vsp_g.ANG_DEG
ATMOS_TYPE_US_STANDARD_1976 = _vsp_g.ATMOS_TYPE_US_STANDARD_1976
ATMOS_TYPE_HERRINGTON_1966 = _vsp_g.ATMOS_TYPE_HERRINGTON_1966
ATMOS_TYPE_MANUAL_P_R = _vsp_g.ATMOS_TYPE_MANUAL_P_R
ATMOS_TYPE_MANUAL_P_T = _vsp_g.ATMOS_TYPE_MANUAL_P_T
ATMOS_TYPE_MANUAL_R_T = _vsp_g.ATMOS_TYPE_MANUAL_R_T
ATMOS_TYPE_MANUAL_RE_L = _vsp_g.ATMOS_TYPE_MANUAL_RE_L
ATTACH_TRANS_NONE = _vsp_g.ATTACH_TRANS_NONE
ATTACH_TRANS_COMP = _vsp_g.ATTACH_TRANS_COMP
ATTACH_TRANS_UV = _vsp_g.ATTACH_TRANS_UV
ATTACH_ROT_NONE = _vsp_g.ATTACH_ROT_NONE
ATTACH_ROT_COMP = _vsp_g.ATTACH_ROT_COMP
ATTACH_ROT_UV = _vsp_g.ATTACH_ROT_UV
BOR_FLOWTHROUGH = _vsp_g.BOR_FLOWTHROUGH
BOR_UPPER = _vsp_g.BOR_UPPER
BOR_LOWER = _vsp_g.BOR_LOWER
BOR_NUM_MODES = _vsp_g.BOR_NUM_MODES
MAX_CAMB = _vsp_g.MAX_CAMB
DESIGN_CL = _vsp_g.DESIGN_CL
NO_END_CAP = _vsp_g.NO_END_CAP
FLAT_END_CAP = _vsp_g.FLAT_END_CAP
ROUND_END_CAP = _vsp_g.ROUND_END_CAP
EDGE_END_CAP = _vsp_g.EDGE_END_CAP
SHARP_END_CAP = _vsp_g.SHARP_END_CAP
NUM_END_CAP_OPTIONS = _vsp_g.NUM_END_CAP_OPTIONS
CFD_MIN_EDGE_LEN = _vsp_g.CFD_MIN_EDGE_LEN
CFD_MAX_EDGE_LEN = _vsp_g.CFD_MAX_EDGE_LEN
CFD_MAX_GAP = _vsp_g.CFD_MAX_GAP
CFD_NUM_CIRCLE_SEGS = _vsp_g.CFD_NUM_CIRCLE_SEGS
CFD_GROWTH_RATIO = _vsp_g.CFD_GROWTH_RATIO
CFD_LIMIT_GROWTH_FLAG = _vsp_g.CFD_LIMIT_GROWTH_FLAG
CFD_INTERSECT_SUBSURFACE_FLAG = _vsp_g.CFD_INTERSECT_SUBSURFACE_FLAG
CFD_HALF_MESH_FLAG = _vsp_g.CFD_HALF_MESH_FLAG
CFD_FAR_FIELD_FLAG = _vsp_g.CFD_FAR_FIELD_FLAG
CFD_FAR_MAX_EDGE_LEN = _vsp_g.CFD_FAR_MAX_EDGE_LEN
CFD_FAR_MAX_GAP = _vsp_g.CFD_FAR_MAX_GAP
CFD_FAR_NUM_CIRCLE_SEGS = _vsp_g.CFD_FAR_NUM_CIRCLE_SEGS
CFD_FAR_SIZE_ABS_FLAG = _vsp_g.CFD_FAR_SIZE_ABS_FLAG
CFD_FAR_LENGTH = _vsp_g.CFD_FAR_LENGTH
CFD_FAR_WIDTH = _vsp_g.CFD_FAR_WIDTH
CFD_FAR_HEIGHT = _vsp_g.CFD_FAR_HEIGHT
CFD_FAR_X_SCALE = _vsp_g.CFD_FAR_X_SCALE
CFD_FAR_Y_SCALE = _vsp_g.CFD_FAR_Y_SCALE
CFD_FAR_Z_SCALE = _vsp_g.CFD_FAR_Z_SCALE
CFD_FAR_LOC_MAN_FLAG = _vsp_g.CFD_FAR_LOC_MAN_FLAG
CFD_FAR_LOC_X = _vsp_g.CFD_FAR_LOC_X
CFD_FAR_LOC_Y = _vsp_g.CFD_FAR_LOC_Y
CFD_FAR_LOC_Z = _vsp_g.CFD_FAR_LOC_Z
CFD_SRF_XYZ_FLAG = _vsp_g.CFD_SRF_XYZ_FLAG
CFD_STL_FILE_NAME = _vsp_g.CFD_STL_FILE_NAME
CFD_POLY_FILE_NAME = _vsp_g.CFD_POLY_FILE_NAME
CFD_TRI_FILE_NAME = _vsp_g.CFD_TRI_FILE_NAME
CFD_OBJ_FILE_NAME = _vsp_g.CFD_OBJ_FILE_NAME
CFD_DAT_FILE_NAME = _vsp_g.CFD_DAT_FILE_NAME
CFD_KEY_FILE_NAME = _vsp_g.CFD_KEY_FILE_NAME
CFD_GMSH_FILE_NAME = _vsp_g.CFD_GMSH_FILE_NAME
CFD_SRF_FILE_NAME = _vsp_g.CFD_SRF_FILE_NAME
CFD_TKEY_FILE_NAME = _vsp_g.CFD_TKEY_FILE_NAME
CFD_FACET_FILE_NAME = _vsp_g.CFD_FACET_FILE_NAME
CFD_CURV_FILE_NAME = _vsp_g.CFD_CURV_FILE_NAME
CFD_PLOT3D_FILE_NAME = _vsp_g.CFD_PLOT3D_FILE_NAME
CFD_NUM_FILE_NAMES = _vsp_g.CFD_NUM_FILE_NAMES
POINT_SOURCE = _vsp_g.POINT_SOURCE
LINE_SOURCE = _vsp_g.LINE_SOURCE
BOX_SOURCE = _vsp_g.BOX_SOURCE
ULINE_SOURCE = _vsp_g.ULINE_SOURCE
WLINE_SOURCE = _vsp_g.WLINE_SOURCE
NUM_SOURCE_TYPES = _vsp_g.NUM_SOURCE_TYPES
CF_LAM_BLASIUS = _vsp_g.CF_LAM_BLASIUS
CF_LAM_BLASIUS_W_HEAT = _vsp_g.CF_LAM_BLASIUS_W_HEAT
CF_TURB_EXPLICIT_FIT_SPALDING = _vsp_g.CF_TURB_EXPLICIT_FIT_SPALDING
CF_TURB_EXPLICIT_FIT_SPALDING_CHI = _vsp_g.CF_TURB_EXPLICIT_FIT_SPALDING_CHI
CF_TURB_EXPLICIT_FIT_SCHOENHERR = _vsp_g.CF_TURB_EXPLICIT_FIT_SCHOENHERR
DO_NOT_USE_CF_TURB_IMPLICIT_KARMAN = _vsp_g.DO_NOT_USE_CF_TURB_IMPLICIT_KARMAN
CF_TURB_IMPLICIT_SCHOENHERR = _vsp_g.CF_TURB_IMPLICIT_SCHOENHERR
CF_TURB_IMPLICIT_KARMAN_SCHOENHERR = _vsp_g.CF_TURB_IMPLICIT_KARMAN_SCHOENHERR
CF_TURB_POWER_LAW_BLASIUS = _vsp_g.CF_TURB_POWER_LAW_BLASIUS
CF_TURB_POWER_LAW_PRANDTL_LOW_RE = _vsp_g.CF_TURB_POWER_LAW_PRANDTL_LOW_RE
CF_TURB_POWER_LAW_PRANDTL_MEDIUM_RE = _vsp_g.CF_TURB_POWER_LAW_PRANDTL_MEDIUM_RE
CF_TURB_POWER_LAW_PRANDTL_HIGH_RE = _vsp_g.CF_TURB_POWER_LAW_PRANDTL_HIGH_RE
CF_TURB_SCHLICHTING_COMPRESSIBLE = _vsp_g.CF_TURB_SCHLICHTING_COMPRESSIBLE
DO_NOT_USE_CF_TURB_SCHLICHTING_INCOMPRESSIBLE = _vsp_g.DO_NOT_USE_CF_TURB_SCHLICHTING_INCOMPRESSIBLE
DO_NOT_USE_CF_TURB_SCHLICHTING_PRANDTL = _vsp_g.DO_NOT_USE_CF_TURB_SCHLICHTING_PRANDTL
DO_NOT_USE_CF_TURB_SCHULTZ_GRUNOW_HIGH_RE = _vsp_g.DO_NOT_USE_CF_TURB_SCHULTZ_GRUNOW_HIGH_RE
CF_TURB_SCHULTZ_GRUNOW_SCHOENHERR = _vsp_g.CF_TURB_SCHULTZ_GRUNOW_SCHOENHERR
DO_NOT_USE_CF_TURB_WHITE_CHRISTOPH_COMPRESSIBLE = _vsp_g.DO_NOT_USE_CF_TURB_WHITE_CHRISTOPH_COMPRESSIBLE
CF_TURB_ROUGHNESS_SCHLICHTING_AVG = _vsp_g.CF_TURB_ROUGHNESS_SCHLICHTING_AVG
DO_NOT_USE_CF_TURB_ROUGHNESS_SCHLICHTING_LOCAL = _vsp_g.DO_NOT_USE_CF_TURB_ROUGHNESS_SCHLICHTING_LOCAL
DO_NOT_USE_CF_TURB_ROUGHNESS_WHITE = _vsp_g.DO_NOT_USE_CF_TURB_ROUGHNESS_WHITE
CF_TURB_ROUGHNESS_SCHLICHTING_AVG_FLOW_CORRECTION = _vsp_g.CF_TURB_ROUGHNESS_SCHLICHTING_AVG_FLOW_CORRECTION
CF_TURB_HEATTRANSFER_WHITE_CHRISTOPH = _vsp_g.CF_TURB_HEATTRANSFER_WHITE_CHRISTOPH
COLLISION_OK = _vsp_g.COLLISION_OK
COLLISION_INTERSECT_NO_SOLUTION = _vsp_g.COLLISION_INTERSECT_NO_SOLUTION
COLLISION_CLEAR_NO_SOLUTION = _vsp_g.COLLISION_CLEAR_NO_SOLUTION
NO_FILE_TYPE = _vsp_g.NO_FILE_TYPE
COMP_GEOM_TXT_TYPE = _vsp_g.COMP_GEOM_TXT_TYPE
COMP_GEOM_CSV_TYPE = _vsp_g.COMP_GEOM_CSV_TYPE
DRAG_BUILD_TSV_TYPE = _vsp_g.DRAG_BUILD_TSV_TYPE
SLICE_TXT_TYPE = _vsp_g.SLICE_TXT_TYPE
MASS_PROP_TXT_TYPE = _vsp_g.MASS_PROP_TXT_TYPE
DEGEN_GEOM_CSV_TYPE = _vsp_g.DEGEN_GEOM_CSV_TYPE
DEGEN_GEOM_M_TYPE = _vsp_g.DEGEN_GEOM_M_TYPE
CFD_STL_TYPE = _vsp_g.CFD_STL_TYPE
CFD_POLY_TYPE = _vsp_g.CFD_POLY_TYPE
CFD_TRI_TYPE = _vsp_g.CFD_TRI_TYPE
CFD_OBJ_TYPE = _vsp_g.CFD_OBJ_TYPE
CFD_DAT_TYPE = _vsp_g.CFD_DAT_TYPE
CFD_KEY_TYPE = _vsp_g.CFD_KEY_TYPE
CFD_GMSH_TYPE = _vsp_g.CFD_GMSH_TYPE
CFD_SRF_TYPE = _vsp_g.CFD_SRF_TYPE
CFD_TKEY_TYPE = _vsp_g.CFD_TKEY_TYPE
PROJ_AREA_CSV_TYPE = _vsp_g.PROJ_AREA_CSV_TYPE
WAVE_DRAG_TXT_TYPE = _vsp_g.WAVE_DRAG_TXT_TYPE
VSPAERO_PANEL_TRI_TYPE = _vsp_g.VSPAERO_PANEL_TRI_TYPE
DRAG_BUILD_CSV_TYPE = _vsp_g.DRAG_BUILD_CSV_TYPE
CFD_FACET_TYPE = _vsp_g.CFD_FACET_TYPE
CFD_CURV_TYPE = _vsp_g.CFD_CURV_TYPE
CFD_PLOT3D_TYPE = _vsp_g.CFD_PLOT3D_TYPE
DELIM_COMMA = _vsp_g.DELIM_COMMA
DELIM_USCORE = _vsp_g.DELIM_USCORE
DELIM_SPACE = _vsp_g.DELIM_SPACE
DELIM_NONE = _vsp_g.DELIM_NONE
DELIM_NUM_TYPES = _vsp_g.DELIM_NUM_TYPES
SET_3D = _vsp_g.SET_3D
SET_2D = _vsp_g.SET_2D
X_DIR = _vsp_g.X_DIR
Y_DIR = _vsp_g.Y_DIR
Z_DIR = _vsp_g.Z_DIR
DISPLAY_BEZIER = _vsp_g.DISPLAY_BEZIER
DISPLAY_DEGEN_SURF = _vsp_g.DISPLAY_DEGEN_SURF
DISPLAY_DEGEN_PLATE = _vsp_g.DISPLAY_DEGEN_PLATE
DISPLAY_DEGEN_CAMBER = _vsp_g.DISPLAY_DEGEN_CAMBER
GEOM_DRAW_WIRE = _vsp_g.GEOM_DRAW_WIRE
GEOM_DRAW_HIDDEN = _vsp_g.GEOM_DRAW_HIDDEN
GEOM_DRAW_SHADE = _vsp_g.GEOM_DRAW_SHADE
GEOM_DRAW_TEXTURE = _vsp_g.GEOM_DRAW_TEXTURE
GEOM_DRAW_NONE = _vsp_g.GEOM_DRAW_NONE
VSP_OK = _vsp_g.VSP_OK
VSP_INVALID_PTR = _vsp_g.VSP_INVALID_PTR
VSP_INVALID_TYPE = _vsp_g.VSP_INVALID_TYPE
VSP_CANT_FIND_TYPE = _vsp_g.VSP_CANT_FIND_TYPE
VSP_CANT_FIND_PARM = _vsp_g.VSP_CANT_FIND_PARM
VSP_CANT_FIND_NAME = _vsp_g.VSP_CANT_FIND_NAME
VSP_INVALID_GEOM_ID = _vsp_g.VSP_INVALID_GEOM_ID
VSP_FILE_DOES_NOT_EXIST = _vsp_g.VSP_FILE_DOES_NOT_EXIST
VSP_FILE_WRITE_FAILURE = _vsp_g.VSP_FILE_WRITE_FAILURE
VSP_FILE_READ_FAILURE = _vsp_g.VSP_FILE_READ_FAILURE
VSP_WRONG_XSEC_TYPE = _vsp_g.VSP_WRONG_XSEC_TYPE
VSP_WRONG_FILE_TYPE = _vsp_g.VSP_WRONG_FILE_TYPE
VSP_INDEX_OUT_RANGE = _vsp_g.VSP_INDEX_OUT_RANGE
VSP_INVALID_XSEC_ID = _vsp_g.VSP_INVALID_XSEC_ID
VSP_INVALID_ID = _vsp_g.VSP_INVALID_ID
VSP_CANT_SET_NOT_EQ_PARM = _vsp_g.VSP_CANT_SET_NOT_EQ_PARM
VSP_AMBIGUOUS_SUBSURF = _vsp_g.VSP_AMBIGUOUS_SUBSURF
VSP_INVALID_VARPRESET_SETNAME = _vsp_g.VSP_INVALID_VARPRESET_SETNAME
VSP_INVALID_VARPRESET_GROUPNAME = _vsp_g.VSP_INVALID_VARPRESET_GROUPNAME
VSP_CONFORMAL_PARENT_UNSUPPORTED = _vsp_g.VSP_CONFORMAL_PARENT_UNSUPPORTED
VSP_UNEXPECTED_RESET_REMAP_ID = _vsp_g.VSP_UNEXPECTED_RESET_REMAP_ID
VSP_INVALID_INPUT_VAL = _vsp_g.VSP_INVALID_INPUT_VAL
VSP_INVALID_CF_EQN = _vsp_g.VSP_INVALID_CF_EQN
EXCRESCENCE_COUNT = _vsp_g.EXCRESCENCE_COUNT
EXCRESCENCE_CD = _vsp_g.EXCRESCENCE_CD
EXCRESCENCE_PERCENT_GEOM = _vsp_g.EXCRESCENCE_PERCENT_GEOM
EXCRESCENCE_MARGIN = _vsp_g.EXCRESCENCE_MARGIN
EXCRESCENCE_DRAGAREA = _vsp_g.EXCRESCENCE_DRAGAREA
EXPORT_FELISA = _vsp_g.EXPORT_FELISA
EXPORT_XSEC = _vsp_g.EXPORT_XSEC
EXPORT_STL = _vsp_g.EXPORT_STL
EXPORT_AWAVE = _vsp_g.EXPORT_AWAVE
EXPORT_NASCART = _vsp_g.EXPORT_NASCART
EXPORT_POVRAY = _vsp_g.EXPORT_POVRAY
EXPORT_CART3D = _vsp_g.EXPORT_CART3D
EXPORT_VORXSEC = _vsp_g.EXPORT_VORXSEC
EXPORT_XSECGEOM = _vsp_g.EXPORT_XSECGEOM
EXPORT_GMSH = _vsp_g.EXPORT_GMSH
EXPORT_X3D = _vsp_g.EXPORT_X3D
EXPORT_STEP = _vsp_g.EXPORT_STEP
EXPORT_PLOT3D = _vsp_g.EXPORT_PLOT3D
EXPORT_IGES = _vsp_g.EXPORT_IGES
EXPORT_BEM = _vsp_g.EXPORT_BEM
EXPORT_DXF = _vsp_g.EXPORT_DXF
EXPORT_FACET = _vsp_g.EXPORT_FACET
EXPORT_SVG = _vsp_g.EXPORT_SVG
EXPORT_PMARC = _vsp_g.EXPORT_PMARC
EXPORT_OBJ = _vsp_g.EXPORT_OBJ
EXPORT_SELIG_AIRFOIL = _vsp_g.EXPORT_SELIG_AIRFOIL
EXPORT_BEZIER_AIRFOIL = _vsp_g.EXPORT_BEZIER_AIRFOIL
EXPORT_IGES_STRUCTURE = _vsp_g.EXPORT_IGES_STRUCTURE
EXPORT_STEP_STRUCTURE = _vsp_g.EXPORT_STEP_STRUCTURE
FEA_XSEC_GENERAL = _vsp_g.FEA_XSEC_GENERAL
FEA_XSEC_CIRC = _vsp_g.FEA_XSEC_CIRC
FEA_XSEC_PIPE = _vsp_g.FEA_XSEC_PIPE
FEA_XSEC_I = _vsp_g.FEA_XSEC_I
FEA_XSEC_RECT = _vsp_g.FEA_XSEC_RECT
FEA_XSEC_BOX = _vsp_g.FEA_XSEC_BOX
FEA_MASS_FILE_NAME = _vsp_g.FEA_MASS_FILE_NAME
FEA_NASTRAN_FILE_NAME = _vsp_g.FEA_NASTRAN_FILE_NAME
FEA_NKEY_FILE_NAME = _vsp_g.FEA_NKEY_FILE_NAME
FEA_CALCULIX_FILE_NAME = _vsp_g.FEA_CALCULIX_FILE_NAME
FEA_STL_FILE_NAME = _vsp_g.FEA_STL_FILE_NAME
FEA_GMSH_FILE_NAME = _vsp_g.FEA_GMSH_FILE_NAME
FEA_SRF_FILE_NAME = _vsp_g.FEA_SRF_FILE_NAME
FEA_CURV_FILE_NAME = _vsp_g.FEA_CURV_FILE_NAME
FEA_PLOT3D_FILE_NAME = _vsp_g.FEA_PLOT3D_FILE_NAME
FEA_IGES_FILE_NAME = _vsp_g.FEA_IGES_FILE_NAME
FEA_STEP_FILE_NAME = _vsp_g.FEA_STEP_FILE_NAME
FEA_NUM_FILE_NAMES = _vsp_g.FEA_NUM_FILE_NAMES
FEA_SHELL = _vsp_g.FEA_SHELL
FEA_BEAM = _vsp_g.FEA_BEAM
FEA_SHELL_AND_BEAM = _vsp_g.FEA_SHELL_AND_BEAM
FEA_SLICE = _vsp_g.FEA_SLICE
FEA_RIB = _vsp_g.FEA_RIB
FEA_SPAR = _vsp_g.FEA_SPAR
FEA_FIX_POINT = _vsp_g.FEA_FIX_POINT
FEA_DOME = _vsp_g.FEA_DOME
FEA_RIB_ARRAY = _vsp_g.FEA_RIB_ARRAY
FEA_SLICE_ARRAY = _vsp_g.FEA_SLICE_ARRAY
FEA_SKIN = _vsp_g.FEA_SKIN
FEA_NUM_TYPES = _vsp_g.FEA_NUM_TYPES
XY_BODY = _vsp_g.XY_BODY
YZ_BODY = _vsp_g.YZ_BODY
XZ_BODY = _vsp_g.XZ_BODY
XY_ABS = _vsp_g.XY_ABS
YZ_ABS = _vsp_g.YZ_ABS
XZ_ABS = _vsp_g.XZ_ABS
SPINE_NORMAL = _vsp_g.SPINE_NORMAL
SI_UNIT = _vsp_g.SI_UNIT
CGS_UNIT = _vsp_g.CGS_UNIT
MPA_UNIT = _vsp_g.MPA_UNIT
BFT_UNIT = _vsp_g.BFT_UNIT
BIN_UNIT = _vsp_g.BIN_UNIT
NO_NORMAL = _vsp_g.NO_NORMAL
LE_NORMAL = _vsp_g.LE_NORMAL
TE_NORMAL = _vsp_g.TE_NORMAL
SPAR_NORMAL = _vsp_g.SPAR_NORMAL
FF_B_MANUAL = _vsp_g.FF_B_MANUAL
FF_B_SCHEMENSKY_FUSE = _vsp_g.FF_B_SCHEMENSKY_FUSE
FF_B_SCHEMENSKY_NACELLE = _vsp_g.FF_B_SCHEMENSKY_NACELLE
FF_B_HOERNER_STREAMBODY = _vsp_g.FF_B_HOERNER_STREAMBODY
FF_B_TORENBEEK = _vsp_g.FF_B_TORENBEEK
FF_B_SHEVELL = _vsp_g.FF_B_SHEVELL
FF_B_COVERT = _vsp_g.FF_B_COVERT
FF_B_JENKINSON_FUSE = _vsp_g.FF_B_JENKINSON_FUSE
FF_B_JENKINSON_WING_NACELLE = _vsp_g.FF_B_JENKINSON_WING_NACELLE
FF_B_JENKINSON_AFT_FUSE_NACELLE = _vsp_g.FF_B_JENKINSON_AFT_FUSE_NACELLE
FF_W_MANUAL = _vsp_g.FF_W_MANUAL
FF_W_EDET_CONV = _vsp_g.FF_W_EDET_CONV
FF_W_EDET_ADV = _vsp_g.FF_W_EDET_ADV
FF_W_HOERNER = _vsp_g.FF_W_HOERNER
FF_W_COVERT = _vsp_g.FF_W_COVERT
FF_W_SHEVELL = _vsp_g.FF_W_SHEVELL
FF_W_KROO = _vsp_g.FF_W_KROO
FF_W_TORENBEEK = _vsp_g.FF_W_TORENBEEK
FF_W_DATCOM = _vsp_g.FF_W_DATCOM
FF_W_SCHEMENSKY_6_SERIES_AF = _vsp_g.FF_W_SCHEMENSKY_6_SERIES_AF
FF_W_SCHEMENSKY_4_SERIES_AF = _vsp_g.FF_W_SCHEMENSKY_4_SERIES_AF
FF_W_JENKINSON_WING = _vsp_g.FF_W_JENKINSON_WING
FF_W_JENKINSON_TAIL = _vsp_g.FF_W_JENKINSON_TAIL
FF_W_SCHEMENSKY_SUPERCRITICAL_AF = _vsp_g.FF_W_SCHEMENSKY_SUPERCRITICAL_AF
PD_UNITS_IMPERIAL = _vsp_g.PD_UNITS_IMPERIAL
PD_UNITS_METRIC = _vsp_g.PD_UNITS_METRIC
MALE = _vsp_g.MALE
FEMALE = _vsp_g.FEMALE
EDIT_XSEC_CIRCLE = _vsp_g.EDIT_XSEC_CIRCLE
EDIT_XSEC_ELLIPSE = _vsp_g.EDIT_XSEC_ELLIPSE
EDIT_XSEC_RECTANGLE = _vsp_g.EDIT_XSEC_RECTANGLE
IMPORT_STL = _vsp_g.IMPORT_STL
IMPORT_NASCART = _vsp_g.IMPORT_NASCART
IMPORT_CART3D_TRI = _vsp_g.IMPORT_CART3D_TRI
IMPORT_XSEC_MESH = _vsp_g.IMPORT_XSEC_MESH
IMPORT_PTS = _vsp_g.IMPORT_PTS
IMPORT_V2 = _vsp_g.IMPORT_V2
IMPORT_BEM = _vsp_g.IMPORT_BEM
IMPORT_XSEC_WIRE = _vsp_g.IMPORT_XSEC_WIRE
IMPORT_P3D_WIRE = _vsp_g.IMPORT_P3D_WIRE
INTERSECT_SRF_FILE_NAME = _vsp_g.INTERSECT_SRF_FILE_NAME
INTERSECT_CURV_FILE_NAME = _vsp_g.INTERSECT_CURV_FILE_NAME
INTERSECT_PLOT3D_FILE_NAME = _vsp_g.INTERSECT_PLOT3D_FILE_NAME
INTERSECT_IGES_FILE_NAME = _vsp_g.INTERSECT_IGES_FILE_NAME
INTERSECT_STEP_FILE_NAME = _vsp_g.INTERSECT_STEP_FILE_NAME
INTERSECT_NUM_FILE_NAMES = _vsp_g.INTERSECT_NUM_FILE_NAMES
LEN_MM = _vsp_g.LEN_MM
LEN_CM = _vsp_g.LEN_CM
LEN_M = _vsp_g.LEN_M
LEN_IN = _vsp_g.LEN_IN
LEN_FT = _vsp_g.LEN_FT
LEN_YD = _vsp_g.LEN_YD
LEN_UNITLESS = _vsp_g.LEN_UNITLESS
MASS_UNIT_G = _vsp_g.MASS_UNIT_G
MASS_UNIT_KG = _vsp_g.MASS_UNIT_KG
MASS_UNIT_TONNE = _vsp_g.MASS_UNIT_TONNE
MASS_UNIT_LBM = _vsp_g.MASS_UNIT_LBM
MASS_UNIT_SLUG = _vsp_g.MASS_UNIT_SLUG
MASS_LBFSEC2IN = _vsp_g.MASS_LBFSEC2IN
PARM_DOUBLE_TYPE = _vsp_g.PARM_DOUBLE_TYPE
PARM_INT_TYPE = _vsp_g.PARM_INT_TYPE
PARM_BOOL_TYPE = _vsp_g.PARM_BOOL_TYPE
PARM_FRACTION_TYPE = _vsp_g.PARM_FRACTION_TYPE
PARM_LIMITED_INT_TYPE = _vsp_g.PARM_LIMITED_INT_TYPE
PARM_NOTEQ_TYPE = _vsp_g.PARM_NOTEQ_TYPE
PARM_POWER_INT_TYPE = _vsp_g.PARM_POWER_INT_TYPE
PATCH_NONE = _vsp_g.PATCH_NONE
PATCH_POINT = _vsp_g.PATCH_POINT
PATCH_LINE = _vsp_g.PATCH_LINE
PATCH_COPY = _vsp_g.PATCH_COPY
PATCH_HALFWAY = _vsp_g.PATCH_HALFWAY
PATCH_NUM_TYPES = _vsp_g.PATCH_NUM_TYPES
LINEAR = _vsp_g.LINEAR
PCHIP = _vsp_g.PCHIP
CEDIT = _vsp_g.CEDIT
APPROX_CEDIT = _vsp_g.APPROX_CEDIT
NUM_PCURV_TYPE = _vsp_g.NUM_PCURV_TYPE
PRES_UNIT_PSF = _vsp_g.PRES_UNIT_PSF
PRES_UNIT_PSI = _vsp_g.PRES_UNIT_PSI
PRES_UNIT_BA = _vsp_g.PRES_UNIT_BA
PRES_UNIT_PA = _vsp_g.PRES_UNIT_PA
PRES_UNIT_KPA = _vsp_g.PRES_UNIT_KPA
PRES_UNIT_MPA = _vsp_g.PRES_UNIT_MPA
PRES_UNIT_INCHHG = _vsp_g.PRES_UNIT_INCHHG
PRES_UNIT_MMHG = _vsp_g.PRES_UNIT_MMHG
PRES_UNIT_MMH20 = _vsp_g.PRES_UNIT_MMH20
PRES_UNIT_MB = _vsp_g.PRES_UNIT_MB
PRES_UNIT_ATM = _vsp_g.PRES_UNIT_ATM
NO_BOUNDARY = _vsp_g.NO_BOUNDARY
SET_BOUNDARY = _vsp_g.SET_BOUNDARY
GEOM_BOUNDARY = _vsp_g.GEOM_BOUNDARY
NUM_PROJ_BNDY_OPTIONS = _vsp_g.NUM_PROJ_BNDY_OPTIONS
X_PROJ = _vsp_g.X_PROJ
Y_PROJ = _vsp_g.Y_PROJ
Z_PROJ = _vsp_g.Z_PROJ
GEOM_PROJ = _vsp_g.GEOM_PROJ
VEC_PROJ = _vsp_g.VEC_PROJ
NUM_PROJ_DIR_OPTIONS = _vsp_g.NUM_PROJ_DIR_OPTIONS
SET_TARGET = _vsp_g.SET_TARGET
GEOM_TARGET = _vsp_g.GEOM_TARGET
NUM_PROJ_TGT_OPTIONS = _vsp_g.NUM_PROJ_TGT_OPTIONS
PROP_BLADES = _vsp_g.PROP_BLADES
PROP_BOTH = _vsp_g.PROP_BOTH
PROP_DISK = _vsp_g.PROP_DISK
PROP_CHORD = _vsp_g.PROP_CHORD
PROP_TWIST = _vsp_g.PROP_TWIST
PROP_RAKE = _vsp_g.PROP_RAKE
PROP_SKEW = _vsp_g.PROP_SKEW
PROP_SWEEP = _vsp_g.PROP_SWEEP
PROP_THICK = _vsp_g.PROP_THICK
PROP_CLI = _vsp_g.PROP_CLI
PROP_AXIAL = _vsp_g.PROP_AXIAL
PROP_TANGENTIAL = _vsp_g.PROP_TANGENTIAL
NUM_PROP_PCURVE = _vsp_g.NUM_PROP_PCURVE
MANUAL_REF = _vsp_g.MANUAL_REF
COMPONENT_REF = _vsp_g.COMPONENT_REF
NUM_REF_TYPES = _vsp_g.NUM_REF_TYPES
INVALID_TYPE = _vsp_g.INVALID_TYPE
INT_DATA = _vsp_g.INT_DATA
DOUBLE_DATA = _vsp_g.DOUBLE_DATA
STRING_DATA = _vsp_g.STRING_DATA
VEC3D_DATA = _vsp_g.VEC3D_DATA
DOUBLE_MATRIX_DATA = _vsp_g.DOUBLE_MATRIX_DATA
MESH_INDEXED_TRI = _vsp_g.MESH_INDEXED_TRI
MESH_SLICE_TRI = _vsp_g.MESH_SLICE_TRI
GEOM_XSECS = _vsp_g.GEOM_XSECS
MESH_INDEX_AND_SLICE_TRI = _vsp_g.MESH_INDEX_AND_SLICE_TRI
RHO_UNIT_SLUG_FT3 = _vsp_g.RHO_UNIT_SLUG_FT3
RHO_UNIT_G_CM3 = _vsp_g.RHO_UNIT_G_CM3
RHO_UNIT_KG_M3 = _vsp_g.RHO_UNIT_KG_M3
RHO_UNIT_TONNE_MM3 = _vsp_g.RHO_UNIT_TONNE_MM3
RHO_UNIT_LBF_FT3 = _vsp_g.RHO_UNIT_LBF_FT3
RHO_UNIT_LBFSEC2_IN4 = _vsp_g.RHO_UNIT_LBFSEC2_IN4
SET_ALL = _vsp_g.SET_ALL
SET_SHOWN = _vsp_g.SET_SHOWN
SET_NOT_SHOWN = _vsp_g.SET_NOT_SHOWN
SET_FIRST_USER = _vsp_g.SET_FIRST_USER
STEP_SHELL = _vsp_g.STEP_SHELL
STEP_BREP = _vsp_g.STEP_BREP
SS_INC_TREAT_AS_PARENT = _vsp_g.SS_INC_TREAT_AS_PARENT
SS_INC_SEPARATE_TREATMENT = _vsp_g.SS_INC_SEPARATE_TREATMENT
SS_INC_ZERO_DRAG = _vsp_g.SS_INC_ZERO_DRAG
INSIDE = _vsp_g.INSIDE
OUTSIDE = _vsp_g.OUTSIDE
NONE = _vsp_g.NONE
CONST_U = _vsp_g.CONST_U
CONST_W = _vsp_g.CONST_W
SS_LINE = _vsp_g.SS_LINE
SS_RECTANGLE = _vsp_g.SS_RECTANGLE
SS_ELLIPSE = _vsp_g.SS_ELLIPSE
SS_CONTROL = _vsp_g.SS_CONTROL
SS_LINE_ARRAY = _vsp_g.SS_LINE_ARRAY
SS_NUM_TYPES = _vsp_g.SS_NUM_TYPES
SYM_XY = _vsp_g.SYM_XY
SYM_XZ = _vsp_g.SYM_XZ
SYM_YZ = _vsp_g.SYM_YZ
SYM_ROT_X = _vsp_g.SYM_ROT_X
SYM_ROT_Y = _vsp_g.SYM_ROT_Y
SYM_ROT_Z = _vsp_g.SYM_ROT_Z
SYM_PLANAR_TYPES = _vsp_g.SYM_PLANAR_TYPES
SYM_NUM_TYPES = _vsp_g.SYM_NUM_TYPES
SYM_NONE = _vsp_g.SYM_NONE
SYM_RL = _vsp_g.SYM_RL
TEMP_UNIT_K = _vsp_g.TEMP_UNIT_K
TEMP_UNIT_C = _vsp_g.TEMP_UNIT_C
TEMP_UNIT_F = _vsp_g.TEMP_UNIT_F
TEMP_UNIT_R = _vsp_g.TEMP_UNIT_R
V_UNIT_FT_S = _vsp_g.V_UNIT_FT_S
V_UNIT_M_S = _vsp_g.V_UNIT_M_S
V_UNIT_MPH = _vsp_g.V_UNIT_MPH
V_UNIT_KM_HR = _vsp_g.V_UNIT_KM_HR
V_UNIT_KEAS = _vsp_g.V_UNIT_KEAS
V_UNIT_KTAS = _vsp_g.V_UNIT_KTAS
V_UNIT_MACH = _vsp_g.V_UNIT_MACH
VIEW_1 = _vsp_g.VIEW_1
VIEW_2HOR = _vsp_g.VIEW_2HOR
VIEW_2VER = _vsp_g.VIEW_2VER
VIEW_4 = _vsp_g.VIEW_4
ROT_0 = _vsp_g.ROT_0
ROT_90 = _vsp_g.ROT_90
ROT_180 = _vsp_g.ROT_180
ROT_270 = _vsp_g.ROT_270
VIEW_LEFT = _vsp_g.VIEW_LEFT
VIEW_RIGHT = _vsp_g.VIEW_RIGHT
VIEW_TOP = _vsp_g.VIEW_TOP
VIEW_BOTTOM = _vsp_g.VIEW_BOTTOM
VIEW_FRONT = _vsp_g.VIEW_FRONT
VIEW_REAR = _vsp_g.VIEW_REAR
VIEW_NONE = _vsp_g.VIEW_NONE
VORTEX_LATTICE = _vsp_g.VORTEX_LATTICE
PANEL = _vsp_g.PANEL
NOISE_FLYBY = _vsp_g.NOISE_FLYBY
NOISE_FOOTPRINT = _vsp_g.NOISE_FOOTPRINT
NOISE_STEADY = _vsp_g.NOISE_STEADY
NOISE_SI = _vsp_g.NOISE_SI
NOISE_ENGLISH = _vsp_g.NOISE_ENGLISH
PRECON_MATRIX = _vsp_g.PRECON_MATRIX
PRECON_JACOBI = _vsp_g.PRECON_JACOBI
PRECON_SSOR = _vsp_g.PRECON_SSOR
STABILITY_OFF = _vsp_g.STABILITY_OFF
STABILITY_DEFAULT = _vsp_g.STABILITY_DEFAULT
STABILITY_P_ANALYSIS = _vsp_g.STABILITY_P_ANALYSIS
STABILITY_Q_ANALYSIS = _vsp_g.STABILITY_Q_ANALYSIS
STABILITY_R_ANALYSIS = _vsp_g.STABILITY_R_ANALYSIS
STABILITY_UNSTEADY = _vsp_g.STABILITY_UNSTEADY
STABILITY_HEAVE = _vsp_g.STABILITY_HEAVE
STABILITY_IMPULSE = _vsp_g.STABILITY_IMPULSE
CFD_NORMAL = _vsp_g.CFD_NORMAL
CFD_NEGATIVE = _vsp_g.CFD_NEGATIVE
CFD_TRANSPARENT = _vsp_g.CFD_TRANSPARENT
CFD_STRUCTURE = _vsp_g.CFD_STRUCTURE
CFD_STIFFENER = _vsp_g.CFD_STIFFENER
CFD_NUM_TYPES = _vsp_g.CFD_NUM_TYPES
NORMAL_SURF = _vsp_g.NORMAL_SURF
WING_SURF = _vsp_g.WING_SURF
DISK_SURF = _vsp_g.DISK_SURF
PROP_SURF = _vsp_g.PROP_SURF
NUM_SURF_TYPES = _vsp_g.NUM_SURF_TYPES
BLEND_FREE = _vsp_g.BLEND_FREE
BLEND_ANGLES = _vsp_g.BLEND_ANGLES
BLEND_MATCH_IN_LE_TRAP = _vsp_g.BLEND_MATCH_IN_LE_TRAP
BLEND_MATCH_IN_TE_TRAP = _vsp_g.BLEND_MATCH_IN_TE_TRAP
BLEND_MATCH_OUT_LE_TRAP = _vsp_g.BLEND_MATCH_OUT_LE_TRAP
BLEND_MATCH_OUT_TE_TRAP = _vsp_g.BLEND_MATCH_OUT_TE_TRAP
BLEND_MATCH_IN_ANGLES = _vsp_g.BLEND_MATCH_IN_ANGLES
BLEND_MATCH_LE_ANGLES = _vsp_g.BLEND_MATCH_LE_ANGLES
BLEND_NUM_TYPES = _vsp_g.BLEND_NUM_TYPES
AR_WSECT_DRIVER = _vsp_g.AR_WSECT_DRIVER
SPAN_WSECT_DRIVER = _vsp_g.SPAN_WSECT_DRIVER
AREA_WSECT_DRIVER = _vsp_g.AREA_WSECT_DRIVER
TAPER_WSECT_DRIVER = _vsp_g.TAPER_WSECT_DRIVER
AVEC_WSECT_DRIVER = _vsp_g.AVEC_WSECT_DRIVER
ROOTC_WSECT_DRIVER = _vsp_g.ROOTC_WSECT_DRIVER
TIPC_WSECT_DRIVER = _vsp_g.TIPC_WSECT_DRIVER
SECSWEEP_WSECT_DRIVER = _vsp_g.SECSWEEP_WSECT_DRIVER
NUM_WSECT_DRIVER = _vsp_g.NUM_WSECT_DRIVER
SWEEP_WSECT_DRIVER = _vsp_g.SWEEP_WSECT_DRIVER
SWEEPLOC_WSECT_DRIVER = _vsp_g.SWEEPLOC_WSECT_DRIVER
SECSWEEPLOC_WSECT_DRIVER = _vsp_g.SECSWEEPLOC_WSECT_DRIVER
XDDM_VAR = _vsp_g.XDDM_VAR
XDDM_CONST = _vsp_g.XDDM_CONST
CLOSE_NONE = _vsp_g.CLOSE_NONE
CLOSE_SKEWLOW = _vsp_g.CLOSE_SKEWLOW
CLOSE_SKEWUP = _vsp_g.CLOSE_SKEWUP
CLOSE_SKEWBOTH = _vsp_g.CLOSE_SKEWBOTH
CLOSE_EXTRAP = _vsp_g.CLOSE_EXTRAP
CLOSE_NUM_TYPES = _vsp_g.CLOSE_NUM_TYPES
XS_UNDEFINED = _vsp_g.XS_UNDEFINED
XS_POINT = _vsp_g.XS_POINT
XS_CIRCLE = _vsp_g.XS_CIRCLE
XS_ELLIPSE = _vsp_g.XS_ELLIPSE
XS_SUPER_ELLIPSE = _vsp_g.XS_SUPER_ELLIPSE
XS_ROUNDED_RECTANGLE = _vsp_g.XS_ROUNDED_RECTANGLE
XS_GENERAL_FUSE = _vsp_g.XS_GENERAL_FUSE
XS_FILE_FUSE = _vsp_g.XS_FILE_FUSE
XS_FOUR_SERIES = _vsp_g.XS_FOUR_SERIES
XS_SIX_SERIES = _vsp_g.XS_SIX_SERIES
XS_BICONVEX = _vsp_g.XS_BICONVEX
XS_WEDGE = _vsp_g.XS_WEDGE
XS_EDIT_CURVE = _vsp_g.XS_EDIT_CURVE
XS_FILE_AIRFOIL = _vsp_g.XS_FILE_AIRFOIL
XS_CST_AIRFOIL = _vsp_g.XS_CST_AIRFOIL
XS_VKT_AIRFOIL = _vsp_g.XS_VKT_AIRFOIL
XS_FOUR_DIGIT_MOD = _vsp_g.XS_FOUR_DIGIT_MOD
XS_FIVE_DIGIT = _vsp_g.XS_FIVE_DIGIT
XS_FIVE_DIGIT_MOD = _vsp_g.XS_FIVE_DIGIT_MOD
XS_ONE_SIX_SERIES = _vsp_g.XS_ONE_SIX_SERIES
XS_NUM_TYPES = _vsp_g.XS_NUM_TYPES
XSEC_BOTH_SIDES = _vsp_g.XSEC_BOTH_SIDES
XSEC_LEFT_SIDE = _vsp_g.XSEC_LEFT_SIDE
XSEC_RIGHT_SIDE = _vsp_g.XSEC_RIGHT_SIDE
TRIM_NONE = _vsp_g.TRIM_NONE
TRIM_X = _vsp_g.TRIM_X
TRIM_THICK = _vsp_g.TRIM_THICK
TRIM_NUM_TYPES = _vsp_g.TRIM_NUM_TYPES
XSEC_FUSE = _vsp_g.XSEC_FUSE
XSEC_STACK = _vsp_g.XSEC_STACK
XSEC_WING = _vsp_g.XSEC_WING
XSEC_CUSTOM = _vsp_g.XSEC_CUSTOM
XSEC_PROP = _vsp_g.XSEC_PROP
XSEC_NUM_TYPES = _vsp_g.XSEC_NUM_TYPES
XS_SHIFT_LE = _vsp_g.XS_SHIFT_LE
XS_SHIFT_MID = _vsp_g.XS_SHIFT_MID
XS_SHIFT_TE = _vsp_g.XS_SHIFT_TE
class ErrorObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorObj, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _vsp_g.new_ErrorObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vsp_g.delete_ErrorObj
    __del__ = lambda self: None

    def GetErrorCode(self):
        return _vsp_g.ErrorObj_GetErrorCode(self)

    def GetErrorString(self):
        return _vsp_g.ErrorObj_GetErrorString(self)
    __swig_setmethods__["m_ErrorCode"] = _vsp_g.ErrorObj_m_ErrorCode_set
    __swig_getmethods__["m_ErrorCode"] = _vsp_g.ErrorObj_m_ErrorCode_get
    if _newclass:
        m_ErrorCode = _swig_property(_vsp_g.ErrorObj_m_ErrorCode_get, _vsp_g.ErrorObj_m_ErrorCode_set)
    __swig_setmethods__["m_ErrorString"] = _vsp_g.ErrorObj_m_ErrorString_set
    __swig_getmethods__["m_ErrorString"] = _vsp_g.ErrorObj_m_ErrorString_get
    if _newclass:
        m_ErrorString = _swig_property(_vsp_g.ErrorObj_m_ErrorString_get, _vsp_g.ErrorObj_m_ErrorString_set)

    def NoError(self):
        return _vsp_g.ErrorObj_NoError(self)
ErrorObj_swigregister = _vsp_g.ErrorObj_swigregister
ErrorObj_swigregister(ErrorObj)

class ErrorMgrSingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorMgrSingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorMgrSingleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetErrorLastCallFlag(self):
        return _vsp_g.ErrorMgrSingleton_GetErrorLastCallFlag(self)

    def GetNumTotalErrors(self):
        return _vsp_g.ErrorMgrSingleton_GetNumTotalErrors(self)

    def PopLastError(self):
        return _vsp_g.ErrorMgrSingleton_PopLastError(self)

    def GetLastError(self):
        return _vsp_g.ErrorMgrSingleton_GetLastError(self)

    def PopErrorAndPrint(self, stream):
        return _vsp_g.ErrorMgrSingleton_PopErrorAndPrint(self, stream)

    def SilenceErrors(self):
        return _vsp_g.ErrorMgrSingleton_SilenceErrors(self)

    def PrintOnErrors(self):
        return _vsp_g.ErrorMgrSingleton_PrintOnErrors(self)

    def AddError(self, code, desc):
        return _vsp_g.ErrorMgrSingleton_AddError(self, code, desc)

    def NoError(self):
        return _vsp_g.ErrorMgrSingleton_NoError(self)

    def MessageCallback(self, arg2, data):
        return _vsp_g.ErrorMgrSingleton_MessageCallback(self, arg2, data)
    if _newclass:
        getInstance = staticmethod(_vsp_g.ErrorMgrSingleton_getInstance)
    else:
        getInstance = _vsp_g.ErrorMgrSingleton_getInstance
ErrorMgrSingleton_swigregister = _vsp_g.ErrorMgrSingleton_swigregister
ErrorMgrSingleton_swigregister(ErrorMgrSingleton)

def ErrorMgrSingleton_getInstance():
    return _vsp_g.ErrorMgrSingleton_getInstance()
ErrorMgrSingleton_getInstance = _vsp_g.ErrorMgrSingleton_getInstance


def VSPCheckSetup():
    return _vsp_g.VSPCheckSetup()
VSPCheckSetup = _vsp_g.VSPCheckSetup

def VSPRenew():
    return _vsp_g.VSPRenew()
VSPRenew = _vsp_g.VSPRenew

def Update():
    return _vsp_g.Update()
Update = _vsp_g.Update

def VSPExit(error_code):
    return _vsp_g.VSPExit(error_code)
VSPExit = _vsp_g.VSPExit

def GetVSPExePath():
    return _vsp_g.GetVSPExePath()
GetVSPExePath = _vsp_g.GetVSPExePath

def RegisterCFDMeshAnalyses():
    return _vsp_g.RegisterCFDMeshAnalyses()
RegisterCFDMeshAnalyses = _vsp_g.RegisterCFDMeshAnalyses

def ReadVSPFile(file_name):
    return _vsp_g.ReadVSPFile(file_name)
ReadVSPFile = _vsp_g.ReadVSPFile

def WriteVSPFile(*args):
    return _vsp_g.WriteVSPFile(*args)
WriteVSPFile = _vsp_g.WriteVSPFile

def SetVSP3FileName(file_name):
    return _vsp_g.SetVSP3FileName(file_name)
SetVSP3FileName = _vsp_g.SetVSP3FileName

def GetVSPFileName():
    return _vsp_g.GetVSPFileName()
GetVSPFileName = _vsp_g.GetVSPFileName

def ClearVSPModel():
    return _vsp_g.ClearVSPModel()
ClearVSPModel = _vsp_g.ClearVSPModel

def InsertVSPFile(file_name, parent_geom_id):
    return _vsp_g.InsertVSPFile(file_name, parent_geom_id)
InsertVSPFile = _vsp_g.InsertVSPFile

def ExportFile(file_name, write_set_index, file_type):
    return _vsp_g.ExportFile(file_name, write_set_index, file_type)
ExportFile = _vsp_g.ExportFile

def ImportFile(file_name, file_type, parent):
    return _vsp_g.ImportFile(file_name, file_type, parent)
ImportFile = _vsp_g.ImportFile

def ReadApplyDESFile(file_name):
    return _vsp_g.ReadApplyDESFile(file_name)
ReadApplyDESFile = _vsp_g.ReadApplyDESFile

def WriteDESFile(file_name):
    return _vsp_g.WriteDESFile(file_name)
WriteDESFile = _vsp_g.WriteDESFile

def ReadApplyXDDMFile(file_name):
    return _vsp_g.ReadApplyXDDMFile(file_name)
ReadApplyXDDMFile = _vsp_g.ReadApplyXDDMFile

def WriteXDDMFile(file_name):
    return _vsp_g.WriteXDDMFile(file_name)
WriteXDDMFile = _vsp_g.WriteXDDMFile

def GetNumDesignVars():
    return _vsp_g.GetNumDesignVars()
GetNumDesignVars = _vsp_g.GetNumDesignVars

def AddDesignVar(parm_id, type):
    return _vsp_g.AddDesignVar(parm_id, type)
AddDesignVar = _vsp_g.AddDesignVar

def DeleteAllDesignVars():
    return _vsp_g.DeleteAllDesignVars()
DeleteAllDesignVars = _vsp_g.DeleteAllDesignVars

def GetDesignVar(index):
    return _vsp_g.GetDesignVar(index)
GetDesignVar = _vsp_g.GetDesignVar

def GetDesignVarType(index):
    return _vsp_g.GetDesignVarType(index)
GetDesignVarType = _vsp_g.GetDesignVarType

def SetComputationFileName(file_type, file_name):
    return _vsp_g.SetComputationFileName(file_type, file_name)
SetComputationFileName = _vsp_g.SetComputationFileName

def ComputeMassProps(set, num_slices):
    return _vsp_g.ComputeMassProps(set, num_slices)
ComputeMassProps = _vsp_g.ComputeMassProps

def ComputeCompGeom(set, half_mesh, file_export_types):
    return _vsp_g.ComputeCompGeom(set, half_mesh, file_export_types)
ComputeCompGeom = _vsp_g.ComputeCompGeom

def ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd=0, end_bnd=0):
    return _vsp_g.ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd, end_bnd)
ComputePlaneSlice = _vsp_g.ComputePlaneSlice

def ComputeDegenGeom(set, file_export_types):
    return _vsp_g.ComputeDegenGeom(set, file_export_types)
ComputeDegenGeom = _vsp_g.ComputeDegenGeom

def ComputeCFDMesh(set, file_export_types):
    return _vsp_g.ComputeCFDMesh(set, file_export_types)
ComputeCFDMesh = _vsp_g.ComputeCFDMesh

def SetCFDMeshVal(type, val):
    return _vsp_g.SetCFDMeshVal(type, val)
SetCFDMeshVal = _vsp_g.SetCFDMeshVal

def SetCFDWakeFlag(geom_id, flag):
    return _vsp_g.SetCFDWakeFlag(geom_id, flag)
SetCFDWakeFlag = _vsp_g.SetCFDWakeFlag

def DeleteAllCFDSources():
    return _vsp_g.DeleteAllCFDSources()
DeleteAllCFDSources = _vsp_g.DeleteAllCFDSources

def AddDefaultSources():
    return _vsp_g.AddDefaultSources()
AddDefaultSources = _vsp_g.AddDefaultSources

def AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2=0, r2=0, u2=0, w2=0):
    return _vsp_g.AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2, r2, u2, w2)
AddCFDSource = _vsp_g.AddCFDSource

def GetVSPAERORefWingID():
    return _vsp_g.GetVSPAERORefWingID()
GetVSPAERORefWingID = _vsp_g.GetVSPAERORefWingID

def SetVSPAERORefWingID(geom_id):
    return _vsp_g.SetVSPAERORefWingID(geom_id)
SetVSPAERORefWingID = _vsp_g.SetVSPAERORefWingID

def GetNumAnalysis():
    return _vsp_g.GetNumAnalysis()
GetNumAnalysis = _vsp_g.GetNumAnalysis

def ListAnalysis():
    return _vsp_g.ListAnalysis()
ListAnalysis = _vsp_g.ListAnalysis

def GetAnalysisInputNames(analysis):
    return _vsp_g.GetAnalysisInputNames(analysis)
GetAnalysisInputNames = _vsp_g.GetAnalysisInputNames

def ExecAnalysis(analysis):
    return _vsp_g.ExecAnalysis(analysis)
ExecAnalysis = _vsp_g.ExecAnalysis

def GetNumAnalysisInputData(analysis, name):
    return _vsp_g.GetNumAnalysisInputData(analysis, name)
GetNumAnalysisInputData = _vsp_g.GetNumAnalysisInputData

def GetAnalysisInputType(analysis, name):
    return _vsp_g.GetAnalysisInputType(analysis, name)
GetAnalysisInputType = _vsp_g.GetAnalysisInputType

def GetIntAnalysisInput(analysis, name, index=0):
    return _vsp_g.GetIntAnalysisInput(analysis, name, index)
GetIntAnalysisInput = _vsp_g.GetIntAnalysisInput

def GetDoubleAnalysisInput(analysis, name, index=0):
    return _vsp_g.GetDoubleAnalysisInput(analysis, name, index)
GetDoubleAnalysisInput = _vsp_g.GetDoubleAnalysisInput

def GetStringAnalysisInput(analysis, name, index=0):
    return _vsp_g.GetStringAnalysisInput(analysis, name, index)
GetStringAnalysisInput = _vsp_g.GetStringAnalysisInput

def GetVec3dAnalysisInput(analysis, name, index=0):
    return _vsp_g.GetVec3dAnalysisInput(analysis, name, index)
GetVec3dAnalysisInput = _vsp_g.GetVec3dAnalysisInput

def SetAnalysisInputDefaults(analysis):
    return _vsp_g.SetAnalysisInputDefaults(analysis)
SetAnalysisInputDefaults = _vsp_g.SetAnalysisInputDefaults

def SetIntAnalysisInput(analysis, name, indata, index=0):
    return _vsp_g.SetIntAnalysisInput(analysis, name, indata, index)
SetIntAnalysisInput = _vsp_g.SetIntAnalysisInput

def SetDoubleAnalysisInput(analysis, name, indata, index=0):
    return _vsp_g.SetDoubleAnalysisInput(analysis, name, indata, index)
SetDoubleAnalysisInput = _vsp_g.SetDoubleAnalysisInput

def SetStringAnalysisInput(analysis, name, indata, index=0):
    return _vsp_g.SetStringAnalysisInput(analysis, name, indata, index)
SetStringAnalysisInput = _vsp_g.SetStringAnalysisInput

def SetVec3dAnalysisInput(analysis, name, indata, index=0):
    return _vsp_g.SetVec3dAnalysisInput(analysis, name, indata, index)
SetVec3dAnalysisInput = _vsp_g.SetVec3dAnalysisInput

def PrintAnalysisInputs(analysis_name):
    return _vsp_g.PrintAnalysisInputs(analysis_name)
PrintAnalysisInputs = _vsp_g.PrintAnalysisInputs

def GetAllResultsNames():
    return _vsp_g.GetAllResultsNames()
GetAllResultsNames = _vsp_g.GetAllResultsNames

def GetAllDataNames(results_id):
    return _vsp_g.GetAllDataNames(results_id)
GetAllDataNames = _vsp_g.GetAllDataNames

def GetNumResults(name):
    return _vsp_g.GetNumResults(name)
GetNumResults = _vsp_g.GetNumResults

def GetResultsName(results_id):
    return _vsp_g.GetResultsName(results_id)
GetResultsName = _vsp_g.GetResultsName

def FindResultsID(name, index=0):
    return _vsp_g.FindResultsID(name, index)
FindResultsID = _vsp_g.FindResultsID

def FindLatestResultsID(name):
    return _vsp_g.FindLatestResultsID(name)
FindLatestResultsID = _vsp_g.FindLatestResultsID

def GetNumData(results_id, data_name):
    return _vsp_g.GetNumData(results_id, data_name)
GetNumData = _vsp_g.GetNumData

def GetResultsType(results_id, data_name):
    return _vsp_g.GetResultsType(results_id, data_name)
GetResultsType = _vsp_g.GetResultsType

def GetIntResults(id, name, index=0):
    return _vsp_g.GetIntResults(id, name, index)
GetIntResults = _vsp_g.GetIntResults

def GetDoubleResults(id, name, index=0):
    return _vsp_g.GetDoubleResults(id, name, index)
GetDoubleResults = _vsp_g.GetDoubleResults

def GetDoubleMatResults(id, name, index=0):
    return _vsp_g.GetDoubleMatResults(id, name, index)
GetDoubleMatResults = _vsp_g.GetDoubleMatResults

def GetStringResults(id, name, index=0):
    return _vsp_g.GetStringResults(id, name, index)
GetStringResults = _vsp_g.GetStringResults

def GetVec3dResults(id, name, index=0):
    return _vsp_g.GetVec3dResults(id, name, index)
GetVec3dResults = _vsp_g.GetVec3dResults

def CreateGeomResults(geom_id, name):
    return _vsp_g.CreateGeomResults(geom_id, name)
CreateGeomResults = _vsp_g.CreateGeomResults

def DeleteAllResults():
    return _vsp_g.DeleteAllResults()
DeleteAllResults = _vsp_g.DeleteAllResults

def DeleteResult(id):
    return _vsp_g.DeleteResult(id)
DeleteResult = _vsp_g.DeleteResult

def WriteResultsCSVFile(id, file_name):
    return _vsp_g.WriteResultsCSVFile(id, file_name)
WriteResultsCSVFile = _vsp_g.WriteResultsCSVFile

def PrintResults(results_id):
    return _vsp_g.PrintResults(results_id)
PrintResults = _vsp_g.PrintResults

def StartGui():
    return _vsp_g.StartGui()
StartGui = _vsp_g.StartGui

def ScreenGrab(fname, w, h, transparentBG):
    return _vsp_g.ScreenGrab(fname, w, h, transparentBG)
ScreenGrab = _vsp_g.ScreenGrab

def SetViewAxis(vaxis):
    return _vsp_g.SetViewAxis(vaxis)
SetViewAxis = _vsp_g.SetViewAxis

def SetShowBorders(brdr):
    return _vsp_g.SetShowBorders(brdr)
SetShowBorders = _vsp_g.SetShowBorders

def SetGeomDrawType(geom_id, type):
    return _vsp_g.SetGeomDrawType(geom_id, type)
SetGeomDrawType = _vsp_g.SetGeomDrawType

def SetGeomDisplayType(geom_id, type):
    return _vsp_g.SetGeomDisplayType(geom_id, type)
SetGeomDisplayType = _vsp_g.SetGeomDisplayType

def SetBackground(r, g, b):
    return _vsp_g.SetBackground(r, g, b)
SetBackground = _vsp_g.SetBackground

def GetGeomTypes():
    return _vsp_g.GetGeomTypes()
GetGeomTypes = _vsp_g.GetGeomTypes

def AddGeom(*args):
    return _vsp_g.AddGeom(*args)
AddGeom = _vsp_g.AddGeom

def UpdateGeom(geom_id):
    return _vsp_g.UpdateGeom(geom_id)
UpdateGeom = _vsp_g.UpdateGeom

def DeleteGeom(geom_id):
    return _vsp_g.DeleteGeom(geom_id)
DeleteGeom = _vsp_g.DeleteGeom

def DeleteGeomVec(del_vec):
    return _vsp_g.DeleteGeomVec(del_vec)
DeleteGeomVec = _vsp_g.DeleteGeomVec

def CutGeomToClipboard(geom_id):
    return _vsp_g.CutGeomToClipboard(geom_id)
CutGeomToClipboard = _vsp_g.CutGeomToClipboard

def CopyGeomToClipboard(geom_id):
    return _vsp_g.CopyGeomToClipboard(geom_id)
CopyGeomToClipboard = _vsp_g.CopyGeomToClipboard

def PasteGeomClipboard(*args):
    return _vsp_g.PasteGeomClipboard(*args)
PasteGeomClipboard = _vsp_g.PasteGeomClipboard

def FindGeoms():
    return _vsp_g.FindGeoms()
FindGeoms = _vsp_g.FindGeoms

def FindGeomsWithName(name):
    return _vsp_g.FindGeomsWithName(name)
FindGeomsWithName = _vsp_g.FindGeomsWithName

def FindGeom(name, index):
    return _vsp_g.FindGeom(name, index)
FindGeom = _vsp_g.FindGeom

def SetGeomName(geom_id, name):
    return _vsp_g.SetGeomName(geom_id, name)
SetGeomName = _vsp_g.SetGeomName

def GetGeomName(geom_id):
    return _vsp_g.GetGeomName(geom_id)
GetGeomName = _vsp_g.GetGeomName

def GetGeomParmIDs(geom_id):
    return _vsp_g.GetGeomParmIDs(geom_id)
GetGeomParmIDs = _vsp_g.GetGeomParmIDs

def GetGeomTypeName(geom_id):
    return _vsp_g.GetGeomTypeName(geom_id)
GetGeomTypeName = _vsp_g.GetGeomTypeName

def GetParm(geom_id, name, group):
    return _vsp_g.GetParm(geom_id, name, group)
GetParm = _vsp_g.GetParm

def GetGeomParent(geom_id):
    return _vsp_g.GetGeomParent(geom_id)
GetGeomParent = _vsp_g.GetGeomParent

def GetGeomChildren(geom_id):
    return _vsp_g.GetGeomChildren(geom_id)
GetGeomChildren = _vsp_g.GetGeomChildren

def GetNumXSecSurfs(geom_id):
    return _vsp_g.GetNumXSecSurfs(geom_id)
GetNumXSecSurfs = _vsp_g.GetNumXSecSurfs

def GetNumMainSurfs(geom_id):
    return _vsp_g.GetNumMainSurfs(geom_id)
GetNumMainSurfs = _vsp_g.GetNumMainSurfs

def GetTotalNumSurfs(geom_id):
    return _vsp_g.GetTotalNumSurfs(geom_id)
GetTotalNumSurfs = _vsp_g.GetTotalNumSurfs

def GetGeomVSPSurfType(geom_id, main_surf_ind=0):
    return _vsp_g.GetGeomVSPSurfType(geom_id, main_surf_ind)
GetGeomVSPSurfType = _vsp_g.GetGeomVSPSurfType

def GetGeomVSPSurfCfdType(geom_id, main_surf_ind=0):
    return _vsp_g.GetGeomVSPSurfCfdType(geom_id, main_surf_ind)
GetGeomVSPSurfCfdType = _vsp_g.GetGeomVSPSurfCfdType

def GetGeomBBoxMax(geom_id, main_surf_ind=0, ref_frame_is_absolute=True):
    return _vsp_g.GetGeomBBoxMax(geom_id, main_surf_ind, ref_frame_is_absolute)
GetGeomBBoxMax = _vsp_g.GetGeomBBoxMax

def GetGeomBBoxMin(geom_id, main_surf_ind=0, ref_frame_is_absolute=True):
    return _vsp_g.GetGeomBBoxMin(geom_id, main_surf_ind, ref_frame_is_absolute)
GetGeomBBoxMin = _vsp_g.GetGeomBBoxMin

def AddSubSurf(geom_id, type, surfindex=0):
    return _vsp_g.AddSubSurf(geom_id, type, surfindex)
AddSubSurf = _vsp_g.AddSubSurf

def GetSubSurf(*args):
    return _vsp_g.GetSubSurf(*args)
GetSubSurf = _vsp_g.GetSubSurf

def DeleteSubSurf(*args):
    return _vsp_g.DeleteSubSurf(*args)
DeleteSubSurf = _vsp_g.DeleteSubSurf

def SetSubSurfName(*args):
    return _vsp_g.SetSubSurfName(*args)
SetSubSurfName = _vsp_g.SetSubSurfName

def GetSubSurfName(*args):
    return _vsp_g.GetSubSurfName(*args)
GetSubSurfName = _vsp_g.GetSubSurfName

def GetSubSurfIndex(sub_id):
    return _vsp_g.GetSubSurfIndex(sub_id)
GetSubSurfIndex = _vsp_g.GetSubSurfIndex

def GetSubSurfIDVec(geom_id):
    return _vsp_g.GetSubSurfIDVec(geom_id)
GetSubSurfIDVec = _vsp_g.GetSubSurfIDVec

def GetAllSubSurfIDs():
    return _vsp_g.GetAllSubSurfIDs()
GetAllSubSurfIDs = _vsp_g.GetAllSubSurfIDs

def GetNumSubSurf(geom_id):
    return _vsp_g.GetNumSubSurf(geom_id)
GetNumSubSurf = _vsp_g.GetNumSubSurf

def GetSubSurfType(sub_id):
    return _vsp_g.GetSubSurfType(sub_id)
GetSubSurfType = _vsp_g.GetSubSurfType

def GetSubSurfParmIDs(sub_id):
    return _vsp_g.GetSubSurfParmIDs(sub_id)
GetSubSurfParmIDs = _vsp_g.GetSubSurfParmIDs

def AddFeaStruct(geom_id, init_skin=True, surfindex=0):
    return _vsp_g.AddFeaStruct(geom_id, init_skin, surfindex)
AddFeaStruct = _vsp_g.AddFeaStruct

def DeleteFeaStruct(geom_id, fea_struct_ind):
    return _vsp_g.DeleteFeaStruct(geom_id, fea_struct_ind)
DeleteFeaStruct = _vsp_g.DeleteFeaStruct

def GetFeaStructID(geom_id, fea_struct_ind):
    return _vsp_g.GetFeaStructID(geom_id, fea_struct_ind)
GetFeaStructID = _vsp_g.GetFeaStructID

def GetFeaStructIndex(struct_id):
    return _vsp_g.GetFeaStructIndex(struct_id)
GetFeaStructIndex = _vsp_g.GetFeaStructIndex

def GetFeaStructParentGeomID(struct_id):
    return _vsp_g.GetFeaStructParentGeomID(struct_id)
GetFeaStructParentGeomID = _vsp_g.GetFeaStructParentGeomID

def GetFeaStructName(geom_id, fea_struct_ind):
    return _vsp_g.GetFeaStructName(geom_id, fea_struct_ind)
GetFeaStructName = _vsp_g.GetFeaStructName

def SetFeaStructName(geom_id, fea_struct_ind, name):
    return _vsp_g.SetFeaStructName(geom_id, fea_struct_ind, name)
SetFeaStructName = _vsp_g.SetFeaStructName

def GetFeaStructIDVec():
    return _vsp_g.GetFeaStructIDVec()
GetFeaStructIDVec = _vsp_g.GetFeaStructIDVec

def SetFeaPartName(part_id, name):
    return _vsp_g.SetFeaPartName(part_id, name)
SetFeaPartName = _vsp_g.SetFeaPartName

def AddFeaPart(geom_id, fea_struct_ind, type):
    return _vsp_g.AddFeaPart(geom_id, fea_struct_ind, type)
AddFeaPart = _vsp_g.AddFeaPart

def DeleteFeaPart(geom_id, fea_struct_ind, part_id):
    return _vsp_g.DeleteFeaPart(geom_id, fea_struct_ind, part_id)
DeleteFeaPart = _vsp_g.DeleteFeaPart

def GetFeaPartID(fea_struct_id, fea_part_index):
    return _vsp_g.GetFeaPartID(fea_struct_id, fea_part_index)
GetFeaPartID = _vsp_g.GetFeaPartID

def GetFeaPartName(part_id):
    return _vsp_g.GetFeaPartName(part_id)
GetFeaPartName = _vsp_g.GetFeaPartName

def GetFeaPartType(part_id):
    return _vsp_g.GetFeaPartType(part_id)
GetFeaPartType = _vsp_g.GetFeaPartType

def GetFeaPartIDVec(fea_struct_id):
    return _vsp_g.GetFeaPartIDVec(fea_struct_id)
GetFeaPartIDVec = _vsp_g.GetFeaPartIDVec

def GetFeaSubSurfIDVec(fea_struct_id):
    return _vsp_g.GetFeaSubSurfIDVec(fea_struct_id)
GetFeaSubSurfIDVec = _vsp_g.GetFeaSubSurfIDVec

def SetFeaPartPerpendicularSparID(part_id, perpendicular_spar_id):
    return _vsp_g.SetFeaPartPerpendicularSparID(part_id, perpendicular_spar_id)
SetFeaPartPerpendicularSparID = _vsp_g.SetFeaPartPerpendicularSparID

def GetFeaPartPerpendicularSparID(part_id):
    return _vsp_g.GetFeaPartPerpendicularSparID(part_id)
GetFeaPartPerpendicularSparID = _vsp_g.GetFeaPartPerpendicularSparID

def AddFeaSubSurf(geom_id, fea_struct_ind, type):
    return _vsp_g.AddFeaSubSurf(geom_id, fea_struct_ind, type)
AddFeaSubSurf = _vsp_g.AddFeaSubSurf

def DeleteFeaSubSurf(geom_id, fea_struct_ind, ss_id):
    return _vsp_g.DeleteFeaSubSurf(geom_id, fea_struct_ind, ss_id)
DeleteFeaSubSurf = _vsp_g.DeleteFeaSubSurf

def GetFeaSubSurfIndex(ss_id):
    return _vsp_g.GetFeaSubSurfIndex(ss_id)
GetFeaSubSurfIndex = _vsp_g.GetFeaSubSurfIndex

def NumFeaStructures():
    return _vsp_g.NumFeaStructures()
NumFeaStructures = _vsp_g.NumFeaStructures

def NumFeaParts(fea_struct_id):
    return _vsp_g.NumFeaParts(fea_struct_id)
NumFeaParts = _vsp_g.NumFeaParts

def NumFeaSubSurfs(fea_struct_id):
    return _vsp_g.NumFeaSubSurfs(fea_struct_id)
NumFeaSubSurfs = _vsp_g.NumFeaSubSurfs

def AddFeaMaterial():
    return _vsp_g.AddFeaMaterial()
AddFeaMaterial = _vsp_g.AddFeaMaterial

def AddFeaProperty(property_type=0):
    return _vsp_g.AddFeaProperty(property_type)
AddFeaProperty = _vsp_g.AddFeaProperty

def SetFeaMeshVal(geom_id, fea_struct_ind, type, val):
    return _vsp_g.SetFeaMeshVal(geom_id, fea_struct_ind, type, val)
SetFeaMeshVal = _vsp_g.SetFeaMeshVal

def SetFeaMeshFileName(geom_id, fea_struct_ind, file_type, file_name):
    return _vsp_g.SetFeaMeshFileName(geom_id, fea_struct_ind, file_type, file_name)
SetFeaMeshFileName = _vsp_g.SetFeaMeshFileName

def ComputeFeaMesh(*args):
    return _vsp_g.ComputeFeaMesh(*args)
ComputeFeaMesh = _vsp_g.ComputeFeaMesh

def CutXSec(geom_id, index):
    return _vsp_g.CutXSec(geom_id, index)
CutXSec = _vsp_g.CutXSec

def CopyXSec(geom_id, index):
    return _vsp_g.CopyXSec(geom_id, index)
CopyXSec = _vsp_g.CopyXSec

def PasteXSec(geom_id, index):
    return _vsp_g.PasteXSec(geom_id, index)
PasteXSec = _vsp_g.PasteXSec

def InsertXSec(geom_id, index, type):
    return _vsp_g.InsertXSec(geom_id, index, type)
InsertXSec = _vsp_g.InsertXSec

def SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2):
    return _vsp_g.SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2)
SetDriverGroup = _vsp_g.SetDriverGroup

def GetXSecSurf(geom_id, index):
    return _vsp_g.GetXSecSurf(geom_id, index)
GetXSecSurf = _vsp_g.GetXSecSurf

def GetNumXSec(xsec_surf_id):
    return _vsp_g.GetNumXSec(xsec_surf_id)
GetNumXSec = _vsp_g.GetNumXSec

def GetXSec(xsec_surf_id, xsec_index):
    return _vsp_g.GetXSec(xsec_surf_id, xsec_index)
GetXSec = _vsp_g.GetXSec

def ChangeXSecShape(xsec_surf_id, xsec_index, type):
    return _vsp_g.ChangeXSecShape(xsec_surf_id, xsec_index, type)
ChangeXSecShape = _vsp_g.ChangeXSecShape

def SetXSecSurfGlobalXForm(xsec_surf_id, mat):
    return _vsp_g.SetXSecSurfGlobalXForm(xsec_surf_id, mat)
SetXSecSurfGlobalXForm = _vsp_g.SetXSecSurfGlobalXForm

def GetXSecSurfGlobalXForm(xsec_surf_id):
    return _vsp_g.GetXSecSurfGlobalXForm(xsec_surf_id)
GetXSecSurfGlobalXForm = _vsp_g.GetXSecSurfGlobalXForm

def GetXSecShape(xsec_id):
    return _vsp_g.GetXSecShape(xsec_id)
GetXSecShape = _vsp_g.GetXSecShape

def GetXSecWidth(xsec_id):
    return _vsp_g.GetXSecWidth(xsec_id)
GetXSecWidth = _vsp_g.GetXSecWidth

def GetXSecHeight(xsec_id):
    return _vsp_g.GetXSecHeight(xsec_id)
GetXSecHeight = _vsp_g.GetXSecHeight

def SetXSecWidthHeight(xsec_id, w, h):
    return _vsp_g.SetXSecWidthHeight(xsec_id, w, h)
SetXSecWidthHeight = _vsp_g.SetXSecWidthHeight

def SetXSecWidth(xsec_id, w):
    return _vsp_g.SetXSecWidth(xsec_id, w)
SetXSecWidth = _vsp_g.SetXSecWidth

def SetXSecHeight(xsec_id, h):
    return _vsp_g.SetXSecHeight(xsec_id, h)
SetXSecHeight = _vsp_g.SetXSecHeight

def GetXSecParmIDs(xsec_id):
    return _vsp_g.GetXSecParmIDs(xsec_id)
GetXSecParmIDs = _vsp_g.GetXSecParmIDs

def GetXSecParm(xsec_id, name):
    return _vsp_g.GetXSecParm(xsec_id, name)
GetXSecParm = _vsp_g.GetXSecParm

def ReadFileXSec(xsec_id, file_name):
    return _vsp_g.ReadFileXSec(xsec_id, file_name)
ReadFileXSec = _vsp_g.ReadFileXSec

def SetXSecPnts(xsec_id, pnt_vec):
    return _vsp_g.SetXSecPnts(xsec_id, pnt_vec)
SetXSecPnts = _vsp_g.SetXSecPnts

def ComputeXSecPnt(xsec_id, fract):
    return _vsp_g.ComputeXSecPnt(xsec_id, fract)
ComputeXSecPnt = _vsp_g.ComputeXSecPnt

def ComputeXSecTan(xsec_id, fract):
    return _vsp_g.ComputeXSecTan(xsec_id, fract)
ComputeXSecTan = _vsp_g.ComputeXSecTan

def ResetXSecSkinParms(xsec_id):
    return _vsp_g.ResetXSecSkinParms(xsec_id)
ResetXSecSkinParms = _vsp_g.ResetXSecSkinParms

def SetXSecContinuity(xsec_id, cx):
    return _vsp_g.SetXSecContinuity(xsec_id, cx)
SetXSecContinuity = _vsp_g.SetXSecContinuity

def SetXSecTanAngles(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanAngles(xsec_id, side, top, right, bottom, left)
SetXSecTanAngles = _vsp_g.SetXSecTanAngles

def SetXSecTanSlews(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanSlews(xsec_id, side, top, right, bottom, left)
SetXSecTanSlews = _vsp_g.SetXSecTanSlews

def SetXSecTanStrengths(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanStrengths(xsec_id, side, top, right, bottom, left)
SetXSecTanStrengths = _vsp_g.SetXSecTanStrengths

def SetXSecCurvatures(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecCurvatures(xsec_id, side, top, right, bottom, left)
SetXSecCurvatures = _vsp_g.SetXSecCurvatures

def ChangeBORXSecShape(geom_id, type):
    return _vsp_g.ChangeBORXSecShape(geom_id, type)
ChangeBORXSecShape = _vsp_g.ChangeBORXSecShape

def GetBORXSecShape(geom_id):
    return _vsp_g.GetBORXSecShape(geom_id)
GetBORXSecShape = _vsp_g.GetBORXSecShape

def ReadFileAirfoil(xsec_id, file_name):
    return _vsp_g.ReadFileAirfoil(xsec_id, file_name)
ReadFileAirfoil = _vsp_g.ReadFileAirfoil

def SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec):
    return _vsp_g.SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec)
SetAirfoilPnts = _vsp_g.SetAirfoilPnts

def GetHersheyBarLiftDist(npts, alpha, Vinf, span, full_span_flag=False):
    return _vsp_g.GetHersheyBarLiftDist(npts, alpha, Vinf, span, full_span_flag)
GetHersheyBarLiftDist = _vsp_g.GetHersheyBarLiftDist

def GetHersheyBarDragDist(npts, alpha, Vinf, span, full_span_flag=False):
    return _vsp_g.GetHersheyBarDragDist(npts, alpha, Vinf, span, full_span_flag)
GetHersheyBarDragDist = _vsp_g.GetHersheyBarDragDist

def GetVKTAirfoilPnts(npts, alpha, epsilon, kappa, tau):
    return _vsp_g.GetVKTAirfoilPnts(npts, alpha, epsilon, kappa, tau)
GetVKTAirfoilPnts = _vsp_g.GetVKTAirfoilPnts

def GetVKTAirfoilCpDist(alpha, epsilon, kappa, tau, xyz_data):
    return _vsp_g.GetVKTAirfoilCpDist(alpha, epsilon, kappa, tau, xyz_data)
GetVKTAirfoilCpDist = _vsp_g.GetVKTAirfoilCpDist

def GetEllipsoidSurfPnts(center, abc_rad, u_npts=20, w_npts=20):
    return _vsp_g.GetEllipsoidSurfPnts(center, abc_rad, u_npts, w_npts)
GetEllipsoidSurfPnts = _vsp_g.GetEllipsoidSurfPnts

def GetFeatureLinePnts(geom_id):
    return _vsp_g.GetFeatureLinePnts(geom_id)
GetFeatureLinePnts = _vsp_g.GetFeatureLinePnts

def GetEllipsoidCpDist(surf_pnt_vec, abc_rad, V_inf):
    return _vsp_g.GetEllipsoidCpDist(surf_pnt_vec, abc_rad, V_inf)
GetEllipsoidCpDist = _vsp_g.GetEllipsoidCpDist

def IntegrateEllipsoidFlow(abc_rad, abc_index):
    return _vsp_g.IntegrateEllipsoidFlow(abc_rad, abc_index)
IntegrateEllipsoidFlow = _vsp_g.IntegrateEllipsoidFlow

def GetAirfoilUpperPnts(xsec_id):
    return _vsp_g.GetAirfoilUpperPnts(xsec_id)
GetAirfoilUpperPnts = _vsp_g.GetAirfoilUpperPnts

def GetAirfoilLowerPnts(xsec_id):
    return _vsp_g.GetAirfoilLowerPnts(xsec_id)
GetAirfoilLowerPnts = _vsp_g.GetAirfoilLowerPnts

def GetUpperCSTCoefs(xsec_id):
    return _vsp_g.GetUpperCSTCoefs(xsec_id)
GetUpperCSTCoefs = _vsp_g.GetUpperCSTCoefs

def GetLowerCSTCoefs(xsec_id):
    return _vsp_g.GetLowerCSTCoefs(xsec_id)
GetLowerCSTCoefs = _vsp_g.GetLowerCSTCoefs

def GetUpperCSTDegree(xsec_id):
    return _vsp_g.GetUpperCSTDegree(xsec_id)
GetUpperCSTDegree = _vsp_g.GetUpperCSTDegree

def GetLowerCSTDegree(xsec_id):
    return _vsp_g.GetLowerCSTDegree(xsec_id)
GetLowerCSTDegree = _vsp_g.GetLowerCSTDegree

def SetUpperCST(xsec_id, deg, coefs):
    return _vsp_g.SetUpperCST(xsec_id, deg, coefs)
SetUpperCST = _vsp_g.SetUpperCST

def SetLowerCST(xsec_id, deg, coefs):
    return _vsp_g.SetLowerCST(xsec_id, deg, coefs)
SetLowerCST = _vsp_g.SetLowerCST

def PromoteCSTUpper(xsec_id):
    return _vsp_g.PromoteCSTUpper(xsec_id)
PromoteCSTUpper = _vsp_g.PromoteCSTUpper

def PromoteCSTLower(xsec_id):
    return _vsp_g.PromoteCSTLower(xsec_id)
PromoteCSTLower = _vsp_g.PromoteCSTLower

def DemoteCSTUpper(xsec_id):
    return _vsp_g.DemoteCSTUpper(xsec_id)
DemoteCSTUpper = _vsp_g.DemoteCSTUpper

def DemoteCSTLower(xsec_id):
    return _vsp_g.DemoteCSTLower(xsec_id)
DemoteCSTLower = _vsp_g.DemoteCSTLower

def FitAfCST(xsec_surf_id, xsec_index, deg):
    return _vsp_g.FitAfCST(xsec_surf_id, xsec_index, deg)
FitAfCST = _vsp_g.FitAfCST

def WriteBezierAirfoil(file_name, geom_id, foilsurf_u):
    return _vsp_g.WriteBezierAirfoil(file_name, geom_id, foilsurf_u)
WriteBezierAirfoil = _vsp_g.WriteBezierAirfoil

def WriteSeligAirfoil(file_name, geom_id, foilsurf_u):
    return _vsp_g.WriteSeligAirfoil(file_name, geom_id, foilsurf_u)
WriteSeligAirfoil = _vsp_g.WriteSeligAirfoil

def GetAirfoilCoordinates(geom_id, foilsurf_u):
    return _vsp_g.GetAirfoilCoordinates(geom_id, foilsurf_u)
GetAirfoilCoordinates = _vsp_g.GetAirfoilCoordinates

def EditXSecInitShape(xsec_id):
    return _vsp_g.EditXSecInitShape(xsec_id)
EditXSecInitShape = _vsp_g.EditXSecInitShape

def EditXSecConvertTo(xsec_id, newtype):
    return _vsp_g.EditXSecConvertTo(xsec_id, newtype)
EditXSecConvertTo = _vsp_g.EditXSecConvertTo

def GetEditXSecUVec(xsec_id):
    return _vsp_g.GetEditXSecUVec(xsec_id)
GetEditXSecUVec = _vsp_g.GetEditXSecUVec

def GetEditXSecCtrlVec(xsec_id, non_dimensional=True):
    return _vsp_g.GetEditXSecCtrlVec(xsec_id, non_dimensional)
GetEditXSecCtrlVec = _vsp_g.GetEditXSecCtrlVec

def SetEditXSecPnts(xsec_id, u_vec, control_pts):
    return _vsp_g.SetEditXSecPnts(xsec_id, u_vec, control_pts)
SetEditXSecPnts = _vsp_g.SetEditXSecPnts

def EditXSecDelPnt(xsec_id, indx):
    return _vsp_g.EditXSecDelPnt(xsec_id, indx)
EditXSecDelPnt = _vsp_g.EditXSecDelPnt

def EditXSecSplit01(xsec_id, u):
    return _vsp_g.EditXSecSplit01(xsec_id, u)
EditXSecSplit01 = _vsp_g.EditXSecSplit01

def MoveEditXSecPnt(xsec_id, indx, new_pnt):
    return _vsp_g.MoveEditXSecPnt(xsec_id, indx, new_pnt)
MoveEditXSecPnt = _vsp_g.MoveEditXSecPnt

def ConvertXSecToEdit(geom_id, indx=0):
    return _vsp_g.ConvertXSecToEdit(geom_id, indx)
ConvertXSecToEdit = _vsp_g.ConvertXSecToEdit

def GetNumSets():
    return _vsp_g.GetNumSets()
GetNumSets = _vsp_g.GetNumSets

def SetSetName(index, name):
    return _vsp_g.SetSetName(index, name)
SetSetName = _vsp_g.SetSetName

def GetSetName(index):
    return _vsp_g.GetSetName(index)
GetSetName = _vsp_g.GetSetName

def GetGeomSetAtIndex(index):
    return _vsp_g.GetGeomSetAtIndex(index)
GetGeomSetAtIndex = _vsp_g.GetGeomSetAtIndex

def GetGeomSet(name):
    return _vsp_g.GetGeomSet(name)
GetGeomSet = _vsp_g.GetGeomSet

def GetSetIndex(name):
    return _vsp_g.GetSetIndex(name)
GetSetIndex = _vsp_g.GetSetIndex

def GetSetFlag(geom_id, set_index):
    return _vsp_g.GetSetFlag(geom_id, set_index)
GetSetFlag = _vsp_g.GetSetFlag

def SetSetFlag(geom_id, set_index, flag):
    return _vsp_g.SetSetFlag(geom_id, set_index, flag)
SetSetFlag = _vsp_g.SetSetFlag

def CopyPasteSet(copyIndex, pasteIndex):
    return _vsp_g.CopyPasteSet(copyIndex, pasteIndex)
CopyPasteSet = _vsp_g.CopyPasteSet

def ScaleSet(set_index, scale):
    return _vsp_g.ScaleSet(set_index, scale)
ScaleSet = _vsp_g.ScaleSet

def RotateSet(set_index, x_rot_deg, y_rot_deg, z_rot_deg):
    return _vsp_g.RotateSet(set_index, x_rot_deg, y_rot_deg, z_rot_deg)
RotateSet = _vsp_g.RotateSet

def TranslateSet(set_index, translation_vec):
    return _vsp_g.TranslateSet(set_index, translation_vec)
TranslateSet = _vsp_g.TranslateSet

def TransformSet(set_index, translation_vec, x_rot_deg, y_rot_deg, z_rot_deg, scale, scale_translations_flag):
    return _vsp_g.TransformSet(set_index, translation_vec, x_rot_deg, y_rot_deg, z_rot_deg, scale, scale_translations_flag)
TransformSet = _vsp_g.TransformSet

def ValidParm(id):
    return _vsp_g.ValidParm(id)
ValidParm = _vsp_g.ValidParm

def SetParmVal(*args):
    return _vsp_g.SetParmVal(*args)
SetParmVal = _vsp_g.SetParmVal

def SetParmValLimits(parm_id, val, lower_limit, upper_limit):
    return _vsp_g.SetParmValLimits(parm_id, val, lower_limit, upper_limit)
SetParmValLimits = _vsp_g.SetParmValLimits

def SetParmValUpdate(*args):
    return _vsp_g.SetParmValUpdate(*args)
SetParmValUpdate = _vsp_g.SetParmValUpdate

def GetParmVal(*args):
    return _vsp_g.GetParmVal(*args)
GetParmVal = _vsp_g.GetParmVal

def GetIntParmVal(parm_id):
    return _vsp_g.GetIntParmVal(parm_id)
GetIntParmVal = _vsp_g.GetIntParmVal

def GetBoolParmVal(parm_id):
    return _vsp_g.GetBoolParmVal(parm_id)
GetBoolParmVal = _vsp_g.GetBoolParmVal

def SetParmUpperLimit(parm_id, val):
    return _vsp_g.SetParmUpperLimit(parm_id, val)
SetParmUpperLimit = _vsp_g.SetParmUpperLimit

def GetParmUpperLimit(parm_id):
    return _vsp_g.GetParmUpperLimit(parm_id)
GetParmUpperLimit = _vsp_g.GetParmUpperLimit

def SetParmLowerLimit(parm_id, val):
    return _vsp_g.SetParmLowerLimit(parm_id, val)
SetParmLowerLimit = _vsp_g.SetParmLowerLimit

def GetParmLowerLimit(parm_id):
    return _vsp_g.GetParmLowerLimit(parm_id)
GetParmLowerLimit = _vsp_g.GetParmLowerLimit

def GetParmType(parm_id):
    return _vsp_g.GetParmType(parm_id)
GetParmType = _vsp_g.GetParmType

def GetParmName(parm_id):
    return _vsp_g.GetParmName(parm_id)
GetParmName = _vsp_g.GetParmName

def GetParmGroupName(parm_id):
    return _vsp_g.GetParmGroupName(parm_id)
GetParmGroupName = _vsp_g.GetParmGroupName

def GetParmDisplayGroupName(parm_id):
    return _vsp_g.GetParmDisplayGroupName(parm_id)
GetParmDisplayGroupName = _vsp_g.GetParmDisplayGroupName

def GetParmContainer(parm_id):
    return _vsp_g.GetParmContainer(parm_id)
GetParmContainer = _vsp_g.GetParmContainer

def SetParmDescript(parm_id, desc):
    return _vsp_g.SetParmDescript(parm_id, desc)
SetParmDescript = _vsp_g.SetParmDescript

def FindParm(parm_container_id, parm_name, group_name):
    return _vsp_g.FindParm(parm_container_id, parm_name, group_name)
FindParm = _vsp_g.FindParm

def FindContainers():
    return _vsp_g.FindContainers()
FindContainers = _vsp_g.FindContainers

def FindContainersWithName(name):
    return _vsp_g.FindContainersWithName(name)
FindContainersWithName = _vsp_g.FindContainersWithName

def FindContainer(name, index):
    return _vsp_g.FindContainer(name, index)
FindContainer = _vsp_g.FindContainer

def GetContainerName(parm_container_id):
    return _vsp_g.GetContainerName(parm_container_id)
GetContainerName = _vsp_g.GetContainerName

def FindContainerGroupNames(parm_container_id):
    return _vsp_g.FindContainerGroupNames(parm_container_id)
FindContainerGroupNames = _vsp_g.FindContainerGroupNames

def FindContainerParmIDs(parm_container_id):
    return _vsp_g.FindContainerParmIDs(parm_container_id)
FindContainerParmIDs = _vsp_g.FindContainerParmIDs

def ComputeMinClearanceDistance(*args):
    return _vsp_g.ComputeMinClearanceDistance(*args)
ComputeMinClearanceDistance = _vsp_g.ComputeMinClearanceDistance

def SnapParm(*args):
    return _vsp_g.SnapParm(*args)
SnapParm = _vsp_g.SnapParm

def AddVarPresetGroup(group_name):
    return _vsp_g.AddVarPresetGroup(group_name)
AddVarPresetGroup = _vsp_g.AddVarPresetGroup

def AddVarPresetSetting(setting_name):
    return _vsp_g.AddVarPresetSetting(setting_name)
AddVarPresetSetting = _vsp_g.AddVarPresetSetting

def AddVarPresetParm(*args):
    return _vsp_g.AddVarPresetParm(*args)
AddVarPresetParm = _vsp_g.AddVarPresetParm

def EditVarPresetParm(*args):
    return _vsp_g.EditVarPresetParm(*args)
EditVarPresetParm = _vsp_g.EditVarPresetParm

def DeleteVarPresetParm(*args):
    return _vsp_g.DeleteVarPresetParm(*args)
DeleteVarPresetParm = _vsp_g.DeleteVarPresetParm

def SwitchVarPreset(group_name, setting_name):
    return _vsp_g.SwitchVarPreset(group_name, setting_name)
SwitchVarPreset = _vsp_g.SwitchVarPreset

def DeleteVarPresetSet(group_name, setting_name):
    return _vsp_g.DeleteVarPresetSet(group_name, setting_name)
DeleteVarPresetSet = _vsp_g.DeleteVarPresetSet

def GetCurrentGroupName():
    return _vsp_g.GetCurrentGroupName()
GetCurrentGroupName = _vsp_g.GetCurrentGroupName

def GetCurrentSettingName():
    return _vsp_g.GetCurrentSettingName()
GetCurrentSettingName = _vsp_g.GetCurrentSettingName

def GetVarPresetGroupNames():
    return _vsp_g.GetVarPresetGroupNames()
GetVarPresetGroupNames = _vsp_g.GetVarPresetGroupNames

def GetVarPresetSettingNamesWName(group_name):
    return _vsp_g.GetVarPresetSettingNamesWName(group_name)
GetVarPresetSettingNamesWName = _vsp_g.GetVarPresetSettingNamesWName

def GetVarPresetSettingNamesWIndex(group_index):
    return _vsp_g.GetVarPresetSettingNamesWIndex(group_index)
GetVarPresetSettingNamesWIndex = _vsp_g.GetVarPresetSettingNamesWIndex

def GetVarPresetParmVals():
    return _vsp_g.GetVarPresetParmVals()
GetVarPresetParmVals = _vsp_g.GetVarPresetParmVals

def GetVarPresetParmValsWNames(group_name, setting_name):
    return _vsp_g.GetVarPresetParmValsWNames(group_name, setting_name)
GetVarPresetParmValsWNames = _vsp_g.GetVarPresetParmValsWNames

def GetVarPresetParmIDs():
    return _vsp_g.GetVarPresetParmIDs()
GetVarPresetParmIDs = _vsp_g.GetVarPresetParmIDs

def GetVarPresetParmIDsWName(group_name):
    return _vsp_g.GetVarPresetParmIDsWName(group_name)
GetVarPresetParmIDsWName = _vsp_g.GetVarPresetParmIDsWName

def SetPCurve(geom_id, pcurveid, tvec, valvec, newtype):
    return _vsp_g.SetPCurve(geom_id, pcurveid, tvec, valvec, newtype)
SetPCurve = _vsp_g.SetPCurve

def PCurveConvertTo(geom_id, pcurveid, newtype):
    return _vsp_g.PCurveConvertTo(geom_id, pcurveid, newtype)
PCurveConvertTo = _vsp_g.PCurveConvertTo

def PCurveGetType(geom_id, pcurveid):
    return _vsp_g.PCurveGetType(geom_id, pcurveid)
PCurveGetType = _vsp_g.PCurveGetType

def PCurveGetTVec(geom_id, pcurveid):
    return _vsp_g.PCurveGetTVec(geom_id, pcurveid)
PCurveGetTVec = _vsp_g.PCurveGetTVec

def PCurveGetValVec(geom_id, pcurveid):
    return _vsp_g.PCurveGetValVec(geom_id, pcurveid)
PCurveGetValVec = _vsp_g.PCurveGetValVec

def PCurveDeletePt(geom_id, pcurveid, indx):
    return _vsp_g.PCurveDeletePt(geom_id, pcurveid, indx)
PCurveDeletePt = _vsp_g.PCurveDeletePt

def PCurveSplit(geom_id, pcurveid, tsplit):
    return _vsp_g.PCurveSplit(geom_id, pcurveid, tsplit)
PCurveSplit = _vsp_g.PCurveSplit

def AutoGroupVSPAEROControlSurfaces():
    return _vsp_g.AutoGroupVSPAEROControlSurfaces()
AutoGroupVSPAEROControlSurfaces = _vsp_g.AutoGroupVSPAEROControlSurfaces

def CreateVSPAEROControlSurfaceGroup():
    return _vsp_g.CreateVSPAEROControlSurfaceGroup()
CreateVSPAEROControlSurfaceGroup = _vsp_g.CreateVSPAEROControlSurfaceGroup

def AddAllToVSPAEROControlSurfaceGroup(CSGroupIndex):
    return _vsp_g.AddAllToVSPAEROControlSurfaceGroup(CSGroupIndex)
AddAllToVSPAEROControlSurfaceGroup = _vsp_g.AddAllToVSPAEROControlSurfaceGroup

def RemoveAllFromVSPAEROControlSurfaceGroup(CSGroupIndex):
    return _vsp_g.RemoveAllFromVSPAEROControlSurfaceGroup(CSGroupIndex)
RemoveAllFromVSPAEROControlSurfaceGroup = _vsp_g.RemoveAllFromVSPAEROControlSurfaceGroup

def GetActiveCSNameVec(CSGroupIndex):
    return _vsp_g.GetActiveCSNameVec(CSGroupIndex)
GetActiveCSNameVec = _vsp_g.GetActiveCSNameVec

def GetCompleteCSNameVec():
    return _vsp_g.GetCompleteCSNameVec()
GetCompleteCSNameVec = _vsp_g.GetCompleteCSNameVec

def GetAvailableCSNameVec(CSGroupIndex):
    return _vsp_g.GetAvailableCSNameVec(CSGroupIndex)
GetAvailableCSNameVec = _vsp_g.GetAvailableCSNameVec

def SetVSPAEROControlGroupName(name, CSGroupIndex):
    return _vsp_g.SetVSPAEROControlGroupName(name, CSGroupIndex)
SetVSPAEROControlGroupName = _vsp_g.SetVSPAEROControlGroupName

def GetVSPAEROControlGroupName(CSGroupIndex):
    return _vsp_g.GetVSPAEROControlGroupName(CSGroupIndex)
GetVSPAEROControlGroupName = _vsp_g.GetVSPAEROControlGroupName

def AddSelectedToCSGroup(selected, CSGroupIndex):
    return _vsp_g.AddSelectedToCSGroup(selected, CSGroupIndex)
AddSelectedToCSGroup = _vsp_g.AddSelectedToCSGroup

def RemoveSelectedFromCSGroup(selected, CSGroupIndex):
    return _vsp_g.RemoveSelectedFromCSGroup(selected, CSGroupIndex)
RemoveSelectedFromCSGroup = _vsp_g.RemoveSelectedFromCSGroup

def GetNumControlSurfaceGroups():
    return _vsp_g.GetNumControlSurfaceGroups()
GetNumControlSurfaceGroups = _vsp_g.GetNumControlSurfaceGroups

def FindActuatorDisk(disk_index):
    return _vsp_g.FindActuatorDisk(disk_index)
FindActuatorDisk = _vsp_g.FindActuatorDisk

def GetNumActuatorDisks():
    return _vsp_g.GetNumActuatorDisks()
GetNumActuatorDisks = _vsp_g.GetNumActuatorDisks

def FindUnsteadyGroup(group_index):
    return _vsp_g.FindUnsteadyGroup(group_index)
FindUnsteadyGroup = _vsp_g.FindUnsteadyGroup

def GetUnsteadyGroupName(group_index):
    return _vsp_g.GetUnsteadyGroupName(group_index)
GetUnsteadyGroupName = _vsp_g.GetUnsteadyGroupName

def GetUnsteadyGroupCompIDs(group_index):
    return _vsp_g.GetUnsteadyGroupCompIDs(group_index)
GetUnsteadyGroupCompIDs = _vsp_g.GetUnsteadyGroupCompIDs

def GetUnsteadyGroupSurfIndexes(group_index):
    return _vsp_g.GetUnsteadyGroupSurfIndexes(group_index)
GetUnsteadyGroupSurfIndexes = _vsp_g.GetUnsteadyGroupSurfIndexes

def GetNumUnsteadyGroups():
    return _vsp_g.GetNumUnsteadyGroups()
GetNumUnsteadyGroups = _vsp_g.GetNumUnsteadyGroups

def AddExcrescence(excresName, excresType, excresVal):
    return _vsp_g.AddExcrescence(excresName, excresType, excresVal)
AddExcrescence = _vsp_g.AddExcrescence

def DeleteExcrescence(index):
    return _vsp_g.DeleteExcrescence(index)
DeleteExcrescence = _vsp_g.DeleteExcrescence

def UpdateParasiteDrag():
    return _vsp_g.UpdateParasiteDrag()
UpdateParasiteDrag = _vsp_g.UpdateParasiteDrag

def WriteAtmosphereCSVFile(file_name, atmos_type):
    return _vsp_g.WriteAtmosphereCSVFile(file_name, atmos_type)
WriteAtmosphereCSVFile = _vsp_g.WriteAtmosphereCSVFile

def CalcAtmosphere(alt, delta_temp, atmos_type, temp, pres, pres_ratio, rho_ratio):
    return _vsp_g.CalcAtmosphere(alt, delta_temp, atmos_type, temp, pres, pres_ratio, rho_ratio)
CalcAtmosphere = _vsp_g.CalcAtmosphere

def WriteBodyFFCSVFile(file_name):
    return _vsp_g.WriteBodyFFCSVFile(file_name)
WriteBodyFFCSVFile = _vsp_g.WriteBodyFFCSVFile

def WriteWingFFCSVFile(file_name):
    return _vsp_g.WriteWingFFCSVFile(file_name)
WriteWingFFCSVFile = _vsp_g.WriteWingFFCSVFile

def WriteCfEqnCSVFile(file_name):
    return _vsp_g.WriteCfEqnCSVFile(file_name)
WriteCfEqnCSVFile = _vsp_g.WriteCfEqnCSVFile

def WritePartialCfMethodCSVFile(file_name):
    return _vsp_g.WritePartialCfMethodCSVFile(file_name)
WritePartialCfMethodCSVFile = _vsp_g.WritePartialCfMethodCSVFile

def CompPnt01(geom_id, surf_indx, u, w):
    return _vsp_g.CompPnt01(geom_id, surf_indx, u, w)
CompPnt01 = _vsp_g.CompPnt01

def CompNorm01(geom_id, surf_indx, u, w):
    return _vsp_g.CompNorm01(geom_id, surf_indx, u, w)
CompNorm01 = _vsp_g.CompNorm01

def CompTanU01(geom_id, surf_indx, u, w):
    return _vsp_g.CompTanU01(geom_id, surf_indx, u, w)
CompTanU01 = _vsp_g.CompTanU01

def CompTanW01(geom_id, surf_indx, u, w):
    return _vsp_g.CompTanW01(geom_id, surf_indx, u, w)
CompTanW01 = _vsp_g.CompTanW01

def CompCurvature01(geom_id, surf_indx, u, w):
    return _vsp_g.CompCurvature01(geom_id, surf_indx, u, w)
CompCurvature01 = _vsp_g.CompCurvature01

def ProjPnt01(geom_id, surf_indx, pt):
    return _vsp_g.ProjPnt01(geom_id, surf_indx, pt)
ProjPnt01 = _vsp_g.ProjPnt01

def ProjPnt01I(geom_id, pt):
    return _vsp_g.ProjPnt01I(geom_id, pt)
ProjPnt01I = _vsp_g.ProjPnt01I

def ProjPnt01Guess(geom_id, surf_indx, pt, u0, w0):
    return _vsp_g.ProjPnt01Guess(geom_id, surf_indx, pt, u0, w0)
ProjPnt01Guess = _vsp_g.ProjPnt01Guess

def CompVecPnt01(geom_id, surf_indx, u_in_vec, w_in_vec):
    return _vsp_g.CompVecPnt01(geom_id, surf_indx, u_in_vec, w_in_vec)
CompVecPnt01 = _vsp_g.CompVecPnt01

def CompVecNorm01(geom_id, surf_indx, us, ws):
    return _vsp_g.CompVecNorm01(geom_id, surf_indx, us, ws)
CompVecNorm01 = _vsp_g.CompVecNorm01

def CompVecCurvature01(geom_id, surf_indx, us, ws):
    return _vsp_g.CompVecCurvature01(geom_id, surf_indx, us, ws)
CompVecCurvature01 = _vsp_g.CompVecCurvature01

def ProjVecPnt01(geom_id, surf_indx, pts):
    return _vsp_g.ProjVecPnt01(geom_id, surf_indx, pts)
ProjVecPnt01 = _vsp_g.ProjVecPnt01

def ProjVecPnt01Guess(geom_id, surf_indx, pts, u0s, w0s):
    return _vsp_g.ProjVecPnt01Guess(geom_id, surf_indx, pts, u0s, w0s)
ProjVecPnt01Guess = _vsp_g.ProjVecPnt01Guess

def GetUWTess01(geom_id, surf_indx):
    return _vsp_g.GetUWTess01(geom_id, surf_indx)
GetUWTess01 = _vsp_g.GetUWTess01

def AddRuler(startgeomid, startsurfindx, startu, startw, endgeomid, endsurfindx, endu, endw, name):
    return _vsp_g.AddRuler(startgeomid, startsurfindx, startu, startw, endgeomid, endsurfindx, endu, endw, name)
AddRuler = _vsp_g.AddRuler

def GetAllRulers():
    return _vsp_g.GetAllRulers()
GetAllRulers = _vsp_g.GetAllRulers

def DelRuler(id):
    return _vsp_g.DelRuler(id)
DelRuler = _vsp_g.DelRuler

def DeleteAllRulers():
    return _vsp_g.DeleteAllRulers()
DeleteAllRulers = _vsp_g.DeleteAllRulers

def AddProbe(geomid, surfindx, u, w, name):
    return _vsp_g.AddProbe(geomid, surfindx, u, w, name)
AddProbe = _vsp_g.AddProbe

def GetAllProbes():
    return _vsp_g.GetAllProbes()
GetAllProbes = _vsp_g.GetAllProbes

def DelProbe(id):
    return _vsp_g.DelProbe(id)
DelProbe = _vsp_g.DelProbe

def DeleteAllProbes():
    return _vsp_g.DeleteAllProbes()
DeleteAllProbes = _vsp_g.DeleteAllProbes

def AddVec3D(INOUT, x, y, z):
    return _vsp_g.AddVec3D(INOUT, x, y, z)
AddVec3D = _vsp_g.AddVec3D
class vec3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _vsp_g.vec3d_v_set
    __swig_getmethods__["v"] = _vsp_g.vec3d_v_get
    if _newclass:
        v = _swig_property(_vsp_g.vec3d_v_get, _vsp_g.vec3d_v_set)
    __swig_destroy__ = _vsp_g.delete_vec3d
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _vsp_g.new_vec3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_xyz(self, xx, yy, zz):
        return _vsp_g.vec3d_set_xyz(self, xx, yy, zz)

    def set_vec(self, a):
        return _vsp_g.vec3d_set_vec(self, a)

    def set_arr(self, *args):
        return _vsp_g.vec3d_set_arr(self, *args)

    def set_x(self, xx):
        return _vsp_g.vec3d_set_x(self, xx)

    def set_y(self, yy):
        return _vsp_g.vec3d_set_y(self, yy)

    def set_z(self, zz):
        return _vsp_g.vec3d_set_z(self, zz)

    def set_refx(self, a):
        return _vsp_g.vec3d_set_refx(self, a)

    def set_refy(self, a):
        return _vsp_g.vec3d_set_refy(self, a)

    def set_refz(self, a):
        return _vsp_g.vec3d_set_refz(self, a)

    def get_pnt(self, *args):
        return _vsp_g.vec3d_get_pnt(self, *args)

    def x(self):
        return _vsp_g.vec3d_x(self)

    def y(self):
        return _vsp_g.vec3d_y(self)

    def z(self):
        return _vsp_g.vec3d_z(self)

    def data(self):
        return _vsp_g.vec3d_data(self)

    def rotate_x(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_x(self, cos_alpha, sin_alpha)

    def rotate_y(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_y(self, cos_alpha, sin_alpha)

    def rotate_z(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_z(self, cos_alpha, sin_alpha)

    def scale_x(self, scale):
        return _vsp_g.vec3d_scale_x(self, scale)

    def scale_y(self, scale):
        return _vsp_g.vec3d_scale_y(self, scale)

    def scale_z(self, scale):
        return _vsp_g.vec3d_scale_z(self, scale)

    def offset_x(self, offset):
        return _vsp_g.vec3d_offset_x(self, offset)

    def offset_y(self, offset):
        return _vsp_g.vec3d_offset_y(self, offset)

    def offset_z(self, offset):
        return _vsp_g.vec3d_offset_z(self, offset)

    def rotate_z_zero_x(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_z_zero_x(self, cos_alpha, sin_alpha)

    def rotate_z_zero_y(self, cos_alpha, sin_alpha):
        return _vsp_g.vec3d_rotate_z_zero_y(self, cos_alpha, sin_alpha)

    def reflect_xy(self):
        return _vsp_g.vec3d_reflect_xy(self)

    def reflect_xz(self):
        return _vsp_g.vec3d_reflect_xz(self)

    def reflect_yz(self):
        return _vsp_g.vec3d_reflect_yz(self)

    def swap_xy(self):
        return _vsp_g.vec3d_swap_xy(self)

    def swap_xz(self):
        return _vsp_g.vec3d_swap_xz(self)

    def swap_yz(self):
        return _vsp_g.vec3d_swap_yz(self)

    def __imul__(self, b):
        return _vsp_g.vec3d___imul__(self, b)

    def __iadd__(self, *args):
        return _vsp_g.vec3d___iadd__(self, *args)

    def __isub__(self, *args):
        return _vsp_g.vec3d___isub__(self, *args)

    def mag(self):
        return _vsp_g.vec3d_mag(self)

    def normalize(self):
        return _vsp_g.vec3d_normalize(self)

    def major_comp(self):
        return _vsp_g.vec3d_major_comp(self)

    def minor_comp(self):
        return _vsp_g.vec3d_minor_comp(self)
vec3d_swigregister = _vsp_g.vec3d_swigregister
vec3d_swigregister(vec3d)
cvar = _vsp_g.cvar

def dist(a, b):
    return _vsp_g.dist(a, b)
dist = _vsp_g.dist

def dist_squared(a, b):
    return _vsp_g.dist_squared(a, b)
dist_squared = _vsp_g.dist_squared

def dot(a, b):
    return _vsp_g.dot(a, b)
dot = _vsp_g.dot

def cross(a, b):
    return _vsp_g.cross(a, b)
cross = _vsp_g.cross

def angle(a, b):
    return _vsp_g.angle(a, b)
angle = _vsp_g.angle

def signed_angle(a, b, ref):
    return _vsp_g.signed_angle(a, b, ref)
signed_angle = _vsp_g.signed_angle

def cos_angle(a, b):
    return _vsp_g.cos_angle(a, b)
cos_angle = _vsp_g.cos_angle

def radius_of_circle(p1, p2, p3):
    return _vsp_g.radius_of_circle(p1, p2, p3)
radius_of_circle = _vsp_g.radius_of_circle

def center_of_circle(p1, p2, p3, center):
    return _vsp_g.center_of_circle(p1, p2, p3, center)
center_of_circle = _vsp_g.center_of_circle

def dist_pnt_2_plane(org, norm, pnt):
    return _vsp_g.dist_pnt_2_plane(org, norm, pnt)
dist_pnt_2_plane = _vsp_g.dist_pnt_2_plane

def dist_pnt_2_line(line_pt1, line_pt2, pnt):
    return _vsp_g.dist_pnt_2_line(line_pt1, line_pt2, pnt)
dist_pnt_2_line = _vsp_g.dist_pnt_2_line

def proj_pnt_on_line_seg(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_line_seg(line_pt1, line_pt2, pnt)
proj_pnt_on_line_seg = _vsp_g.proj_pnt_on_line_seg

def proj_pnt_on_ray(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_ray(line_pt1, line_pt2, pnt)
proj_pnt_on_ray = _vsp_g.proj_pnt_on_ray

def proj_pnt_on_line(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_line(line_pt1, line_pt2, pnt)
proj_pnt_on_line = _vsp_g.proj_pnt_on_line

def proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt):
    return _vsp_g.proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt)
proj_pnt_to_plane = _vsp_g.proj_pnt_to_plane

def tri_seg_intersect(A, B, C, D, E, u, w, t):
    return _vsp_g.tri_seg_intersect(A, B, C, D, E, u, w, t)
tri_seg_intersect = _vsp_g.tri_seg_intersect

def tri_ray_intersect(A, B, C, D, E, u, w, t):
    return _vsp_g.tri_ray_intersect(A, B, C, D, E, u, w, t)
tri_ray_intersect = _vsp_g.tri_ray_intersect

def plane_ray_intersect(*args):
    return _vsp_g.plane_ray_intersect(*args)
plane_ray_intersect = _vsp_g.plane_ray_intersect

def ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2):
    return _vsp_g.ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2)
ray_ray_intersect = _vsp_g.ray_ray_intersect

def tetra_volume(A, B, C):
    return _vsp_g.tetra_volume(A, B, C)
tetra_volume = _vsp_g.tetra_volume

def area(A, B, C):
    return _vsp_g.area(A, B, C)
area = _vsp_g.area

def poly_area(pnt_vec):
    return _vsp_g.poly_area(pnt_vec)
poly_area = _vsp_g.poly_area

def dist3D_Segment_to_Segment(*args):
    return _vsp_g.dist3D_Segment_to_Segment(*args)
dist3D_Segment_to_Segment = _vsp_g.dist3D_Segment_to_Segment

def nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn):
    return _vsp_g.nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn)
nearSegSeg = _vsp_g.nearSegSeg

def pointLineDistSquared(p, lp0, lp1, t):
    return _vsp_g.pointLineDistSquared(p, lp0, lp1, t)
pointLineDistSquared = _vsp_g.pointLineDistSquared

def pointSegDistSquared(p, sp0, sp1, t):
    return _vsp_g.pointSegDistSquared(p, sp0, sp1, t)
pointSegDistSquared = _vsp_g.pointSegDistSquared

def point_on_line(lp0, lp1, t):
    return _vsp_g.point_on_line(lp0, lp1, t)
point_on_line = _vsp_g.point_on_line

def MapToPlane(p, planeOrig, planeVec1, planeVec2):
    return _vsp_g.MapToPlane(p, planeOrig, planeVec1, planeVec2)
MapToPlane = _vsp_g.MapToPlane

def MapFromPlane(uw, planeOrig, planeVec1, planeVec2):
    return _vsp_g.MapFromPlane(uw, planeOrig, planeVec1, planeVec2)
MapFromPlane = _vsp_g.MapFromPlane

def plane_half_space(planeOrig, planeNorm, pnt):
    return _vsp_g.plane_half_space(planeOrig, planeNorm, pnt)
plane_half_space = _vsp_g.plane_half_space

def line_line_intersect(p1, p2, p3, p4, s, t):
    return _vsp_g.line_line_intersect(p1, p2, p3, p4, s, t)
line_line_intersect = _vsp_g.line_line_intersect

def RotateArbAxis(p, theta, r):
    return _vsp_g.RotateArbAxis(p, theta, r)
RotateArbAxis = _vsp_g.RotateArbAxis

def BarycentricWeights(v0, v1, v2, p):
    return _vsp_g.BarycentricWeights(v0, v1, v2, p)
BarycentricWeights = _vsp_g.BarycentricWeights

def BilinearWeights(p0, p1, p, weights):
    return _vsp_g.BilinearWeights(p0, p1, p, weights)
BilinearWeights = _vsp_g.BilinearWeights

def tri_tri_min_dist(v0, v1, v2, v3, v4, v5):
    return _vsp_g.tri_tri_min_dist(v0, v1, v2, v3, v4, v5)
tri_tri_min_dist = _vsp_g.tri_tri_min_dist

def pnt_tri_min_dist(v0, v1, v2, pnt):
    return _vsp_g.pnt_tri_min_dist(v0, v1, v2, pnt)
pnt_tri_min_dist = _vsp_g.pnt_tri_min_dist

def slerp(a, b, t):
    return _vsp_g.slerp(a, b, t)
slerp = _vsp_g.slerp


def to_string(v):
    return _vsp_g.to_string(v)
to_string = _vsp_g.to_string
# This file is compatible with both classic and new-style classes.


