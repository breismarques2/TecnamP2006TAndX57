// generated by Fast Light User Interface Designer (fluid) version 1.0305

#ifndef viewerUI_h
#define viewerUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include "glviewer.H"
#include "GL_VIEWER.forward.declaration.H"
#include <FL/Fl_Output.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Button.H>
#include <FL/fl_ask.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Menu_Button.H>
#include "ContourLevel.h"

class viewerUI {
public:
  viewerUI();
private:
  Fl_Double_Window *mainWindow;
public:
  Fl_Group *MainView;
  Fl_Box *cframe;
  GL_VIEWER *glviewer;
  Fl_Group *OutputPanel;
  Fl_Output *MachOutput;
  Fl_Output *AlphaOutput;
  Fl_Output *BetaOutput;
  Fl_Group *PanelComGeomTags;
  Fl_Browser *PanelComGeomTagsBrowser;
private:
  inline void cb_PanelComGeomTagsBrowser_i(Fl_Browser*, void*);
  static void cb_PanelComGeomTagsBrowser(Fl_Browser*, void*);
public:
  Fl_Button *PanelComGeomTagsBrowserUnSelectAll;
private:
  inline void cb_PanelComGeomTagsBrowserUnSelectAll_i(Fl_Button*, void*);
  static void cb_PanelComGeomTagsBrowserUnSelectAll(Fl_Button*, void*);
public:
  Fl_Button *PanelComGeomTagsBrowserSelectAll;
private:
  inline void cb_PanelComGeomTagsBrowserSelectAll_i(Fl_Button*, void*);
  static void cb_PanelComGeomTagsBrowserSelectAll(Fl_Button*, void*);
public:
  Fl_Button *PanelComGeomTagsBrowserDraw;
private:
  inline void cb_PanelComGeomTagsBrowserDraw_i(Fl_Button*, void*);
  static void cb_PanelComGeomTagsBrowserDraw(Fl_Button*, void*);
public:
  Fl_Choice *PanelComGeomTagsBrowserDrawMethod;
private:
  inline void cb_PanelComGeomTagsBrowserDrawMethod_i(Fl_Choice*, void*);
  static void cb_PanelComGeomTagsBrowserDrawMethod(Fl_Choice*, void*);
  static Fl_Menu_Item menu_PanelComGeomTagsBrowserDrawMethod[];
public:
  static Fl_Menu_Item *PanelComGeomTagsBrowserDrawShaded;
private:
  inline void cb_PanelComGeomTagsBrowserDrawShaded_i(Fl_Menu_*, void*);
  static void cb_PanelComGeomTagsBrowserDrawShaded(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *PanelComGeomTagsBrowserDrawBorders;
private:
  inline void cb_PanelComGeomTagsBrowserDrawBorders_i(Fl_Menu_*, void*);
  static void cb_PanelComGeomTagsBrowserDrawBorders(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *PanelComGeomTagsBrowserDrawShadedAndBorders;
private:
  inline void cb_PanelComGeomTagsBrowserDrawShadedAndBorders_i(Fl_Menu_*, void*);
  static void cb_PanelComGeomTagsBrowserDrawShadedAndBorders(Fl_Menu_*, void*);
public:
  Fl_Button *PanelComGeomTagsBrowserDrawOnlySelected;
private:
  inline void cb_PanelComGeomTagsBrowserDrawOnlySelected_i(Fl_Button*, void*);
  static void cb_PanelComGeomTagsBrowserDrawOnlySelected(Fl_Button*, void*);
public:
  Fl_Button *PanelComGeomTagsBrowserSwapSurfaceNormals;
private:
  inline void cb_PanelComGeomTagsBrowserSwapSurfaceNormals_i(Fl_Button*, void*);
  static void cb_PanelComGeomTagsBrowserSwapSurfaceNormals(Fl_Button*, void*);
public:
  Fl_Output *CommentOutput;
  Fl_Counter *LoadSolutionCase;
private:
  inline void cb_LoadSolutionCase_i(Fl_Counter*, void*);
  static void cb_LoadSolutionCase(Fl_Counter*, void*);
public:
  Fl_Output *NumberOfSolutionCasesText;
  Fl_Menu_Button *FileMenu;
  static Fl_Menu_Item menu_FileMenu[];
  static Fl_Menu_Item *SaveAsMenu;
  static Fl_Menu_Item *FileMenuSaveAsTiff;
private:
  inline void cb_FileMenuSaveAsTiff_i(Fl_Menu_*, void*);
  static void cb_FileMenuSaveAsTiff(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *FileMenuPickQuit;
private:
  inline void cb_FileMenuPickQuit_i(Fl_Menu_*, void*);
  static void cb_FileMenuPickQuit(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *ViewMenu;
  static Fl_Menu_Item menu_ViewMenu[];
  static Fl_Menu_Item *ViewMenuResetView;
private:
  inline void cb_ViewMenuResetView_i(Fl_Menu_*, void*);
  static void cb_ViewMenuResetView(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuTopView;
private:
  inline void cb_ViewMenuTopView_i(Fl_Menu_*, void*);
  static void cb_ViewMenuTopView(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuBottomView;
private:
  inline void cb_ViewMenuBottomView_i(Fl_Menu_*, void*);
  static void cb_ViewMenuBottomView(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuLeftView;
private:
  inline void cb_ViewMenuLeftView_i(Fl_Menu_*, void*);
  static void cb_ViewMenuLeftView(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuRightView;
private:
  inline void cb_ViewMenuRightView_i(Fl_Menu_*, void*);
  static void cb_ViewMenuRightView(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuFrontView;
private:
  inline void cb_ViewMenuFrontView_i(Fl_Menu_*, void*);
  static void cb_ViewMenuFrontView(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuRearView;
private:
  inline void cb_ViewMenuRearView_i(Fl_Menu_*, void*);
  static void cb_ViewMenuRearView(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuIsoViewUp;
private:
  inline void cb_ViewMenuIsoViewUp_i(Fl_Menu_*, void*);
  static void cb_ViewMenuIsoViewUp(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuIsoViewDown;
private:
  inline void cb_ViewMenuIsoViewDown_i(Fl_Menu_*, void*);
  static void cb_ViewMenuIsoViewDown(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewMenuPickBlueBackground;
private:
  inline void cb_ViewMenuPickBlueBackground_i(Fl_Menu_*, void*);
  static void cb_ViewMenuPickBlueBackground(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *ADBMenu;
  static Fl_Menu_Item menu_ADBMenu[];
  static Fl_Menu_Item *ADBMenuPickShaded;
private:
  inline void cb_ADBMenuPickShaded_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickShaded(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickWallCpShaded;
private:
  inline void cb_ADBMenuPickWallCpShaded_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickWallCpShaded(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickWallSteadyCpShaded;
private:
  inline void cb_ADBMenuPickWallSteadyCpShaded_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickWallSteadyCpShaded(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickWallUnsteadyCpShaded;
private:
  inline void cb_ADBMenuPickWallUnsteadyCpShaded_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickWallUnsteadyCpShaded(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickWallGammaShaded;
private:
  inline void cb_ADBMenuPickWallGammaShaded_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickWallGammaShaded(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickWireFrame;
private:
  inline void cb_ADBMenuPickWireFrame_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickWireFrame(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickCoarseMesh;
private:
  inline void cb_ADBMenuPickCoarseMesh_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickCoarseMesh(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickWakes;
private:
  inline void cb_ADBMenuPickWakes_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickWakes(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickRotors;
private:
  inline void cb_ADBMenuPickRotors_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickRotors(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ADBMenuPickControlSurfaces;
private:
  inline void cb_ADBMenuPickControlSurfaces_i(Fl_Menu_*, void*);
  static void cb_ADBMenuPickControlSurfaces(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *LegendMenu;
  static Fl_Menu_Item menu_LegendMenu[];
  static Fl_Menu_Item *LegendMenuPickLabel;
private:
  inline void cb_LegendMenuPickLabel_i(Fl_Menu_*, void*);
  static void cb_LegendMenuPickLabel(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LegendMenuPickLegend;
private:
  inline void cb_LegendMenuPickLegend_i(Fl_Menu_*, void*);
  static void cb_LegendMenuPickLegend(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LegendMenuPickDrawCG;
private:
  inline void cb_LegendMenuPickDrawCG_i(Fl_Menu_*, void*);
  static void cb_LegendMenuPickDrawCG(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LegendMenuPickDrawCGLabel;
private:
  inline void cb_LegendMenuPickDrawCGLabel_i(Fl_Menu_*, void*);
  static void cb_LegendMenuPickDrawCGLabel(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LegendMenuPickDrawAxes;
private:
  inline void cb_LegendMenuPickDrawAxes_i(Fl_Menu_*, void*);
  static void cb_LegendMenuPickDrawAxes(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *OptionsMenu;
  static Fl_Menu_Item menu_OptionsMenu[];
  static Fl_Menu_Item *OptionsMenuSetContourLevels;
private:
  inline void cb_OptionsMenuSetContourLevels_i(Fl_Menu_*, void*);
  static void cb_OptionsMenuSetContourLevels(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ChooseContourType;
  static Fl_Menu_Item *OptionsMenuUsePerTriFunctionShading;
private:
  inline void cb_OptionsMenuUsePerTriFunctionShading_i(Fl_Menu_*, void*);
  static void cb_OptionsMenuUsePerTriFunctionShading(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OptionsMenuUseSmoothFunctionShading;
private:
  inline void cb_OptionsMenuUseSmoothFunctionShading_i(Fl_Menu_*, void*);
  static void cb_OptionsMenuUseSmoothFunctionShading(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OptionsMenuUseLineContours;
private:
  inline void cb_OptionsMenuUseLineContours_i(Fl_Menu_*, void*);
  static void cb_OptionsMenuUseLineContours(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OptionsMenuUseFlatShading;
private:
  inline void cb_OptionsMenuUseFlatShading_i(Fl_Menu_*, void*);
  static void cb_OptionsMenuUseFlatShading(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OptionsMenuDrawWakesToInfinity;
private:
  inline void cb_OptionsMenuDrawWakesToInfinity_i(Fl_Menu_*, void*);
  static void cb_OptionsMenuDrawWakesToInfinity(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *OptionsMenuDrawControlSurfacesDeflected;
private:
  inline void cb_OptionsMenuDrawControlSurfacesDeflected_i(Fl_Menu_*, void*);
  static void cb_OptionsMenuDrawControlSurfacesDeflected(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawReflectedGeometry;
private:
  inline void cb_DrawReflectedGeometry_i(Fl_Menu_*, void*);
  static void cb_DrawReflectedGeometry(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawWakeLines;
private:
  inline void cb_DrawWakeLines_i(Fl_Menu_*, void*);
  static void cb_DrawWakeLines(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawWakeNodes;
private:
  inline void cb_DrawWakeNodes_i(Fl_Menu_*, void*);
  static void cb_DrawWakeNodes(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Beam3D_Off;
private:
  inline void cb_Beam3D_Off_i(Fl_Menu_*, void*);
  static void cb_Beam3D_Off(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Beam3D_On;
private:
  inline void cb_Beam3D_On_i(Fl_Menu_*, void*);
  static void cb_Beam3D_On(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Beam3D_On_Deflected;
private:
  inline void cb_Beam3D_On_Deflected_i(Fl_Menu_*, void*);
  static void cb_Beam3D_On_Deflected(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawXPlane;
private:
  inline void cb_DrawXPlane_i(Fl_Menu_*, void*);
  static void cb_DrawXPlane(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawYPlane;
private:
  inline void cb_DrawYPlane_i(Fl_Menu_*, void*);
  static void cb_DrawYPlane(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawZPlane;
private:
  inline void cb_DrawZPlane_i(Fl_Menu_*, void*);
  static void cb_DrawZPlane(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawColoredWakesOff;
private:
  inline void cb_DrawColoredWakesOff_i(Fl_Menu_*, void*);
  static void cb_DrawColoredWakesOff(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawColoredWakesByWingID;
private:
  inline void cb_DrawColoredWakesByWingID_i(Fl_Menu_*, void*);
  static void cb_DrawColoredWakesByWingID(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DrawColoredWakesBySpan;
private:
  inline void cb_DrawColoredWakesBySpan_i(Fl_Menu_*, void*);
  static void cb_DrawColoredWakesBySpan(Fl_Menu_*, void*);
public:
  Fl_Button *KeyboardControlInfoButton;
private:
  inline void cb_KeyboardControlInfoButton_i(Fl_Button*, void*);
  static void cb_KeyboardControlInfoButton(Fl_Button*, void*);
public:
  void show(int argc, char **argv);
  void LoadInitialData(char *name);
};
#endif
